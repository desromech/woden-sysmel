namespace Woden definition: {
namespace Runtime definition: {

useNamespace: Std Graphics Core.
useNamespace: Woden GpuStructures.

#**
 * I encapsulate a specific rendering scene context. I am using for decoupling
 * material state specification from scene rendering pipeline specific data and method
 *#
class SceneRenderingContext superclass: Std Object; definition: {
    public field stateTracker type: StateTrackerRef.

    public field renderPass type: SceneRenderPass.
    public field renderMode type: SceneRenderMode.

    protected field activeMaterial type: MaterialRef.

    protected field sceneFaceCullingMode type: FaceCullingMode.
    protected field materialFaceCullingMode type: FaceCullingMode.
    protected field materialFaceCullingModeValid type: Boolean8.

    protected field sceneDepthWriteMask type: OverrideableBoolean.
    protected field sceneDepthTestingEnabled type: OverrideableBoolean.

    protected field objectDepthWriteMask type: OverrideableBoolean.
    protected field objectDepthTestingEnabled type: OverrideableBoolean.

    protected field sceneBlendingEquation type: BlendingEquation.
    protected field materialBlendingEquation type: BlendingEquation.
    protected field materialBlendingEquationValid type: Boolean8.

    protected field hasSkinningDeformationState type: Boolean8.

    virtual method reset => Void := {
        activeMaterial := nil.
        self resetMaterialAttributes.
        self resetObjectAttributes.
    }.

    virtual method uploadDeformationState: (deformationStateData: Void const pointer) size: (deformationStateSize: UIntPointer) on: (deformationStateCache: DeformationStateCache ref) ::=> Boolean8
        := false.

    virtual method uploadAndActivateDeformationState: (deformationStateData: Void const pointer) size: (deformationStateSize: UIntPointer) on: (deformationStateCache: DeformationStateCache ref) ::=> Boolean8
        := false.

    virtual method uploadAndActivateWaterDeformationState: (state: Woden Shaders WaterDeformationState const ref) on: (deformationStateCache: DeformationStateCache ref) ::=> Boolean8
        := self uploadAndActivateDeformationState: state address size: Woden Shaders WaterDeformationState instanceSize on: deformationStateCache.

    virtual method uploadAndActivateSkinningState: (state: Float32x4x4 const arraySlice) on: (deformationStateCache: DeformationStateCache ref) ::=> Boolean8 := {
        hasSkinningDeformationState := true.
        self uploadAndActivateDeformationState: state elements size: state size * Float32x4x4 instanceSize on: deformationStateCache.
    }.

    protected field vertexAttributeMask type: UInt32.

    const method vertexAttributeMask => UInt32
        := vertexAttributeMask.

    method vertexAttributeMask: (newVertexAttributeMask: UInt32) ::=> Void := {
        vertexAttributeMask := newVertexAttributeMask.
        activeMaterial := nil.
    }.

    const method hasColor0VertexAttribute => Boolean8
        := vertexAttributeMask anyMask: VertexAttributeLocation Color0 asAttributeBitMask.

    const method hasTangent4VertexAttribute => Boolean8
        := vertexAttributeMask anyMask: VertexAttributeLocation Tangent4 asAttributeBitMask.

    const method hasSkinningVertexAttributes => Boolean8
        := vertexAttributeMask allMask: VertexAttributeLocation Joints0 asAttributeBitMask | VertexAttributeLocation Weights0 asAttributeBitMask.

    const method hasSkinningParameters => Boolean8
        := hasSkinningDeformationState && self hasSkinningVertexAttributes.

    virtual method activateMaterial: (material: MaterialRef const ref) ::=> Boolean8 := {
        activeMaterial == material ifTrue: {
            return: true.
        }.

        self resetMaterialAttributes.
        (material activateWithSceneRenderingContext: self) ifTrue: {
            activeMaterial := material.
            return: true.
        } ifFalse: {
            activeMaterial := nil.
            return: false.
        }
    }.

    method sceneFaceCullingMode: (mode: FaceCullingMode) ::=> Void := {
        sceneFaceCullingMode := mode.

        stateTracker faceCullingMode: self faceCullingMode.
    }.

    method materialFaceCullingMode: (mode: FaceCullingMode) ::=> Void := {
        materialFaceCullingMode := mode.
        materialFaceCullingModeValid := true.

        stateTracker faceCullingMode: self faceCullingMode.
    }.

    method faceCullingMode => FaceCullingMode
        := materialFaceCullingModeValid ifTrue: materialFaceCullingMode ifFalse: sceneFaceCullingMode.

    method sceneDepthWriteMask: (depthWriteMask: OverrideableBoolean) ::=> Void := {
        sceneDepthWriteMask := depthWriteMask.
        stateTracker depthWriteMask: self depthWriteMask.
    }.

    method sceneDepthTestingEnabled: (depthTestingEnabled: OverrideableBoolean) ::=> Void := {
        sceneDepthTestingEnabled := depthTestingEnabled.
        stateTracker depthTestingEnabled: self depthTestingEnabled.
    }.

    method resetObjectAttributes ::=> Void := {
        self
            objectDepthWriteMask: OverrideableBoolean Default;
            objectDepthTestingEnabled: OverrideableBoolean Default.
        hasSkinningDeformationState := false.
    }.

    method objectDepthWriteMask: (depthWriteMask: OverrideableBoolean) ::=> Void := {
        objectDepthWriteMask := depthWriteMask.
        stateTracker depthWriteMask: self depthWriteMask.
    }.

    method objectDepthTestingEnabled: (depthTestingEnabled: OverrideableBoolean) ::=> Void := {
        objectDepthTestingEnabled := depthTestingEnabled.
        stateTracker depthTestingEnabled: self depthTestingEnabled.
    }.

    method depthWriteMask => Boolean8
        := (sceneDepthWriteMask -> objectDepthWriteMask) asBoolean8.

    method depthTestingEnabled => Boolean8
        := (sceneDepthTestingEnabled -> objectDepthTestingEnabled) asBoolean8.

    method sceneBlendingEquation: (blendingEquation: BlendingEquation) ::=> Void := {
        sceneBlendingEquation := blendingEquation.
        stateTracker blendingEquation: self blendingEquation.
    }.

    method materialBlendingEquation: (blendingEquation: BlendingEquation) ::=> Void := {
        materialBlendingEquation := blendingEquation.
        materialBlendingEquationValid := true.
        stateTracker blendingEquation: self blendingEquation.
    }.

    method blendingEquation => BlendingEquation := {
        materialBlendingEquationValid ifTrue: {
            return: materialBlendingEquation
        }.

        sceneBlendingEquation
    }.

    method resetMaterialAttributes ::=> Void := {
        materialFaceCullingModeValid ifTrue: {
            materialFaceCullingModeValid := false.
            stateTracker faceCullingMode: self faceCullingMode.
        }.

        materialBlendingEquationValid ifTrue: {
            materialBlendingEquationValid := false.
            stateTracker blendingEquation: self blendingEquation.
        }.
    }.

    abstract method activateUnlitMaterial: (material: UnlitMaterial ref) ::=> Boolean8.
    abstract method activateMetallicRoughnessMaterial: (material: MetallicRoughnessMaterial ref) ::=> Boolean8.
    abstract method activateSkyMaterial: (material: SkyMaterial ref) ::=> Boolean8.
    abstract method activateWaterMaterial: (material: WaterMaterial ref) ::=> Boolean8.
}.

}. ## End of namespace Runtime
}. ## End of namespace Woden
