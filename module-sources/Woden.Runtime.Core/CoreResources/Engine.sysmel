namespace Woden definition: {
namespace Runtime definition: {

useNamespace: Std Graphics Core.
useNamespace: Std Graphics GUI.

compileTime if: Compiler compilationTarget isDesktopPC then: {
    compileTime constant FrameBufferingCount := 3.
    compileTime constant LargestSupportedIndexType := UInt32.
} else: {
    compileTime constant FrameBufferingCount := 2.
    compileTime constant LargestSupportedIndexType := UInt16.
}.

#**
 * I am core engine instance. I hold strong references to the core subsystem registries.
 *#
class Engine superclass: Std RCObject; definition: {
    protected field windowSystem type: WindowSystemRef.
    protected field renderingDevice type: RenderingDeviceRef.
    protected field resourceCache type: ResourceCacheRef.

    protected field renderingProcessesMutex type: Std Mutex.
    protected field renderingProcesses type: Std Collections Vector(RenderingProcess weakRCPointer).

    protected field frameBufferingIndex type: UInt32.
    protected field syncronizationFences type: (FenceRef array: FrameBufferingCount).
    protected field pendingCommandLists type: Std Collections Vector(CommandListRef).

    const inline method windowSystem => WindowSystemRef const ref
        := windowSystem.

    const inline method renderingDevice => RenderingDeviceRef const ref
        := renderingDevice.

    const inline method resourceCache => ResourceCacheRef const ref
        := resourceCache.

    const inline method mainLoopFrameCount => UInt32
        := windowSystem mainLoopFrameCount.

    const inline method frameBufferingIndex => UInt32
        := frameBufferingIndex.

    method registerRenderingProcess: (process: RenderingProcessWeakRef) ::=> Void := {
        renderingProcessesMutex withLock: {
            renderingProcesses add: process asWeakRCPointer
        }.
    }.

    method unregisterRenderingProcess: (process: RenderingProcessWeakRef) ::=> Void := {
        renderingProcessesMutex withLock: {
            renderingProcesses remove: process asWeakRCPointer
        }.
    }.

    protected field renderingSettings type: EngineRenderingSettings.
    protected field renderingSettingsChanged type: Boolean8.

    method renderingSettings => EngineRenderingSettings const ref
        := renderingSettings.

    method renderingSettings: (newSettings: EngineRenderingSettings const ref) ::=> Void := {
        renderingSettings := newSettings.
        renderingSettingsChanged = true.
    }.

    method parseCommandLine: (arguments: Std ImmutableString const arraySlice) ::=> Boolean8
        := renderingSettings parseFromCommandLine: arguments.

    method initializeEngineWithCommandLine: (arguments: Std ImmutableString const arraySlice) ::=> Boolean8
        := (self parseCommandLine: arguments) && self initializeEngine.

    method initializeEngine => Boolean8 := {
        frameProfiler engine: self address.
        
        windowSystem := createDefaultWindowSystem().
        windowSystem ifNil: { return: false }.

        renderingDevice := RenderingDriverRegistry defaultDriver _ getMainDevice.
        renderingDevice ifNil: {return: false }.

        self queryDeviceCapabilities.

        resourceCache := ResourceCache new
            initializeWithEngine: self asRCRef;
            yourself.

        true
    }.

    protected field projectiveTextureMatrix type: Float32x4x4.

    const inline method projectiveTextureMatrix => Float32x4x4
        := projectiveTextureMatrix.

    method queryDeviceCapabilities => Void := {
        ## Do we need to flip the texture coordinates when doing projective texturing?
        renderingDevice shouldInvertProjectionY not ifTrue: {
            projectiveTextureMatrix := Float32x4x4(
                0.5, 0, 0, 0,
                0, -0.5, 0, 0,
                0, 0, 1.0, 0,
                0.5, 0.5, 0, 1
            )
        } ifFalse: {
            projectiveTextureMatrix := Float32x4x4(
                0.5, 0, 0, 0,
                0, 0.5, 0, 0,
                0, 0, 1.0, 0,
                0.5, 0.5, 0, 1
            )
        }
    }.

    private field globalEventHandler type: EngineGlobalEventHandlerRef.

    method runMainLoop => Int32 := {
        globalEventHandler := EngineGlobalEventHandler new
            engineWeakPtr: self asWeakRCRef;
            yourself.
        windowSystem registerGlobalEventHandler: (globalEventHandler upCastFor: EventHandler).

        let result := windowSystem runMainLoop.

        windowSystem unregisterGlobalEventHandler: (globalEventHandler upCastFor: EventHandler).

        result
    }.

    method runMainLoopAndShutdown => Int32 := {
        let result := self runMainLoop.
        self shutdown.
        result
    }.

    method shutdown => Void := {
        ## Break the cycle between the resource cache and the engine.
        resourceCache := nil.
    }.

    method enqueueCommandList: (commandList: CommandListRef const ref) ::=> Void := {
        pendingCommandLists add: commandList
    }.

    method submitPendingCommandLists => Void := {
        pendingCommandLists ifEmpty: {return: void}.

        let commandQueue := renderingDevice getDefaultCommandQueue.
        pendingCommandLists do: {:each :: Void |
            commandQueue submitCommandList: each
        }.
        pendingCommandLists removeAll.
    }.

    field lastFrameTime type: Float32.
    method lastFrameTime => Float32
        := lastFrameTime.

    public field frameProfiler type: FrameProfiler.

    method onTickEvent: (event: TickEvent ref) ::=> Void := {
        lastFrameTime := event deltaSeconds castTo: Float32.
        frameProfiler beginFrame.

        let thisFrameProcesses mutable type: Std Collections Vector(RenderingProcessRef).
        let thisFrameRenderingProcesses mutable type: Std Collections Vector(RenderingProcessRef).
        pendingCommandLists removeAll.

        ## Get a copy of the rendering processes for this frame.
        renderingProcessesMutex withLock: {
            thisFrameProcesses reserve: renderingProcesses size.
            renderingProcesses do: {:each :: Void |
                let process := each lock asRCRef.
                process ifNotNil: {
                    thisFrameProcesses add: process
                }.
            }
        }.

        ## Notify the process about a settings change.
        frameProfiler updateTime: (Std Chrono profileTimeToRun: {
            renderingSettingsChanged ifTrue: {
                thisFrameProcesses do: {:each :: Void |
                    each onEngineRenderingSettingsChanged: renderingSettings
                }.
                renderingSettingsChanged := false.
            }.

            ## Send the tick event to the rendering processes.
            thisFrameProcesses do: {:each :: Void |
                each onStartFrameTick: event
            }.

            ## Select the rendering processes that need to render.
            thisFrameRenderingProcesses reserve: renderingProcesses size.
            thisFrameProcesses do: {:each :: Void |
                each needsToRender ifTrue: {
                    thisFrameRenderingProcesses add: each.
                }.
            }.
        }).

        thisFrameRenderingProcesses ifEmpty: {
            frameProfiler endFrame.
            return: void
        }.

        ## First phase: prepare rendering.
        frameProfiler renderingPreparationTime: (Std Chrono profileTimeToRun: {
            thisFrameRenderingProcesses do: {:each :: Void |
                each prepareRendering.
            }
        }).

        ## Second phase: command list construction
        frameProfiler commandListConstructionTime: (Std Chrono profileTimeToRun: {
            thisFrameRenderingProcesses do: {:each :: Void |
                each constructRenderingCommandList.
            }
        }).

        ## Third phase: command list submission
        self submitPendingCommandLists.

        ## Fourth phase: drawing surface commiting
        thisFrameRenderingProcesses do: {:each :: Void |
            each commitSurfaces.
        }.

        frameProfiler endFrame.

        ## Rendering queue synchronization.
        self
            signalThisFrameFence;
            advanceSynchronizationFrame;
            waitThisFrameFence.
    }.

    method signalThisFrameFence => Void := {
        let fence ref := syncronizationFences[frameBufferingIndex].
        fence ifNil: {
            fence := renderingDevice createFence
        }.
        fence ifNotNil: {
            renderingDevice getDefaultCommandQueue signalFence: fence
        }.
    }.

    method advanceSynchronizationFrame => Void := {
        frameBufferingIndex := (frameBufferingIndex + 1) % FrameBufferingCount.
    }.

    method waitThisFrameFence => Void := {
        let fence ref := syncronizationFences[frameBufferingIndex].
        fence ifNotNil: {
            fence wait
        }.
    }.
}.

compileTime constant EngineRef := Engine rcRef.
compileTime constant EngineWeakRef := Engine weakRCRef.

class EngineGlobalEventHandler superclass: EventHandler; definition: {
    public field engineWeakPtr type: EngineWeakRef.

    override method onTickEvent: (event: TickEvent ref) ::=> Void := {
        let engine := engineWeakPtr asRCRef.
        engine ifNotNil: {
            engine onTickEvent: event
        }
    }.
}.

compileTime constant EngineGlobalEventHandlerRef := EngineGlobalEventHandler rcRef.


}. ## End of namespace Runtime
}. ## End of namespace Woden
