namespace Woden definition: {
namespace Runtime definition: {

useNamespace: Std Graphics Core.
useNamespace: Std Graphics GUI.


#**
 * I am core engine instance. I hold strong references to the core subsystem registries.
 *#
class ResourceCache superclass: Std RCObject; definition: {
    private field engine type: EngineRef.
    private field assetLocations type: Std Collections Vector(Std FileReference).
    private field lazyResourceCreationMutex type: Std Mutex.

    const inline method engine => EngineRef const ref
        := engine.

    private field defaultMaterial type: MaterialRef.

    const inline method defaultMaterial => MaterialRef const ref
        := defaultMaterial.

    private field checkboardMaterial type: MaterialRef.

    const inline method checkboardMaterial => MaterialRef const ref
        := checkboardMaterial.

    private field whiteTexture type: TextureWithViewRef.

    const inline method whiteTexture => TextureWithViewRef const ref
        := whiteTexture.

    private field blackTexture type: TextureWithViewRef.

    const inline method blackTexture => TextureWithViewRef const ref
        := blackTexture.

    private field transparentTexture type: TextureWithViewRef.

    const inline method transparentTexture => TextureWithViewRef const ref
        := transparentTexture.

    private field checkboardTexture type: TextureWithViewRef.

    const inline method checkboardTexture => TextureWithViewRef const ref
        := checkboardTexture.

    private field neutralNormalTexture type: TextureWithViewRef.

    const inline method neutralNormalTexture => TextureWithViewRef const ref
        := neutralNormalTexture.

    private field whiteTextureCube type: TextureWithViewRef.

    const inline method whiteTextureCube => TextureWithViewRef const ref
        := whiteTextureCube.

    private field blackTextureCube type: TextureWithViewRef.

    const inline method blackTextureCube => TextureWithViewRef const ref
        := blackTextureCube.

    method initializeWithEngine: (anEngine: EngineRef const ref) ::=> Void := {
        engine := anEngine.

        assetLocations
            add: Std FileSystem resourcesDirectory / "woden-assets".

        whiteTexture := self createTextureWithSolidColor: UInt8x4(255, 255, 255, 255) format: PixelFormat R8G8B8A8_UNorm.
        blackTexture := self createTextureWithSolidColor: UInt8x4(0, 0, 0, 255) format: PixelFormat R8G8B8A8_UNorm.
        transparentTexture := self createTextureWithSolidColor: UInt8x4 zeros format: PixelFormat R8G8B8A8_UNorm.
        neutralNormalTexture := self createTextureWithSolidColor: UInt8x4(128, 128, 255, 0) format: PixelFormat R8G8B8A8_UNorm.
        whiteTextureCube := self createTextureCubeWithSolidColor: UInt8x4(255, 255, 255, 255) format: PixelFormat R8G8B8A8_UNorm.
        blackTextureCube := self createTextureCubeWithSolidColor: UInt8x4(0, 0, 0, 255) format: PixelFormat R8G8B8A8_UNorm.
        checkboardTexture := self createCheckboardTexture.

        defaultMaterial := (MetallicRoughnessMaterial for: engine) upCastFor: Material.
        checkboardMaterial := {
            (MetallicRoughnessMaterial for: engine)
                baseColorTexture: checkboardTexture;
                upCastFor: Material
        }.
    }.

    method solveResourceFileReference: (fileReference: Std FileReference const ref) withExtensions: (extensions: Char8 const arraySlice arraySlice) ::=> Std FileReference := {
        fileReference exists ifTrue: {
            return: fileReference
        }.

        {
            extensions do: {:each :: Void |
                let candidate := fileReference withExtension: each.
                candidate exists ifTrue: {
                    return: candidate
                }.
            }.
        }.

        assetLocations reverseDo: {:location :: Void |
            let fileRefWithParent := location resolve: fileReference.
            fileRefWithParent exists ifTrue: {
                return: fileRefWithParent
            }.

            extensions do: {:each :: Void |
                let candidate := fileRefWithParent withExtension: each.
                candidate exists ifTrue: {
                    return: candidate
                }.
            }.
        }.

        fileReference
    }.

    method solveTextureFileReference: (fileReference: Std FileReference const ref) ::=> Std FileReference := {
        ## FIXME: Retrieve the list of available extensions during the runtime.
        let extensions mutable := Char8 const arraySlice array(
            "stx",
            "dds",
            "png",
            "jpg",
            "jpeg",
            "bmp",
            "tga"
        ).

        self solveResourceFileReference: fileReference withExtensions: extensions
    }.

    method createTextureWithSolidColor: (color: UInt8x4) format: (format: PixelFormat) ::=> TextureWithViewRef := {
        let device := engine renderingDevice.
        let texture := device createTexture: (TextureDescription()
            type: TextureType Texture2D;
            width: 1;
            height: 1;
            depth: 1;
            layers: 1;
            miplevels: 1;
            format: format;
            usageModes: TextureUsageMode CopyDestination | TextureUsageMode Sampled;
            mainUsageMode: TextureUsageMode Sampled;
            heapType: MemoryHeapType DeviceLocal;
            sampleCount: 1;
            yourself).

        let data mutable := color.
        texture uploadTextureLevel: 0 layer: 0 pitch: 4 slicePitch: 4 data: data address.
        texture asTextureWithView
    }.

    method createTextureCubeWithSolidColor: (color: UInt8x4) format: (format: PixelFormat) ::=> TextureWithViewRef := {
        let device := engine renderingDevice.
        let texture := device createTexture: (TextureDescription()
            type: TextureType TextureCube;
            width: 1;
            height: 1;
            depth: 1;
            layers: 6;
            miplevels: 1;
            format: format;
            usageModes: TextureUsageMode CopyDestination | TextureUsageMode Sampled;
            mainUsageMode: TextureUsageMode Sampled;
            heapType: MemoryHeapType DeviceLocal;
            sampleCount: 1;
            yourself).

        let data mutable := color.
        0 until: 6 do: {:i :: Void |
            texture uploadTextureLevel: 0 layer: (i castTo: UIntPointer) pitch: 4 slicePitch: 4 data: data address.
        }.

        texture asTextureWithView
    }.

    method createCheckboardTexture => TextureWithViewRef := {
        let device := engine renderingDevice.
        let texture := device createTexture: (TextureDescription()
            type: TextureType Texture2D;
            width: 64;
            height: 64;
            depth: 1;
            layers: 1;
            miplevels: 1;
            format: PixelFormat R8G8B8A8_UNormSRGB;
            usageModes: TextureUsageMode CopyDestination | TextureUsageMode Sampled;
            mainUsageMode: TextureUsageMode Sampled;
            heapType: MemoryHeapType DeviceLocal;
            sampleCount: 1;
            yourself).

        let data mutable type: (UInt8x4 array: 64*64).

        let destIndex mutable := 0.
        0 until: 64 do: {:y :: Void |
            let cellY := (y >> 4) & 1.
            0 until: 64 do: {:x :: Void |
                let cellX := (x >> 4) & 1.
                let isWhite := (cellX ^ cellY) anyMask: 1.
                data[destIndex] := isWhite ifTrue: UInt8x4(255, 255, 255, 255) ifFalse: UInt8x4(0, 0, 0, 255).
                destIndex := destIndex + 1.
            }
        }.

        texture uploadTextureLevel: 0 layer: 0 pitch: 4*64 slicePitch: 4*64*64 data: data address.
        texture asTextureWithView
    }.

    method loadColorTextureFrom: (fileReference: Std FileReference const ref) ::=> TextureWithViewRef := {
        let solvedFileReference := self solveTextureFileReference: fileReference.
        solvedFileReference exists ifFalse: {return: checkboardTexture}.

        let textureData mutable := TextureData readFromFileReference: solvedFileReference.
        textureData ifNil: {return: checkboardTexture}.

        ## Generate the miplevels if required.
        textureData hasGeneratedMipmaps || textureData hasOptimalTargetSpecificTiling ifFalse: {
            let withMiplevels := textureData generateColorMiplevels.
            withMiplevels ifNotNil: {textureData := withMiplevels}
        }.

        let texture := engine renderingDevice createColorTextureWithData: textureData.
        texture ifNil: {return: checkboardTexture}.

        texture asTextureWithView
    }.

    method loadNormalTextureFrom: (fileReference: Std FileReference const ref) ::=> TextureWithViewRef := {
        let solvedFileReference := self solveTextureFileReference: fileReference.
        solvedFileReference exists ifFalse: {return: TextureWithViewRef nil}.

        let textureData mutable := TextureData readFromFileReference: solvedFileReference.
        textureData ifNil: {return: TextureWithViewRef nil}.

        ## Generate the miplevels if required.
        textureData hasGeneratedMipmaps || textureData hasOptimalTargetSpecificTiling ifFalse: {
            let withMiplevels := textureData generateNormalMiplevels.
            withMiplevels ifNotNil: {textureData := withMiplevels}
        }.

        let texture := engine renderingDevice createTextureWithData: textureData.
        texture ifNil: {return: TextureWithViewRef nil}.

        texture asTextureWithView
    }.

    method loadNonColorTextureFrom: (fileReference: Std FileReference const ref) ::=> TextureWithViewRef := {
        let solvedFileReference := self solveTextureFileReference: fileReference.
        solvedFileReference exists ifFalse: {return: TextureWithViewRef nil}.

        let textureData mutable := TextureData readFromFileReference: solvedFileReference.
        textureData ifNil: {return: TextureWithViewRef nil}.

        ## Generate the miplevels if required.
        textureData hasGeneratedMipmaps || textureData hasOptimalTargetSpecificTiling ifFalse: {
            let withMiplevels := textureData generateMiplevels.
            withMiplevels ifNotNil: {textureData := withMiplevels}
        }.

        let texture := engine renderingDevice createTextureWithData: textureData.
        texture ifNil: {return: TextureWithViewRef nil}.

        texture asTextureWithView
    }.

    method loadColorCubeTextureFrom: (fileReference: Std FileReference const ref) ::=> TextureWithViewRef := {
        let solvedFileReference := self solveTextureFileReference: fileReference.
        solvedFileReference exists ifFalse: {return: TextureWithViewRef nil}.

        let textureData := TextureData readFromFileReference: solvedFileReference.
        textureData ifNil: {return: TextureWithViewRef nil}.

        let texture := engine renderingDevice createColorTextureWithData: textureData.
        texture ifNil: {return: TextureWithViewRef nil}.

        texture asTextureWithView
    }.
}.

compileTime constant ResourceCacheRef := ResourceCache rcRef.

}. ## End of namespace Runtime
}. ## End of namespace Woden
