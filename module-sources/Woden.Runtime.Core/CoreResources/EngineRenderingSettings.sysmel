namespace Woden definition: {
namespace Runtime definition: {

#**
 * Engine rendering settings.
 *#
struct EngineRenderingSettings definition: {
    public field vsyncEnabled type: Boolean8.
    public field resolution type: UInt32x2.
    public field fullscreen type: Boolean8.
    public field multiSampleCount type: UInt32.
    public field maxAnisotropy type: UInt32.
    public field shadowMapSize type: UInt32.
    public field screenSpaceAmbientOcclusionQuality type: ScreenSpaceAmbientOcclusionQualitySetting.
    public field profiling type: Boolean8.
    
    public field frameDumping type: Boolean8.
    public field frameDumpingPrefix type: Stdn String.

    method initialize => Void := {
        vsyncEnabled := true.
        resolution := UInt32x2(864, 486).
        shadowMapSize := 2048.
        screenSpaceAmbientOcclusionQuality := ScreenSpaceAmbientOcclusionQualitySetting Low.
        multiSampleCount := 4.
        maxAnisotropy := 4.

        ## We are using the windows Store target mostly for targeting the xbox one.
        ## On the Xbox One X, 4K rendering will always be done by default, and in
        ## the non-4k monitor it will act as super-sampling.
compileTime if: Compiler compilationTarget isWindowsStore then: {
        maxAnisotropy := 16.
        multiSampleCount := 1
}.
    }.

    method parseFromCommandLine: (arguments: Stdn ImmutableString const arraySlice) ::=> Boolean8 := {
        for: (let i mutable type: UIntPointer := 0) while: (i < arguments size) do: {
            arguments[i] selectCase: #{
                "-no-vsync" : {
                    vsyncEnabled := false.
                }.
                "-fullscreen" : {
                    fullscreen := true.
                }.
                "-resolution" : {
                    i + 2 >= arguments size ifTrue: {
                        return: false
                    }.

                    let width := arguments[i := i + 1] parseUInt32.
                    let height := arguments[i := i + 1] parseUInt32.
                    resolution := UInt32x2(width, height)
                }.
                "-shadow-map-size" : {
                    i + 1 >= arguments size ifTrue: {
                        return: false
                    }.

                    shadowMapSize := arguments[i := i + 1] parseUInt32
                }.
                "-msaa" : {
                    i + 1 >= arguments size ifTrue: {
                        return: false
                    }.

                    multiSampleCount := arguments[i := i + 1] parseUInt32 max: 1u.
                }.
                "-anisotropic-quality" : {
                    i + 1 >= arguments size ifTrue: {
                        return: false
                    }.

                    maxAnisotropy := arguments[i := i + 1] parseUInt32 max: 1u.
                }.
                "-ssao-quality" : {
                    i + 1 >= arguments size ifTrue: {
                        return: false
                    }.

                    screenSpaceAmbientOcclusionQuality := ScreenSpaceAmbientOcclusionQualitySetting fromString: arguments[i := i + 1].
                }.
                "-profile" : {
                    profiling := true.
                    i + 1 >= arguments size ifTrue: {
                        return: false
                    }.
                }.


                "-frame-dump-prefix" : {
                    frameDumpingPrefix := arguments[i := i + 1].
                    frameDumping := true.
                }.

                _ : {}
            }.

        } continueWith: (i := i + 1).

        true
    }.
}.

}. ## End of namespace Runtime
}. ## End of namespace Woden
