namespace Woden definition: {
namespace Runtime definition: {

#**
 * I represent a light source in the Woden scene graph.
 *#
class LightSourceNode superclass: AbstractSpatialObjectNode; definition: {
	compileTime constant DefaultSpotOuterCutoff := 45.0f.
	compileTime constant DefaultSpotInnerCutoff := 40.0f.

    private field objectState type: LightSourceObjectRef.
    private field renderingSceneObject type: RenderingSceneLightSourceRef.
    private field spotOuterCutoff type: Float32.
    private field spotInnerCutoff type: Float32.
    private field spotExponent type: Float32.

    override method initialize => Void := {
        spotOuterCutoff := DefaultSpotOuterCutoff.
        spotInnerCutoff := DefaultSpotInnerCutoff.
        spotExponent := 1.0f.

        objectState := LightSourceObject new.
        objectState lightState
            intensity: Float32x4 ones;
            shadowNormalBias: 0.05f;
            innerCosCutoff: -1;
            outerCosCutoff: -1;
            spotExponent: 1;
            radius: 3.0f.
        objectState spotOuterCutoff: spotOuterCutoff.

        renderingSceneObject := RenderingSceneLightSource new
            spatialObject: (objectState upCastFor: AbstractSpatialObject);
            node: (self asWeakRCRef upCastFor: SceneNode);
            volumeChanged;
            yourself
    }.

    method makePoint => Void := {
        objectState lightType: LightSourceType Point.
        objectState lightState
            innerCosCutoff: -1;
            outerCosCutoff: -1;
            spotExponent: 1.
        renderingSceneObject volumeChanged.
    }.

    method makeDirectional => Void := {
        objectState lightType: LightSourceType Directional.
        objectState lightState
            innerCosCutoff: -1;
            outerCosCutoff: -1;
            spotExponent: 1.
        renderingSceneObject volumeChanged.
    }.

    method makeSpot => Void := {
        objectState lightType: LightSourceType Spot.
        objectState lightState
            innerCosCutoff: spotInnerCutoff degreesToRadians cos;
            outerCosCutoff: spotOuterCutoff degreesToRadians cos;
            spotExponent: spotExponent.
        renderingSceneObject volumeChanged.
    }.

    method spotExponent ::=> Float32
        := spotExponent.

    method spotExponent: (exponent: Float32) ::=> Void := {
        spotExponent := exponent.
        objectState lightState
            spotExponent: exponent.
    }.

    method spotOuterCutoff ::=> Float32
        := spotOuterCutoff.

    method spotOuterCutoff: (cutoffAngle: Float32) ::=> Void := {
        spotOuterCutoff := cutoffAngle.
        objectState spotOuterCutoff: spotOuterCutoff.
        objectState lightState outerCosCutoff: spotOuterCutoff degreesToRadians cos.
    }.

    method spotInnerCutoff ::=> Float32
        := spotInnerCutoff.

    method spotInnerCutoff: (cutoffAngle: Float32) ::=> Void := {
        spotInnerCutoff := cutoffAngle.
        objectState lightState innerCosCutoff: spotInnerCutoff degreesToRadians cos.
    }.

    method radius ::=> Float32
        := objectState lightState radius.

    method radius: (radius: Float32) ::=> Void := {
        objectState lightState radius: radius.
        renderingSceneObject volumeChanged.
    }.

    method intensity ::=> Float32x3
        := objectState lightState intensity xyz.

    method intensity: (intensity: Float32x3) ::=> Void := {
        objectState lightState intensity: Float32x4(intensity, 0.0f)
    }.

    const override method isLightSourceNode => Boolean8
        := true.

    method shadowNormalBias ::=> Float32
        := objectState lightState shadowNormalBias.

    method shadowNormalBias: (shadowNormalBias: Float32) ::=> Void := {
        objectState lightState shadowNormalBias: shadowNormalBias.
    }.

    method castShadows ::=> Boolean8
        := objectState castShadows.

    method castShadows: (value: Boolean8) ::=> Void := {
        objectState castShadows: value
    }.

    override method globalTransformChanged => Void := {
        super globalTransformChanged.
        renderingSceneObject transformChanged.
    }.

    override method addRenderingSceneObjectsToSceneLayer: (sceneLayer: SceneLayerRef const ref) ::=> Void := {
        sceneLayer addRenderingSceneObject: (renderingSceneObject upCastFor: RenderingSceneObject).
    }.

    override method removeRenderingSceneObjectsFromSceneLayer: (sceneLayer: SceneLayerRef const ref) ::=> Void := {
        sceneLayer removeRenderingSceneObject: (renderingSceneObject upCastFor: RenderingSceneObject).
    }.
}.

compileTime constant LightSourceNodeRef := LightSourceNode rcRef.

}. ## End of namespace Runtime
}. ## End of namespace Woden
