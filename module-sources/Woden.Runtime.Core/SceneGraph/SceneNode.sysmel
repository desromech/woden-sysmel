namespace Woden definition: {
namespace Runtime definition: {

useNamespace: Std Math Geometry.
useNamespace: Std Math LinearAlgebra.

#**
 * I represent a 3D scene with rendering only objects.
 *#
class SceneNode superclass: Std RCObject; definition: {
    protected field parentWeakRef type: SceneNode weakRCRef.
    protected field sceneWeakRef type: Scene weakRCRef.
    protected field children type: Std Collections Vector(SceneNodeRef).
    protected field transform type: ReversibleAffineTransform3dF32.

    private field globalTransform type: ReversibleAffineTransform3dF32.
    private field globalTransformIsValid type: Boolean8.

    private field localBoundingBox type: BoxF32.
    private field localBoundingBoxIsValid type: Boolean8.

    private field boundingBox type: BoxF32.
    private field boundingBoxIsValid type: Boolean8.

    override method initialize => Void := {
        transform setIdentity.
    }.

    const inline method parent => SceneNodeRef
        := parentWeakRef asRCRef.

    const inline method scene => SceneRef
        := sceneWeakRef asRCRef.

    virtual method sceneLayer => SceneLayer rcRef := {
        let p := self parent.
        p ifNotNil: {
            return: p sceneLayer
        }.

        SceneLayerRef nil
    }.

    const inline method transform => ReversibleAffineTransform3dF32
        := transform.

    inline method transform: (newTransform: ReversibleAffineTransform3dF32) ::=> Void := {
        transform := newTransform.
        self transformChanged.
    }.

    method transformChanged => Void := {
        self parent ifNotNil: {:p :: Void |
            p childTransformChanged: self
        }.

        self boundingBoxChanged.
        self parentTransformChanged.
    }.

    method childTransformChanged: (aChild: SceneNode ref) ::=> Void := {
        self localBoundingBoxChanged.
    }.

    virtual method globalTransformChanged => Void := {
        globalTransformIsValid := false.
    }.

    method parentTransformChanged => Void := {
        self globalTransformChanged.
        children do: {:each :: Void |
            each parentTransformChanged
        }
    }.

    inline method globalTransform => ReversibleAffineTransform3dF32 := {
        globalTransformIsValid ifFalse: { self validateGlobalTransform }.
        globalTransform
    }.

    method validateGlobalTransform => Void := {
        self parent ifNil: {
            globalTransform := transform.
        } ifNotNil: {:p :: Void |
            globalTransform := p globalTransform transformTransform: transform
        }.

        globalTransformIsValid := true.
    }.

    virtual method localInternalBoundingBox => BoxF32
        := BoxF32 empty.

    virtual method localBoundingBoxChanged => Void := {
        localBoundingBoxIsValid := false.
    }.

    method validateLocalBoundingBox => Void := {
        localBoundingBox := self localInternalBoundingBox.
        children do: {:each :: Void |
            localBoundingBox := localBoundingBox unionWith: each boundingBox
        }.

        localBoundingBoxIsValid := true.
    }.

    inline method localBoundingBox => BoxF32 := {
        localBoundingBoxIsValid ifFalse: {self validateLocalBoundingBox}.
        localBoundingBox
    }.

    method validateBoundingBox => Void := {
        boundingBox := self localBoundingBox.
        boundingBox isEmpty ifFalse: {
            boundingBox := boundingBox transformedWith: self transform
        }.

        boundingBoxIsValid := true
    }.

    inline method boundingBox => BoxF32 := {
        boundingBoxIsValid ifFalse: {self validateBoundingBox}.
        boundingBox
    }.

    virtual method boundingBoxChanged ::=> Void := {
        boundingBoxIsValid := false.
    }.

    virtual method addedToScene: (aScene: SceneRef const ref) ::=> Void := {
        sceneWeakRef := aScene asWeakRCRef.
        self sceneLayer ifNotNil: {:layer :: Void |
            self addRenderingSceneObjectsToSceneLayer: layer
        }.

        children do: {:each :: Void |
            each addedToScene: aScene
        }.
    }.

    virtual method removedFromScene: (aScene: SceneRef const ref) ::=> Void := {
        self sceneLayer ifNotNil: {:layer :: Void |
            self removeRenderingSceneObjectsFromSceneLayer: layer
        }.

        children do: {:each :: Void |
            each removedFromScene: aScene
        }.

        sceneWeakRef := nil.
    }.

    virtual method addedToNode: (newParentNode: SceneNodeRef const ref) ::=> Void := {
        parentWeakRef := newParentNode asWeakRCRef.
        let parentScene := newParentNode scene.
        parentScene ifNotNil: {
            self addedToScene: parentScene
        }.
    }.

    virtual method removedFromNode: (newParentNode: SceneNodeRef const ref) ::=> Void := {
        let oldScene := self scene.
        oldScene ifNotNil: { self removedFromScene: oldScene }.
        parentWeakRef := nil.
    }.

    virtual method addRenderingSceneObjectsToSceneLayer: (sceneLayer: SceneLayerRef const ref) ::=> Void := {

    }.

    virtual method removeRenderingSceneObjectsFromSceneLayer: (sceneLayer: SceneLayerRef const ref) ::=> Void := {

    }.

    method addChild: (aChild: SceneNodeRef const ref) ::=> Void := {
        aChild addedToNode: self asRCRef.
        children add: aChild.
    }.

    method removeChild: (aChild: SceneNodeRef const ref) ::=> Void := {
        (children includes: aChild) ifFalse: {return: void}.
        children remove: aChild.
        aChild removedFromNode: self asRCRef.
    }.

    method removeFromScene => Void := {
        let p := self parent.
        p ifNotNil: {
            p removeChild: self asRCRef
        }
    }.

    inline method scaleBy: (scale: Float32x3) ::=> Void := {
        transform scaleBy: scale.
        self transformChanged.
    }.

    inline method scaleByX: (x: Float32) y: (y: Float32) z: (z: Float32) ::=> Void := {
        transform scaleByX: x y: y z: z.
        self transformChanged.
    }.

    inline method rotateDegreesOnX: (x: Float32) ::=> Void := {
        transform rotateDegreesOnX: x.
        self transformChanged.
    }.

    inline method rotateDegreesOnY: (y: Float32) ::=> Void := {
        transform rotateDegreesOnY: y.
        self transformChanged.
    }.

    inline method rotateDegreesOnZ: (z: Float32) ::=> Void := {
        transform rotateDegreesOnY: z.
        self transformChanged.
    }.

    inline method rotateRadiansOnX: (x: Float32) ::=> Void := {
        transform rotateRadiansOnX: x.
        self transformChanged.
    }.

    inline method rotateRadiansOnY: (y: Float32) ::=> Void := {
        transform rotateRadiansOnY: y.
        self transformChanged.
    }.

    inline method rotateRadiansOnZ: (z: Float32) ::=> Void := {
        transform rotateRadiansOnY: z.
        self transformChanged.
    }.

    inline method translateToX: (x: Float32) ::=> Void := {
        transform translateToX: x.
        self transformChanged.
    }.

    inline method translateToY: (y: Float32) ::=> Void := {
        transform translateToY: y.
        self transformChanged.
    }.

    inline method translateToZ: (z: Float32) ::=> Void := {
        transform translateToZ: z.
        self transformChanged.
    }.

    inline method translateToX: (x: Float32) y: (y: Float32) z: (z: Float32) ::=> Void := {
        transform translateToX: x y: y z: z.
        self transformChanged.
    }.

    inline method translateTo: (delta: Float32x3) ::=> Void := {
        transform translateTo: delta.
        self transformChanged.
    }.

    inline method translateByX: (x: Float32) ::=> Void := {
        transform translateByX: x.
        self transformChanged.
    }.

    inline method translateByY: (y: Float32) ::=> Void := {
        transform translateByY: y.
        self transformChanged.
    }.

    inline method translateByZ: (z: Float32) ::=> Void := {
        transform translateByZ: z.
        self transformChanged.
    }.

    inline method translateByX: (x: Float32) y: (y: Float32) z: (z: Float32) ::=> Void := {
        transform translateByX: x y: y z: z.
        self transformChanged.
    }.

    inline method translateBy: (delta: Float32x3) ::=> Void := {
        transform translateBy: delta.
        self transformChanged.
    }.

    inline method lookAtBack => Void := {
        transform lookAtBack.
        self transformChanged.
    }.

    inline method lookAtBottom => Void := {
        transform lookAtBottom.
        self transformChanged.
    }.

    inline method lookAtFront => Void := {
        transform lookAtFront.
        self transformChanged.
    }.

    inline method lookAtLeft => Void := {
        transform lookAtLeft.
        self transformChanged.
    }.

    inline method lookAtRight => Void := {
        transform lookAtRight.
        self transformChanged.
    }.

    inline method lookAtTop => Void := {
        transform lookAtTop.
        self transformChanged.
    }.

    method allNodesDo: (aBlock: SceneNodeIterationBlock) ::=> Void := {
        children do: {:each :: Void |
            each withAllNodesDo: aBlock
        }
    }.

    method withAllNodesDo: (aBlock: SceneNodeIterationBlock) ::=> Void := {
        aBlock(self rcObjectAddress _).
        self allNodesDo: aBlock
    }.

    const virtual method isAbstractSpatialObjectNode => Boolean8
        := false.

    const virtual method isCamera => Boolean8
        := false.

    const virtual method isLightSourceNode => Boolean8
        := false.

    const virtual method isSceneLayer => Boolean8
        := false.

    const virtual method isSpatialObjectNode => Boolean8
        := false.

    virtual const method getSkeletonPose => SkeletonPoseRef
        := SkeletonPoseRef nil.

    virtual method validateRenderingSceneObjectTransform: (renderingSceneObject: RenderingSceneObject ref) ::=> Void := {
        renderingSceneObject spatialObject setCurrentTransform: self globalTransform.
        renderingSceneObject boundingBox: (renderingSceneObject localBoundingBox transformedWith: globalTransform)
    }.
}.

compileTime constant SceneNodeIterationBlock := ((SceneNode ref) => Void) nativeBlockClosure.

compileTime constant SceneNodeRef := SceneNode rcRef.
compileTime constant SceneNodeWeakRef := SceneNode weakRCRef.

}. ## End of namespace Runtime
}. ## End of namespace Woden
