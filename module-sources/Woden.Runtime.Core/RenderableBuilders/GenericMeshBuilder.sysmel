namespace Woden definition: {
namespace Runtime definition: {

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Math Geometry.
useNamespace: Stdn Math LinearAlgebra.

#**
 * I am a mesh whose geometry data never changes in the GPU.
 *#
class GenericMeshBuilder superclass: Stdn SharedObject; definition: {
    compileTime constant VertexType := GpuStructures GenericVertex.
    compileTime constant SubmeshType := GenericSubmesh.
    ##compileTime constant IndexType := UInt32.
    compileTime constant IndexType := UInt16.

    protected field baseVertex type: IndexType.
    protected field engine type: EnginePtr.

    public field currentColor type: Float32x4.
    public field currentMaterial type: MaterialPtr.
    public field currentTransform type: ReversibleAffineTransform3dF32.

    protected field vertexLayout type: VertexLayoutPtr.
    protected field vertexBinding type: VertexBindingPtr.

    protected field vertices type: Stdn Collections Vector(VertexType).
    protected field indices type: Stdn Collections Vector(IndexType).
    protected field submeshes type: Stdn Collections Vector(SubmeshType).

    meta definition: {
        method for: (anEngine: EnginePtr) ::=> GenericMeshBuilder sharedPointer := {
            let result := GenericMeshBuilder sharedNew.
            result _ initializeWithEngine: anEngine.
            result
        }
    }.

    method initializeWithEngine: (anEngine: EnginePtr) ::=> Void := {
        engine := anEngine.
        currentTransform setIdentity.
        self reset
    }.

    method reset => Void := {
        currentColor := Float32x4 ones.
        currentMaterial := engine _ resourceCache _ defaultMaterial.
        baseVertex := 0.
    }.

    method beginTriangles => Void := {
    	self
    		beginSubMeshWith: PrimitiveTopology Triangles material: currentMaterial;
    		beginWithNewBaseVertex
    }.

    method beginSubMeshWith: (primitiveTopology: PrimitiveTopology) material: (newMaterial: MaterialPtr const ref) ::=> Void := {
        submeshes ifNotEmpty: {
            let lastSubmesh ref := submeshes last.
            lastSubmesh primitiveTopology = primitiveTopology && lastSubmesh material = newMaterial ifTrue: {return: void}.
            self finishLastSubmesh
        }.

        submeshes add: (SubmeshType()
            primitiveTopology: primitiveTopology;
            material: newMaterial;
            firstIndex: (indices size castTo: UInt32);
            yourself
        )
    }.

    method finishLastSubmesh => Void := {
        submeshes ifEmpty: {return: void}.

        let lastSubmesh ref := submeshes last.
        lastSubmesh indexCount: (indices size - lastSubmesh firstIndex castTo: UInt32).
    }.

    method beginWithNewBaseVertex ::=> Void := {
        baseVertex := vertices size castTo: IndexType
    }.

    method translateToX: (tx: Float32) y: (ty: Float32) z: (tz: Float32) ::=> Void := {
        currentTransform translation: Float32x3(tx, ty, tz)
    }.

    method addI1: (i1: UInt32) i2: (i2: UInt32) i3: (i3: UInt32) ::=> Void := {
        indices
            add: (i1 + baseVertex castTo: IndexType);
            add: (i2 + baseVertex castTo: IndexType);
		    add: (i3 + baseVertex castTo: IndexType)
    }.

    method addI1: (i1: UInt32) i2: (i2: UInt32) i3: (i3: UInt32) i4: (i4: UInt32) ::=> Void := {
        indices
            add: (i1 + baseVertex castTo: IndexType);
            add: (i2 + baseVertex castTo: IndexType);
		    add: (i3 + baseVertex castTo: IndexType);

            add: (i3 + baseVertex castTo: IndexType);
            add: (i4 + baseVertex castTo: IndexType);
		    add: (i1 + baseVertex castTo: IndexType)
    }.

    method addP: (position: Float32x3) N: (normal: Float32x3) TC: (texcoord: Float32x2) ::=> Void := {
        vertices add: (VertexType()
            position: (currentTransform transformPosition: position);
            normal: (currentTransform transformNormal: normal);
            texcoord: texcoord;
            color: currentColor;
            yourself)
    }.

    method addGridWithSize: (size: Float32x2) subdivisions: (subdivisions: UInt32) ::=> Void := {
        self beginTriangles.

        ## Add vertices
        let ds := size / (subdivisions - 1f).
        let startPosition := size * -0.5f.

        vertices reserve: subdivisions*subdivisions.
        indices reserve: (subdivisions - 1) * (subdivisions - 1) * 6.

        let y mutable := startPosition y.
        0 until: subdivisions do: {:j :: Void |
            let x mutable := startPosition x.
            let t := j / (subdivisions - 1f).
            0 until: subdivisions do: {:i :: Void |
                let s := i / (subdivisions - 1f).
                self addP: Float32x3(x, 0, y) N: Float32x3(0, 1, 0) TC: Float32x2(s, t).
                x := x + ds x.
            }.

            y := y + ds y.
        }.

        0 until: subdivisions - 1 do: {:j :: Void |
            let rs := j * subdivisions.
            let rd := (j + 1) * subdivisions.

            0 until: subdivisions - 1 do: {:i :: Void |
                self addI1: rd + i i2: rd + i + 1 i3: rs + i + 1 i4: rs + i
            }.
        }.
    }.

    method addCubeWithWidth: (width: Float32) height: (height: Float32) depth: (depth: Float32) ::=> Void := {
    	self beginTriangles.

    	let px := width * 0.5f.
    	let py := height * 0.5f.
    	let pz := depth * 0.5f.
    	let nx := width * -0.5f.
    	let ny := height * -0.5f.
    	let nz := depth * -0.5f.

    	## Back Face
    	self addP: (Float32x3 x: px y: py z: nz) N: (Float32x3 x: 0.0 y: 0.0 z: -1.0 ) TC: (Float32x2 x: 0.0 y: 1.0).
    	self addP: (Float32x3 x: px y: ny z: nz) N: (Float32x3 x: 0.0 y: 0.0 z: -1.0 ) TC: (Float32x2 x: 1.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: ny z: nz) N: (Float32x3 x: 0.0 y: 0.0 z: -1.0 ) TC: (Float32x2 x: 1.0 y: 0.0).
    	self addP: (Float32x3 x: nx y: py z: nz) N: (Float32x3 x: 0.0 y: 0.0 z: -1.0 ) TC: (Float32x2 x: 0.0 y: 0.0).
    	self addI1: 0 i2: 1 i3: 2 i4: 3.

    	## Front Face
    	self addP: (Float32x3 x: px y: py z: pz) N: (Float32x3 x: 0.0 y: 0.0 z: 1.0 ) TC: (Float32x2 x: 0.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: py z: pz) N: (Float32x3 x: 0.0 y: 0.0 z: 1.0 ) TC: (Float32x2 x: 1.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: ny z: pz) N: (Float32x3 x: 0.0 y: 0.0 z: 1.0 ) TC: (Float32x2 x: 1.0 y: 0.0).
    	self addP: (Float32x3 x: px y: ny z: pz) N: (Float32x3 x: 0.0 y: 0.0 z: 1.0 ) TC: (Float32x2 x: 0.0 y: 0.0).
        self addI1: 4 i2: 5 i3: 6 i4: 7.

    	## Top Face
    	self addP: (Float32x3 x: px y: py z: pz) N: (Float32x3 x: 0.0 y: 1.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 1.0).
    	self addP: (Float32x3 x: px y: py z: nz) N: (Float32x3 x: 0.0 y: 1.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: py z: nz) N: (Float32x3 x: 0.0 y: 1.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 0.0).
    	self addP: (Float32x3 x: nx y: py z: pz) N: (Float32x3 x: 0.0 y: 1.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 0.0).
        self addI1: 8 i2: 9 i3: 10 i4: 11.

    	## Bottom Face
    	self addP: (Float32x3 x: px y: ny z: pz) N: (Float32x3 x: 0.0 y: -1.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: ny z: pz) N: (Float32x3 x: 0.0 y: -1.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: ny z: nz) N: (Float32x3 x: 0.0 y: -1.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 0.0).
    	self addP: (Float32x3 x: px y: ny z: nz) N: (Float32x3 x: 0.0 y: -1.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 0.0).
        self addI1: 12 i2: 13 i3: 14 i4: 15.

    	## Left Face
    	self addP: (Float32x3 x: nx y: ny z: pz) N: (Float32x3 x: -1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: py z: pz) N: (Float32x3 x: -1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: py z: nz) N: (Float32x3 x: -1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 0.0).
    	self addP: (Float32x3 x: nx y: ny z: nz) N: (Float32x3 x: -1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 0.0).
        self addI1: 16 i2: 17 i3: 18 i4: 19.

    	## Right Face
    	self addP: (Float32x3 x: px y: py z: pz) N: (Float32x3 x: 1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 1.0).
    	self addP: (Float32x3 x: px y: ny z: pz) N: (Float32x3 x: 1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 1.0).
    	self addP: (Float32x3 x: px y: ny z: nz) N: (Float32x3 x: 1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 0.0).
    	self addP: (Float32x3 x: px y: py z: nz) N: (Float32x3 x: 1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 0.0).
        self addI1: 20 i2: 21 i3: 22 i4: 23.
    }.

    method addInteriorCubeWithWidth: (width: Float32) height: (height: Float32) depth: (depth: Float32) ::=> Void := {
    	self beginTriangles.

    	let px := width * 0.5f.
    	let py := height * 0.5f.
    	let pz := depth * 0.5f.
    	let nx := width * -0.5f.
    	let ny := height * -0.5f.
    	let nz := depth * -0.5f.

    	## Back Face
    	self addP: (Float32x3 x: px y: py z: nz) N: (Float32x3 x: 0.0 y: 0.0 z: 1.0 ) TC: (Float32x2 x: 0.0 y: 1.0).
    	self addP: (Float32x3 x: px y: ny z: nz) N: (Float32x3 x: 0.0 y: 0.0 z: 1.0 ) TC: (Float32x2 x: 1.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: ny z: nz) N: (Float32x3 x: 0.0 y: 0.0 z: 1.0 ) TC: (Float32x2 x: 1.0 y: 0.0).
    	self addP: (Float32x3 x: nx y: py z: nz) N: (Float32x3 x: 0.0 y: 0.0 z: 1.0 ) TC: (Float32x2 x: 0.0 y: 0.0).
    	self addI1: 3 i2: 2 i3: 1 i4: 0.

    	## Front Face
    	self addP: (Float32x3 x: px y: py z: pz) N: (Float32x3 x: 0.0 y: 0.0 z: -1.0 ) TC: (Float32x2 x: 0.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: py z: pz) N: (Float32x3 x: 0.0 y: 0.0 z: -1.0 ) TC: (Float32x2 x: 1.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: ny z: pz) N: (Float32x3 x: 0.0 y: 0.0 z: -1.0 ) TC: (Float32x2 x: 1.0 y: 0.0).
    	self addP: (Float32x3 x: px y: ny z: pz) N: (Float32x3 x: 0.0 y: 0.0 z: -1.0 ) TC: (Float32x2 x: 0.0 y: 0.0).
        self addI1: 7 i2: 6 i3: 5 i4: 4.

    	## Top Face
    	self addP: (Float32x3 x: px y: py z: pz) N: (Float32x3 x: 0.0 y: -1.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 1.0).
    	self addP: (Float32x3 x: px y: py z: nz) N: (Float32x3 x: 0.0 y: -1.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: py z: nz) N: (Float32x3 x: 0.0 y: -1.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 0.0).
    	self addP: (Float32x3 x: nx y: py z: pz) N: (Float32x3 x: 0.0 y: -1.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 0.0).
        self addI1: 11 i2: 10 i3: 9 i4: 8.

    	## Bottom Face
    	self addP: (Float32x3 x: px y: ny z: pz) N: (Float32x3 x: 0.0 y: 1.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: ny z: pz) N: (Float32x3 x: 0.0 y: 1.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: ny z: nz) N: (Float32x3 x: 0.0 y: 1.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 0.0).
    	self addP: (Float32x3 x: px y: ny z: nz) N: (Float32x3 x: 0.0 y: 1.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 0.0).
        self addI1: 15 i2: 14 i3: 13 i4: 12.

    	## Left Face
    	self addP: (Float32x3 x: nx y: ny z: pz) N: (Float32x3 x: 1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: py z: pz) N: (Float32x3 x: 1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 1.0).
    	self addP: (Float32x3 x: nx y: py z: nz) N: (Float32x3 x: 1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 0.0).
    	self addP: (Float32x3 x: nx y: ny z: nz) N: (Float32x3 x: 1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 0.0).
        self addI1: 19 i2: 18 i3: 17 i4: 16.

    	## Right Face
    	self addP: (Float32x3 x: px y: py z: pz) N: (Float32x3 x: -1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 1.0).
    	self addP: (Float32x3 x: px y: ny z: pz) N: (Float32x3 x: -1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 1.0).
    	self addP: (Float32x3 x: px y: ny z: nz) N: (Float32x3 x: -1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 1.0 y: 0.0).
    	self addP: (Float32x3 x: px y: py z: nz) N: (Float32x3 x: -1.0 y: 0.0 z: 0.0 ) TC: (Float32x2 x: 0.0 y: 0.0).
        self addI1: 23 i2: 22 i3: 21 i4: 20.
    }.

    method vertexLayout => VertexLayoutPtr := {
        vertexLayout ifNil: {
            vertexLayout := engine _ renderingDevice _ getDefaultVertexLayoutCache _ getOrCreateWithDescription: VertexType vertexLayoutDescription
        }.

        vertexLayout
    }.

    method renderable => RenderablePtr := {
        submeshes isEmpty || vertices isEmpty || indices isEmpty ifTrue: {
            return: (NullRenderable sharedNew upCastFor: Renderable)
        }.

        self finishLastSubmesh.

        let device := engine _ renderingDevice.
        let vertexBuffer := device _ createBuffer: (BufferDescription()
            size: vertices size * VertexType instanceSize;
            heapType: MemoryHeapType DeviceLocal;
            usageModes: BufferUsageMode Array;
            mainUsageMode: BufferUsageMode Array;
            stride: VertexType instanceSize;
            yourself
        ) initialData: vertices data.

        let indexBuffer := device _ createBuffer: (BufferDescription()
            size: indices size * IndexType instanceSize;
            heapType: MemoryHeapType DeviceLocal;
            usageModes: BufferUsageMode ElementArray;
            mainUsageMode: BufferUsageMode ElementArray;
            stride: IndexType instanceSize;
            yourself
        ) initialData: indices data.

        let vertexBinding := device _ createVertexBindingFor: self vertexLayout.
        let vertexBuffers mutable := BufferPtr array (vertexBuffer).
        vertexBinding _ bindVertexBuffers: vertexBuffers.

        let result := GenericMeshRenderable sharedNew.
        result _
            vertexBinding: vertexBinding;
            indexBuffer: indexBuffer;
            submeshes: submeshes.
        result upCastFor: Renderable
    }.

    method planeTextureScale: (texScale: Float32x2) offset: (texOffset: Float32x2) ::=> Void := {
        self planeTextureTransform: Float32x3x3(
            Float32x3(texScale x, 0, 0),
            Float32x3(0, texScale y, 0),
            Float32x3(texOffset, 1)
        ).
    }.

    method planeTextureTransform: (textureMatrix: Float32x3x3) ::=> Void := {
        vertices do: {:vertex :: Void |
            let normal := vertex normal.
            let position := vertex position.

            ## Compute the predominant normal plane.
    		let normalAxis := self computeNormalAxis: normal.
    		let tangent := self tangentForAxis: normalAxis.
    		let bitangent := self bitangentForAxis: normalAxis.

    		## Compute the new texcoord
    		let uv := Float32x2(tangent dot: position, bitangent dot: position).
    		vertex texcoord: (textureMatrix * Float32x3(uv, 1)) xy.
        }.
    }.

    method computeTangentsBitangents => Void := {
        self finishLastSubmesh.

        let tangents mutable type: Stdn Collections Vector(Float32x3).
        let bitangents mutable type: Stdn Collections Vector(Float32x3).
        tangents resizeTo: vertices size.
        bitangents resizeTo: vertices size.
        submeshes do: {:each :: Void |
            self computeTangentsBitangentsFor: each tangents: tangents bitangents: bitangents
        }.

        0 until: vertices size do: {:i :: Void |
            let vertex ref := vertices[i].

            let normal := vertex normal.
            let tangent mutable := tangents[i].
            let bitangent mutable := bitangents[i].

            ## Gram schmidth orthogonalization
            tangent := (tangent - (normal * (normal dot: tangent))) normalized.
            bitangent := (bitangent - (normal * (normal dot: bitangent)) - (tangent * (tangent dot: bitangent))) normalized.
            let scaleFactor := (normal cross: tangent) dot: bitangent.
            vertex tangent4: Float32x4(tangent, scaleFactor)
        }
    }.

    method computeTangentsBitangentsFor: (submesh: SubmeshType ref)
        tangents: (tangents: Stdn Collections Vector(Float32x3) ref)
        bitangents: (bitangents: Stdn Collections Vector(Float32x3) ref) ::=> Void := {
        submesh primitiveTopology = PrimitiveTopology Triangles ifFalse: {
            return: void
        }.

        let triangleCount := submesh indexCount / 3.
        let indexBase := submesh firstIndex.

        let i1 mutable := indexBase.
        let i2 mutable := indexBase + 1.
        let i3 mutable := indexBase + 2.
        0 until: triangleCount do: {:ti :: Void |
            let vi1 := indices[i1].
            let vi2 := indices[i2].
            let vi3 := indices[i3].

            let v1 ref := vertices[vi1].
            let v2 ref := vertices[vi2].
            let v3 ref := vertices[vi3].

            let p1 := v1 position.
            let p2 := v2 position.
            let p3 := v3 position.

            let tc1 := v1 texcoord.
            let tc2 := v2 texcoord.
            let tc3 := v3 texcoord.

            let u := p2 - p1.
            let v := p3 - p1.

            let du1 := tc2 x - tc1 x.
            let dv1 := tc2 y - tc1 y.

            let du2 := tc3 x - tc1 x.
            let dv2 := tc3 y - tc1 y.

            let det := (du1*dv2) - (du2*dv1).
            (det closeTo: 0.0) ifFalse: {
                let den := 1.0 / det.

                let tangent := (u * (den*dv2))  - (v * (den*dv1)).
                let bitangent := (v * (den*du1)) - (u * (den*du2)).

                tangents[vi1] := tangents[vi1] + tangent.
                tangents[vi2] := tangents[vi2] + tangent.
                tangents[vi3] := tangents[vi3] + tangent.

                bitangents[vi1] := bitangents[vi1] + bitangent.
                bitangents[vi2] := bitangents[vi2] + bitangent.
                bitangents[vi3] := bitangents[vi3] + bitangent.
            }.

            i1 := i1 + 3.
            i2 := i2 + 3.
            i3 := i3 + 3.
        }.
    }.

    method addCollisionBox => Void := {

    }.

    static global AxisVectors := Float32x3 array (
        Float32x3(1, 0, 0),
        Float32x3(-1, 0, 0),
        Float32x3(0, 1, 0),
        Float32x3(0, -1, 0),
        Float32x3(0, 0, 1),
        Float32x3(0, 0, -1),

        ## Duplicate to avoid the modulo.
        Float32x3(1, 0, 0),
        Float32x3(-1, 0, 0),
        Float32x3(0, 1, 0),
        Float32x3(0, -1, 0),
        Float32x3(0, 0, 1),
        Float32x3(0, 0, -1)
    ).

    const method computeNormalAxis: (normal: Float32x3) ::=> UInt32 := {
        let bestAmount mutable := Float32 negativeInfinity.
        let best mutable := 0u.
        0 until: 6 do: {:(UInt32)i :: Void |
            let amount := normal dot: AxisVectors[i].
            amount > bestAmount ifTrue: {
                bestAmount := amount.
                best := i.
            }
        }.
        best
    }.

    const method tangentForAxis: (axis: UInt32) ::=> Float32x3
        := AxisVectors[axis + 2].

    const method bitangentForAxis: (axis: UInt32) ::=> Float32x3
        := AxisVectors[axis + 4].
}.

compileTime constant GenericMeshBuilderPtr := GenericMeshBuilder sharedPointer.


Engine extend: {
    inline method newGenericMeshBuilder => GenericMeshBuilderPtr
        := GenericMeshBuilder for: self asSharedPointer.
}.

}. ## End of namespace Runtime
}. ## End of namespace Woden
