namespace Woden definition: {
namespace Assets definition: {

useNamespace: Woden Runtime.
useNamespace: Stdn Graphics Core.

#**
 * I represent a parsed in memory generic model asset. My data domain model is
 * inspired in the model that is used by the glTF2 model, but with extensions
 * and facilities that are specific to Woden.
 *#
class ModelAsset superclass: Stdn SharedObject; definition: {
    meta definition: {
        method readFromFileNamed: (fileName: Stdn String const ref) ::=> ModelAsset sharedPointer
            := self readFromFileReference: fileName asNativeFileReference.

        method readFromFileReference: (fileReference: Stdn FileReference const ref) ::=> ModelAsset sharedPointer := {
            let importerExporter := ModelImporterExporterRegistry uniqueInstance findForFileReference: fileReference.
            importerExporter ifNil: {return: ModelAssetPtr nil}.

            importerExporter _ readFromFileReference: fileReference.
        }.
    }.

    public field parentFolder type: Stdn FileReference.
    public field buffers type: Stdn Collections Vector(ModelAssetBinaryBufferPtr).

    method addBuffer: (buffer: ModelAssetBinaryBufferPtr const ref) ::=> Void := {
        buffer _
            modelAssetWeakPointer: self asWeakPointer;
            index: buffers size.
        buffers add: buffer
    }.

    method newBuffer => ModelAssetBinaryBufferPtr := {
        let buffer := ModelAssetBinaryBuffer sharedNew.
        self addBuffer: buffer.
        buffer
    }.

    public field bufferViews type: Stdn Collections Vector(ModelAssetBinaryBufferViewPtr).

    method addBufferView: (bufferView: ModelAssetBinaryBufferViewPtr const ref) ::=> Void := {
        bufferView _
            modelAssetWeakPointer: self asWeakPointer;
            index: bufferViews size.
        bufferViews add: bufferView
    }.

    method newBufferView => ModelAssetBinaryBufferViewPtr := {
        let bufferView := ModelAssetBinaryBufferView sharedNew.
        self addBufferView: bufferView.
        bufferView
    }.

    public field bufferAccessors type: Stdn Collections Vector(ModelAssetBinaryBufferAccessorPtr).

    method addBufferAccessor: (bufferAccesor: ModelAssetBinaryBufferAccessorPtr const ref) ::=> Void := {
        bufferAccesor _
            modelAssetWeakPointer: self asWeakPointer;
            index: bufferAccessors size.
        bufferAccessors add: bufferAccesor
    }.

    method newBufferAccessor => ModelAssetBinaryBufferAccessorPtr := {
        let bufferAccesor := ModelAssetBinaryBufferAccessor sharedNew.
        self addBufferAccessor: bufferAccesor.
        bufferAccesor
    }.

    public field images type: Stdn Collections Vector(ModelAssetImagePtr).

    method addImage: (image: ModelAssetImagePtr const ref) ::=> Void := {
        image _
            modelAssetWeakPointer: self asWeakPointer;
            index: images size.
        images add: image
    }.

    method newImage => ModelAssetImagePtr := {
        let image := ModelAssetImage sharedNew.
        self addImage: image.
        image
    }.

    public field samplers type: Stdn Collections Vector(ModelAssetSamplerPtr).

    method addSampler: (sampler: ModelAssetSamplerPtr const ref) ::=> Void := {
        sampler _
            modelAssetWeakPointer: self asWeakPointer;
            index: samplers size.
        samplers add: sampler
    }.

    method newSampler => ModelAssetSamplerPtr := {
        let sampler := ModelAssetSampler sharedNew.
        self addSampler: sampler.
        sampler
    }.

    public field textures type: Stdn Collections Vector(ModelAssetTexturePtr).

    method addTexture: (texture: ModelAssetTexturePtr const ref) ::=> Void := {
        texture _
            modelAssetWeakPointer: self asWeakPointer;
            index: textures size.
        textures add: texture
    }.

    method newTexture => ModelAssetTexturePtr := {
        let texture := ModelAssetTexture sharedNew.
        self addTexture: texture.
        texture
    }.

    public field materials type: Stdn Collections Vector(ModelAssetMaterialPtr).

    method addMaterial: (material: ModelAssetMaterialPtr const ref) ::=> Void := {
        material _
            modelAssetWeakPointer: self asWeakPointer;
            index: materials size.
        materials add: material
    }.

    method newMetallicRoughnessMaterial => ModelAssetMetallicRoughnessMaterialPtr := {
        let material := ModelAssetMetallicRoughnessMaterial sharedNew.
        self addMaterial: (material upCastFor: ModelAssetMaterial).
        material
    }.

    public field meshPrimitiveAttributes type: Stdn Collections Vector(ModelAssetMeshPrimitiveAttributesPtr).

    method addMeshPrimitiveAttributes: (primitiveAttributes: ModelAssetMeshPrimitiveAttributesPtr const ref) ::=> Void := {
        primitiveAttributes _
            modelAssetWeakPointer: self asWeakPointer;
            index: meshPrimitiveAttributes size.
        meshPrimitiveAttributes add: primitiveAttributes
    }.

    method newMeshPrimitiveAttributes => ModelAssetMeshPrimitiveAttributesPtr := {
        let primitiveAttributes := ModelAssetMeshPrimitiveAttributes sharedNew.
        self addMeshPrimitiveAttributes: primitiveAttributes.
        primitiveAttributes
    }.

    public field meshes type: Stdn Collections Vector(ModelAssetMeshPtr).

    method addMesh: (mesh: ModelAssetMeshPtr const ref) ::=> Void := {
        mesh _
            modelAssetWeakPointer: self asWeakPointer;
            index: meshes size.
        meshes add: mesh
    }.

    method newMesh => ModelAssetMeshPtr := {
        let mesh := ModelAssetMesh sharedNew.
        self addMesh: mesh.
        mesh
    }.

    public field skeletons type: Stdn Collections Vector(ModelAssetSkeletonPtr).

    method addSkeleton: (skeleton: ModelAssetSkeletonPtr const ref) ::=> Void := {
        skeleton _
            modelAssetWeakPointer: self asWeakPointer;
            index: skeletons size.
        skeletons add: skeleton
    }.

    method newSkeleton => ModelAssetSkeletonPtr := {
        let skeleton := ModelAssetSkeleton sharedNew.
        self addSkeleton: skeleton.
        skeleton
    }.

    public field nodes type: Stdn Collections Vector(ModelAssetNodePtr).

    method addNode: (node: ModelAssetNodePtr const ref) ::=> Void := {
        node _
            modelAssetWeakPointer: self asWeakPointer;
            index: nodes size.
        nodes add: node
    }.

    method newNode => ModelAssetNodePtr := {
        let node := ModelAssetNode sharedNew.
        self addNode: node.
        node
    }.

    method getNodeNamed: (name: Stdn String const ref) ::=> ModelAssetNodePtr := {
        nodes do: {:each :: Void |
            each _ name = name ifTrue: {
                return: each
            }
        }.

        ModelAssetNodePtr nil
    }.

    method createSceneNodeNamed: (name: Stdn String const ref) for: (engine: EnginePtr const ref) ::=> SceneNodePtr := {
        let node := self getNodeNamed: name.
        node ifNil: {return: SceneNodePtr nil}.

        node _ asSceneNodeFor: engine
    }.

    public field scenes type: Stdn Collections Vector(ModelAssetScenePtr).

    method addScene: (scene: ModelAssetScenePtr const ref) ::=> Void := {
        scene _
            modelAssetWeakPointer: self asWeakPointer;
            index: scenes size.
        scenes add: scene
    }.

    method newScene => ModelAssetScenePtr := {
        let scene := ModelAssetScene sharedNew.
        self addScene: scene.
        scene
    }.

    public field animations type: Stdn Collections Vector(ModelAssetAnimationPtr).

    method addAnimation: (animation: ModelAssetAnimationPtr const ref) ::=> Void := {
        animation _
            modelAssetWeakPointer: self asWeakPointer;
            index: animations size.
        animations add: animation
    }.

    method newAnimation => ModelAssetAnimationPtr := {
        let animation := ModelAssetAnimation sharedNew.
        self addAnimation: animation.
        animation
    }.

    field vertexBindingCache type: Stdn Collections Dictionary(ModelAssetPrimitiveAttributesBindingDescription, VertexBindingPtr).

    method createVertexBindingFor: (engine: EnginePtr const ref) withDescription: (bindingDescription: ModelAssetPrimitiveAttributesBindingDescription const ref) ::=> VertexBindingPtr := {
        vertexBindingCache at: bindingDescription ifAbsentPut: { :: VertexBindingPtr |
            let vertexBinding := engine _ renderingDevice _ createVertexBindingFor: bindingDescription vertexLayout.
            vertexBinding _ bindVertexBuffers: bindingDescription buffers asArraySlice offset: bindingDescription offsets asArraySlice.
            vertexBinding.
        }.
    }.

    compileTime constant VertexDataWithPendingAttributes := Stdn Collections Dictionary(ModelAssetMeshPrimitiveAttributesPtr, Stdn Collections Vector(ModelAssetMeshPrimitivePtr)).

    method generateNormals: (attributes: ModelAssetMeshPrimitiveAttributesPtr const ref) primitives: (primitives: Stdn Collections Vector(ModelAssetMeshPrimitivePtr) ref)
        into: (encodedNormals: Stdn Collections Vector(GpuStructures CompactFloat32x3) ref) withBufferView: (normalsBufferView: ModelAssetBinaryBufferViewPtr const ref) ::=> Void := {

        let positionsAccessors := attributes _ getAccessorWithLocation: VertexAttributeLocation Position.
        Stdn assert: (attributes _ getAccessorWithLocation: VertexAttributeLocation Normal) isNil.
        positionsAccessors isNil || positionsAccessors _ count = 0 ifTrue: {
            return: void
        }.

        ## Create linear buffers that are more convenient to process.
        let vertexCount := positionsAccessors _ count.
        let positions mutable := positionsAccessors _ decodeAsVectorOfFloat32x3.

        positions ifEmpty: {
            return: void
        }.

        let normals mutable := Stdn Collections Vector(Float32x3)().
        normals resizeTo: vertexCount.

        ## Process all of the triangles.
        primitives do: {:each :: Void |
            each _ trianglesDo: {:i1 :i2 :i3 :: Void |
                let p1 := positions[i1].
                let p2 := positions[i2].
                let p3 := positions[i3].

                let u := p2 - p1.
                let v := p3 - p1.
                let n := (u cross: v).

                normals[i1] := normals[i1] + n.
                normals[i2] := normals[i2] + n.
                normals[i3] := normals[i3] + n.
            }
        }.

        let firstNormalIndex := encodedNormals size.
        encodedNormals reserve: vertexCount.
        0 until: vertexCount do: {:i :: Void |
            let normal := normals[i] normalized.
            let compactNormal mutable := GpuStructures CompactFloat32x3().
            compactNormal set: normal.

            encodedNormals add: compactNormal
        }.

        let normalsAccessors := self newBufferAccessor.
        normalsAccessors _
            bufferView: normalsBufferView;
            offset: firstNormalIndex * 12;
            count: vertexCount;
            format: PixelFormat R32G32B32_Float.
        attributes _ attributes add: (ModelAssetMeshPrimitiveAttribute()
            accessor: normalsAccessors;
            location: VertexAttributeLocation Normal;
            yourself
        ).
    }.

    method generateMissingNormals: (vertexDataWithSubmeshes: VertexDataWithPendingAttributes ref) ::=> Void := {
        let normals mutable := Stdn Collections Vector(GpuStructures CompactFloat32x3)().
        let normalsBufferView mutable := self newBufferView.

        vertexDataWithSubmeshes keysAndValuesDo: {:(ModelAssetMeshPrimitiveAttributesPtr const ref)attributes :(Stdn Collections Vector(ModelAssetMeshPrimitivePtr) ref)primitives :: Void |
            self generateNormals: attributes primitives: primitives into: normals withBufferView: normalsBufferView
        }.

        normals ifEmpty: {return: void}.

        let normalBuffer mutable := self newBuffer.
        normalBuffer _ dataSize: normals size * GpuStructures CompactFloat32x3 instanceSize.
        normalBuffer _ data reset: (Stdn malloc(normalBuffer _ dataSize) reinterpretCastTo: UInt8 pointer).
        Stdn memcpy(normalBuffer _ data getPointer, normals data, normalBuffer _ dataSize).
        normalsBufferView _ buffer: normalBuffer.
    }.

    method generateNormals => Void := {
        let vertexDataToGenerateNormals mutable := VertexDataWithPendingAttributes().
        meshes do: {:each :: Void |
            each _ primitives do: {:eachPrimitive :: Void |
                eachPrimitive _ attributes _ hasNormal not ifTrue: {
                    let primitiveList ref := vertexDataToGenerateNormals at: eachPrimitive _ attributes ifAbsentPut: { :: (Stdn Collections Vector(ModelAssetMeshPrimitivePtr)) | Stdn Collections Vector(ModelAssetMeshPrimitivePtr) () }.
                    primitiveList add: eachPrimitive
                }.
            }.
        }.

        vertexDataToGenerateNormals ifEmpty: {return: void}.
        self generateMissingNormals: vertexDataToGenerateNormals
    }.

    method generateVertexDataTangentSpaceFrame: (attributes: ModelAssetMeshPrimitiveAttributesPtr const ref) primitives: (primitives: Stdn Collections Vector(ModelAssetMeshPrimitivePtr) ref)
        into: (encodedTangent4: Stdn Collections Vector(Float32x4) ref) withBufferView: (tangent4BufferView: ModelAssetBinaryBufferViewPtr const ref) ::=> Void := {

        let positionsAccessors := attributes _ getAccessorWithLocation: VertexAttributeLocation Position.
        let normalsAccessors := attributes _ getAccessorWithLocation: VertexAttributeLocation Normal.
        let texcoordAccessors := attributes _ getAccessorWithLocation: VertexAttributeLocation Texcoord0.
        Stdn assert: (attributes _ getAccessorWithLocation: VertexAttributeLocation Tangent4) isNil.
        positionsAccessors isNil || normalsAccessors isNil || texcoordAccessors isNil ||
        positionsAccessors _ count = 0 ||
        positionsAccessors _ count ~= normalsAccessors _ count || normalsAccessors _ count ~= texcoordAccessors _ count
          ifTrue: {
            return: void
        }.

        ## Create linear buffers that are more convenient to process.
        let vertexCount := positionsAccessors _ count.
        let positions mutable := positionsAccessors _ decodeAsVectorOfFloat32x3.
        let texcoords mutable := texcoordAccessors _ decodeAsVectorOfFloat32x2.
        let normals mutable := normalsAccessors _ decodeAsVectorOfFloat32x3.

        positions isEmpty || texcoords isEmpty || normals isEmpty ifTrue: {
            return: void
        }.

        let tangents mutable := Stdn Collections Vector(Float32x3)().
        let bitangents mutable := Stdn Collections Vector(Float32x3)().
        tangents resizeTo: vertexCount.
        bitangents resizeTo: vertexCount.

        ## Process all of the triangles.
        ## FIXME: Use Mikktspace here.
        primitives do: {:each :: Void |
            each _ trianglesDo: {:i1 :i2 :i3 :: Void |
                let p1 := positions[i1].
                let p2 := positions[i2].
                let p3 := positions[i3].

                let tc1 := texcoords[i1].
                let tc2 := texcoords[i2].
                let tc3 := texcoords[i3].

                let u := p2 - p1.
                let v := p3 - p1.

                let du1 := tc2 x - tc1 x.
                let dv1 := tc2 y - tc1 y.

                let du2 := tc3 x - tc1 x.
                let dv2 := tc3 y - tc1 y.

                let det := (du1*dv2) - (du2*dv1).
                (det closeTo: 0.0) ifFalse: {
                    let den := 1.0 / det.

                    let tangent := (u * (den*dv2))  - (v * (den*dv1)).
                    let bitangent := (v * (den*du1)) - (u * (den*du2)).

                    tangents[i1] := tangents[i1] + tangent.
                    tangents[i2] := tangents[i2] + tangent.
                    tangents[i3] := tangents[i3] + tangent.

                    bitangents[i1] := bitangents[i1] + bitangent.
                    bitangents[i2] := bitangents[i2] + bitangent.
                    bitangents[i3] := bitangents[i3] + bitangent.
                }.
            }
        }.

        let firstTangentIndex := encodedTangent4 size.
        encodedTangent4 reserve: vertexCount.
        0 until: vertexCount do: {:i :: Void |
            let normal := normals[i].
            let tangent mutable := tangents[i].
            let bitangent mutable := bitangents[i].

            (tangent closeTo: Float32x3 zeros) && (bitangent closeTo: Float32x3 zeros) ifTrue: {
                tangent := Float32x3(1, 0, 0).
                bitangent := Float32x3(0, 1, 0).
            }.

            ## Gram schmidth orthogonalization
            tangent := (tangent - (normal * (normal dot: tangent))) normalized.
            bitangent := (bitangent - (normal * (normal dot: bitangent)) - (tangent * (tangent dot: bitangent))) normalized.
            let scaleFactor := (normal cross: tangent) dot: bitangent.
            encodedTangent4 add: Float32x4(tangent, scaleFactor)
        }.

        let tangents4Accessors := self newBufferAccessor.
        tangents4Accessors _
            bufferView: tangent4BufferView;
            offset: firstTangentIndex * 16;
            count: vertexCount;
            format: PixelFormat R32G32B32A32_Float.
        attributes _ attributes add: (ModelAssetMeshPrimitiveAttribute()
            accessor: tangents4Accessors;
            location: VertexAttributeLocation Tangent4;
            yourself
        ).
    }.

    method generateMissingVertexTangentSpaceFrames: (vertexDataWithSubmeshes: VertexDataWithPendingAttributes ref) ::=> Void := {
        let tangent4 mutable := Stdn Collections Vector(Float32x4)().
        let tangent4BufferView mutable := self newBufferView.

        vertexDataWithSubmeshes keysAndValuesDo: {:(ModelAssetMeshPrimitiveAttributesPtr const ref)attributes :(Stdn Collections Vector(ModelAssetMeshPrimitivePtr) ref)primitives :: Void |
            self generateVertexDataTangentSpaceFrame: attributes primitives: primitives into: tangent4 withBufferView: tangent4BufferView
        }.

        tangent4 ifEmpty: {return: void}.

        let tangent4Buffer mutable := self newBuffer.
        tangent4Buffer _ dataSize: tangent4 size * Float32x4 instanceSize.
        tangent4Buffer _ data reset: (Stdn malloc(tangent4Buffer _ dataSize) reinterpretCastTo: UInt8 pointer).
        Stdn memcpy(tangent4Buffer _ data getPointer, tangent4 data, tangent4Buffer _ dataSize).
        tangent4BufferView _ buffer: tangent4Buffer.
    }.

    method generateTangentSpaceFrames => Void := {
        let vertexDataToGenerateTangentSpace mutable := VertexDataWithPendingAttributes().
        meshes do: {:each :: Void |
            each _ primitives do: {:eachPrimitive :: Void |
                eachPrimitive _ material isNotNil && eachPrimitive _ material _ normalTexture isNotNil && eachPrimitive _ attributes _ hasTangent4 not ifTrue: {
                    let primitiveList ref := vertexDataToGenerateTangentSpace at: eachPrimitive _ attributes ifAbsentPut: { :: (Stdn Collections Vector(ModelAssetMeshPrimitivePtr)) | Stdn Collections Vector(ModelAssetMeshPrimitivePtr) () }.
                    primitiveList add: eachPrimitive
                }.
            }.
        }.

        vertexDataToGenerateTangentSpace ifEmpty: {return: void}.
        self generateMissingVertexTangentSpaceFrames: vertexDataToGenerateTangentSpace
    }.

    method cleanupMeshes => Void := {
        self
            generateNormals;
            generateTangentSpaceFrames.
    }.

    method cleanupSkeletons => Void := {
        skeletons do: {:each :: Void |
            each _ cleanupSkeleton.
        }
    }.
}.

compileTime constant ModelAssetPtr := ModelAsset sharedPointer.

} ## End of namespace Assets
} ## End of namespace Woden
