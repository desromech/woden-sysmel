namespace Woden definition: {
namespace Assets definition: {

useNamespace: Woden Runtime.
useNamespace: Std Graphics Core.

#**
 * I represent a parsed in memory generic model asset. My data domain model is
 * inspired in the model that is used by the glTF2 model, but with extensions
 * and facilities that are specific to Woden.
 *#
class ModelAsset superclass: Std RCObject; definition: {
    meta definition: {
        method readFromFileNamed: (fileName: Std String const ref) ::=> ModelAsset rcRef
            := self readFromFileReference: fileName asNativeFileReference.

        method readFromFileReference: (fileReference: Std FileReference const ref) ::=> ModelAsset rcRef := {
            let importerExporter := ModelImporterExporterRegistry uniqueInstance findForFileReference: fileReference.
            importerExporter ifNil: {return: ModelAssetRef nil}.

            importerExporter readFromFileReference: fileReference.
        }.
    }.

    public field parentFolder type: Std FileReference.
    public field buffers type: Std Collections Vector(ModelAssetBinaryBufferRef).

    method addBuffer: (buffer: ModelAssetBinaryBufferRef const ref) ::=> Void := {
        buffer
            modelAssetWeakPointer: self asWeakRCRef;
            index: buffers size.
        buffers add: buffer
    }.

    method newBuffer => ModelAssetBinaryBufferRef := {
        let buffer := ModelAssetBinaryBuffer new.
        self addBuffer: buffer.
        buffer
    }.

    public field bufferViews type: Std Collections Vector(ModelAssetBinaryBufferViewRef).

    method addBufferView: (bufferView: ModelAssetBinaryBufferViewRef const ref) ::=> Void := {
        bufferView
            modelAssetWeakPointer: self asWeakRCRef;
            index: bufferViews size.
        bufferViews add: bufferView
    }.

    method newBufferView => ModelAssetBinaryBufferViewRef := {
        let bufferView := ModelAssetBinaryBufferView new.
        self addBufferView: bufferView.
        bufferView
    }.

    public field bufferAccessors type: Std Collections Vector(ModelAssetBinaryBufferAccessorRef).

    method addBufferAccessor: (bufferAccesor: ModelAssetBinaryBufferAccessorRef const ref) ::=> Void := {
        bufferAccesor
            modelAssetWeakPointer: self asWeakRCRef;
            index: bufferAccessors size.
        bufferAccessors add: bufferAccesor
    }.

    method newBufferAccessor => ModelAssetBinaryBufferAccessorRef := {
        let bufferAccesor := ModelAssetBinaryBufferAccessor new.
        self addBufferAccessor: bufferAccesor.
        bufferAccesor
    }.

    public field images type: Std Collections Vector(ModelAssetImageRef).

    method addImage: (image: ModelAssetImageRef const ref) ::=> Void := {
        image
            modelAssetWeakPointer: self asWeakRCRef;
            index: images size.
        images add: image
    }.

    method newImage => ModelAssetImageRef := {
        let image := ModelAssetImage new.
        self addImage: image.
        image
    }.

    public field samplers type: Std Collections Vector(ModelAssetSamplerRef).

    method addSampler: (sampler: ModelAssetSamplerRef const ref) ::=> Void := {
        sampler
            modelAssetWeakPointer: self asWeakRCRef;
            index: samplers size.
        samplers add: sampler
    }.

    method newSampler => ModelAssetSamplerRef := {
        let sampler := ModelAssetSampler new.
        self addSampler: sampler.
        sampler
    }.

    public field textures type: Std Collections Vector(ModelAssetTextureRef).

    method addTexture: (texture: ModelAssetTextureRef const ref) ::=> Void := {
        texture
            modelAssetWeakPointer: self asWeakRCRef;
            index: textures size.
        textures add: texture
    }.

    method newTexture => ModelAssetTextureRef := {
        let texture := ModelAssetTexture new.
        self addTexture: texture.
        texture
    }.

    public field materials type: Std Collections Vector(ModelAssetMaterialRef).

    method addMaterial: (material: ModelAssetMaterialRef const ref) ::=> Void := {
        material
            modelAssetWeakPointer: self asWeakRCRef;
            index: materials size.
        materials add: material
    }.

    method newMetallicRoughnessMaterial => ModelAssetMetallicRoughnessMaterialRef := {
        let material := ModelAssetMetallicRoughnessMaterial new.
        self addMaterial: (material upCastFor: ModelAssetMaterial).
        material
    }.

    public field meshPrimitiveAttributes type: Std Collections Vector(ModelAssetMeshPrimitiveAttributesRef).

    method addMeshPrimitiveAttributes: (primitiveAttributes: ModelAssetMeshPrimitiveAttributesRef const ref) ::=> Void := {
        primitiveAttributes
            modelAssetWeakPointer: self asWeakRCRef;
            index: meshPrimitiveAttributes size.
        meshPrimitiveAttributes add: primitiveAttributes
    }.

    method newMeshPrimitiveAttributes => ModelAssetMeshPrimitiveAttributesRef := {
        let primitiveAttributes := ModelAssetMeshPrimitiveAttributes new.
        self addMeshPrimitiveAttributes: primitiveAttributes.
        primitiveAttributes
    }.

    public field meshes type: Std Collections Vector(ModelAssetMeshRef).

    method addMesh: (mesh: ModelAssetMeshRef const ref) ::=> Void := {
        mesh
            modelAssetWeakPointer: self asWeakRCRef;
            index: meshes size.
        meshes add: mesh
    }.

    method newMesh => ModelAssetMeshRef := {
        let mesh := ModelAssetMesh new.
        self addMesh: mesh.
        mesh
    }.

    public field skeletons type: Std Collections Vector(ModelAssetSkeletonRef).

    method addSkeleton: (skeleton: ModelAssetSkeletonRef const ref) ::=> Void := {
        skeleton
            modelAssetWeakPointer: self asWeakRCRef;
            index: skeletons size.
        skeletons add: skeleton
    }.

    method newSkeleton => ModelAssetSkeletonRef := {
        let skeleton := ModelAssetSkeleton new.
        self addSkeleton: skeleton.
        skeleton
    }.

    public field nodes type: Std Collections Vector(ModelAssetNodeRef).

    method addNode: (node: ModelAssetNodeRef const ref) ::=> Void := {
        node
            modelAssetWeakPointer: self asWeakRCRef;
            index: nodes size.
        nodes add: node
    }.

    method newNode => ModelAssetNodeRef := {
        let node := ModelAssetNode new.
        self addNode: node.
        node
    }.

    method getNodeNamed: (name: Std String const ref) ::=> ModelAssetNodeRef := {
        nodes do: {:each :: Void |
            each name = name ifTrue: {
                return: each
            }
        }.

        ModelAssetNodeRef nil
    }.

    method createSceneNodeNamed: (name: Std String const ref) for: (engine: EngineRef const ref) ::=> SceneNodeRef := {
        let node := self getNodeNamed: name.
        node ifNil: {return: SceneNodeRef nil}.

        node asSceneNodeFor: engine
    }.

    public field scenes type: Std Collections Vector(ModelAssetSceneRef).

    method addScene: (scene: ModelAssetSceneRef const ref) ::=> Void := {
        scene
            modelAssetWeakPointer: self asWeakRCRef;
            index: scenes size.
        scenes add: scene
    }.

    method newScene => ModelAssetSceneRef := {
        let scene := ModelAssetScene new.
        self addScene: scene.
        scene
    }.

    public field animations type: Std Collections Vector(ModelAssetAnimationRef).

    method addAnimation: (animation: ModelAssetAnimationRef const ref) ::=> Void := {
        animation
            modelAssetWeakPointer: self asWeakRCRef;
            index: animations size.
        animations add: animation
    }.

    method newAnimation => ModelAssetAnimationRef := {
        let animation := ModelAssetAnimation new.
        self addAnimation: animation.
        animation
    }.

    field vertexBindingCache type: Std Collections Dictionary(ModelAssetPrimitiveAttributesBindingDescription, VertexBindingRef).

    method createVertexBindingFor: (engine: EngineRef const ref) withDescription: (bindingDescription: ModelAssetPrimitiveAttributesBindingDescription const ref) ::=> VertexBindingRef := {
        vertexBindingCache at: bindingDescription ifAbsentPut: { :: VertexBindingRef |
            let vertexBinding := engine renderingDevice createVertexBindingFor: bindingDescription vertexLayout.
            vertexBinding bindVertexBuffers: bindingDescription buffers asArraySlice offset: bindingDescription offsets asArraySlice.
            vertexBinding.
        }.
    }.

    compileTime constant VertexDataWithPendingAttributes := Std Collections Dictionary(ModelAssetMeshPrimitiveAttributesRef, Std Collections Vector(ModelAssetMeshPrimitiveRef)).

    method generateNormals: (attributes: ModelAssetMeshPrimitiveAttributesRef const ref) primitives: (primitives: Std Collections Vector(ModelAssetMeshPrimitiveRef) ref)
        into: (encodedNormals: Std Collections Vector(GpuStructures CompactFloat32x3) ref) withBufferView: (normalsBufferView: ModelAssetBinaryBufferViewRef const ref) ::=> Void := {

        let positionsAccessors := attributes getAccessorWithLocation: VertexAttributeLocation Position.
        Std assert: (attributes getAccessorWithLocation: VertexAttributeLocation Normal) isNil.
        positionsAccessors isNil || positionsAccessors count = 0 ifTrue: {
            return: void
        }.

        ## Create linear buffers that are more convenient to process.
        let vertexCount := positionsAccessors count.
        let positions mutable := positionsAccessors decodeAsVectorOfFloat32x3.

        positions ifEmpty: {
            return: void
        }.

        let normals mutable := Std Collections Vector(Float32x3)().
        normals resizeTo: vertexCount.

        ## Process all of the triangles.
        primitives do: {:each :: Void |
            each trianglesDo: {:(UInt32)i1 :(UInt32)i2 :(UInt32)i3 :: Void |
                let p1 := positions[i1].
                let p2 := positions[i2].
                let p3 := positions[i3].

                let u := p2 - p1.
                let v := p3 - p1.
                let n := (u cross: v).

                normals[i1] := normals[i1] + n.
                normals[i2] := normals[i2] + n.
                normals[i3] := normals[i3] + n.
            }
        }.

        let firstNormalIndex := encodedNormals size.
        encodedNormals reserve: vertexCount.
        0 until: vertexCount do: {:i :: Void |
            let normal := normals[i] normalized.
            let compactNormal mutable := GpuStructures CompactFloat32x3().
            compactNormal set: normal.

            encodedNormals add: compactNormal
        }.

        let normalsAccessors := self newBufferAccessor.
        normalsAccessors
            bufferView: normalsBufferView;
            offset: firstNormalIndex * 12;
            count: vertexCount;
            format: PixelFormat R32G32B32_Float.
        attributes attributes add: (ModelAssetMeshPrimitiveAttribute()
            accessor: normalsAccessors;
            location: VertexAttributeLocation Normal;
            yourself
        ).
    }.

    method generateMissingNormals: (vertexDataWithSubmeshes: VertexDataWithPendingAttributes ref) ::=> Void := {
        let normals mutable := Std Collections Vector(GpuStructures CompactFloat32x3)().
        let normalsBufferView mutable := self newBufferView.

        vertexDataWithSubmeshes keysAndValuesDo: {:(ModelAssetMeshPrimitiveAttributesRef const ref)attributes :(Std Collections Vector(ModelAssetMeshPrimitiveRef) ref)primitives :: Void |
            self generateNormals: attributes primitives: primitives into: normals withBufferView: normalsBufferView
        }.

        normals ifEmpty: {return: void}.

        let normalBuffer mutable := self newBuffer.
        normalBuffer dataSize: normals size * GpuStructures CompactFloat32x3 instanceSize.
        normalBuffer data reset: (Std malloc(normalBuffer dataSize) reinterpretCastTo: UInt8 pointer).
        Std memcpy(normalBuffer data getPointer, normals data, normalBuffer dataSize).
        normalsBufferView buffer: normalBuffer.
    }.

    method generateNormals => Void := {
        let vertexDataToGenerateNormals mutable := VertexDataWithPendingAttributes().
        meshes do: {:each :: Void |
            each primitives do: {:eachPrimitive :: Void |
                eachPrimitive attributes hasNormal not ifTrue: {
                    let primitiveList ref := vertexDataToGenerateNormals at: eachPrimitive attributes
                        ifAbsentPut: { :: (Std Collections Vector(ModelAssetMeshPrimitiveRef)) | Std Collections Vector(ModelAssetMeshPrimitiveRef) () }.
                    primitiveList add: eachPrimitive
                }.
            }.
        }.

        vertexDataToGenerateNormals ifEmpty: {return: void}.
        self generateMissingNormals: vertexDataToGenerateNormals
    }.

    method generateVertexDataTangentSpaceFrame: (attributes: ModelAssetMeshPrimitiveAttributesRef const ref) primitives: (primitives: Std Collections Vector(ModelAssetMeshPrimitiveRef) ref)
        into: (encodedTangent4: Std Collections Vector(Float32x4) ref) withBufferView: (tangent4BufferView: ModelAssetBinaryBufferViewRef const ref) ::=> Void := {

        let positionsAccessors := attributes getAccessorWithLocation: VertexAttributeLocation Position.
        let normalsAccessors := attributes getAccessorWithLocation: VertexAttributeLocation Normal.
        let texcoordAccessors := attributes getAccessorWithLocation: VertexAttributeLocation Texcoord0.
        Std assert: (attributes getAccessorWithLocation: VertexAttributeLocation Tangent4) isNil.
        positionsAccessors isNil || normalsAccessors isNil || texcoordAccessors isNil ||
        positionsAccessors count = 0 ||
        positionsAccessors count ~= normalsAccessors count || normalsAccessors count ~= texcoordAccessors count
          ifTrue: {
            return: void
        }.

        ## Create linear buffers that are more convenient to process.
        let vertexCount := positionsAccessors count.
        let positions mutable := positionsAccessors decodeAsVectorOfFloat32x3.
        let texcoords mutable := texcoordAccessors decodeAsVectorOfFloat32x2.
        let normals mutable := normalsAccessors decodeAsVectorOfFloat32x3.

        positions isEmpty || texcoords isEmpty || normals isEmpty ifTrue: {
            return: void
        }.

        let tangents mutable := Std Collections Vector(Float32x3)().
        let bitangents mutable := Std Collections Vector(Float32x3)().
        tangents resizeTo: vertexCount.
        bitangents resizeTo: vertexCount.

        ## Process all of the triangles.
        ## FIXME: Use Mikktspace here.
        primitives do: {:each :: Void |
            each trianglesDo: {:(UInt32)i1 :(UInt32)i2 :(UInt32)i3 :: Void |
                let p1 := positions[i1].
                let p2 := positions[i2].
                let p3 := positions[i3].

                let tc1 := texcoords[i1].
                let tc2 := texcoords[i2].
                let tc3 := texcoords[i3].

                let u := p2 - p1.
                let v := p3 - p1.

                let du1 := tc2 x - tc1 x.
                let dv1 := tc2 y - tc1 y.

                let du2 := tc3 x - tc1 x.
                let dv2 := tc3 y - tc1 y.

                let det := (du1*dv2) - (du2*dv1).
                (det closeTo: 0.0) ifFalse: {
                    let den := 1.0 / det.

                    let tangent := (u * (den*dv2))  - (v * (den*dv1)).
                    let bitangent := (v * (den*du1)) - (u * (den*du2)).

                    tangents[i1] := tangents[i1] + tangent.
                    tangents[i2] := tangents[i2] + tangent.
                    tangents[i3] := tangents[i3] + tangent.

                    bitangents[i1] := bitangents[i1] + bitangent.
                    bitangents[i2] := bitangents[i2] + bitangent.
                    bitangents[i3] := bitangents[i3] + bitangent.
                }.
            }
        }.

        let firstTangentIndex := encodedTangent4 size.
        encodedTangent4 reserve: vertexCount.
        0 until: vertexCount do: {:i :: Void |
            let normal := normals[i].
            let tangent mutable := tangents[i].
            let bitangent mutable := bitangents[i].

            (tangent closeTo: Float32x3 zeros) && (bitangent closeTo: Float32x3 zeros) ifTrue: {
                tangent := Float32x3(1, 0, 0).
                bitangent := Float32x3(0, 1, 0).
            }.

            ## Gram schmidth orthogonalization
            tangent := (tangent - (normal * (normal dot: tangent))) normalized.
            bitangent := (bitangent - (normal * (normal dot: bitangent)) - (tangent * (tangent dot: bitangent))) normalized.
            let scaleFactor := (normal cross: tangent) dot: bitangent.
            encodedTangent4 add: Float32x4(tangent, scaleFactor)
        }.

        let tangents4Accessors := self newBufferAccessor.
        tangents4Accessors
            bufferView: tangent4BufferView;
            offset: firstTangentIndex * 16;
            count: vertexCount;
            format: PixelFormat R32G32B32A32_Float.
        attributes attributes add: (ModelAssetMeshPrimitiveAttribute()
            accessor: tangents4Accessors;
            location: VertexAttributeLocation Tangent4;
            yourself
        ).
    }.

    method generateMissingVertexTangentSpaceFrames: (vertexDataWithSubmeshes: VertexDataWithPendingAttributes ref) ::=> Void := {
        let tangent4 mutable := Std Collections Vector(Float32x4)().
        let tangent4BufferView mutable := self newBufferView.

        vertexDataWithSubmeshes keysAndValuesDo: {:(ModelAssetMeshPrimitiveAttributesRef const ref)attributes :(Std Collections Vector(ModelAssetMeshPrimitiveRef) ref)primitives :: Void |
            self generateVertexDataTangentSpaceFrame: attributes primitives: primitives into: tangent4 withBufferView: tangent4BufferView
        }.

        tangent4 ifEmpty: {return: void}.

        let tangent4Buffer mutable := self newBuffer.
        tangent4Buffer dataSize: tangent4 size * Float32x4 instanceSize.
        tangent4Buffer data reset: (Std malloc(tangent4Buffer dataSize) reinterpretCastTo: UInt8 pointer).
        Std memcpy(tangent4Buffer data getPointer, tangent4 data, tangent4Buffer dataSize).
        tangent4BufferView buffer: tangent4Buffer.
    }.

    method generateTangentSpaceFrames => Void := {
        let vertexDataToGenerateTangentSpace mutable := VertexDataWithPendingAttributes().
        meshes do: {:each :: Void |
            each primitives do: {:eachPrimitive :: Void |
                eachPrimitive material isNotNil && eachPrimitive material normalTexture isNotNil && eachPrimitive attributes hasTangent4 not ifTrue: {
                    let primitiveList ref := vertexDataToGenerateTangentSpace at: eachPrimitive attributes ifAbsentPut: { :: (Std Collections Vector(ModelAssetMeshPrimitiveRef)) | Std Collections Vector(ModelAssetMeshPrimitiveRef) () }.
                    primitiveList add: eachPrimitive
                }.
            }.
        }.

        vertexDataToGenerateTangentSpace ifEmpty: {return: void}.
        self generateMissingVertexTangentSpaceFrames: vertexDataToGenerateTangentSpace
    }.

    method cleanupMeshes => Void := {
        self
            generateNormals;
            generateTangentSpaceFrames.
    }.

    method cleanupSkeletons => Void := {
        skeletons do: {:each :: Void |
            each cleanupSkeleton.
        }.

        ## We should permutate an accessor only one time.
        let processedAccessors mutable type: Std Collections Set(ModelAssetBinaryBufferAccessorRef).

        nodes do: {:eachNode :: Void |
            eachNode skeleton isNotNil && eachNode mesh isNotNil ifTrue: {
                eachNode mesh primitives do: {:eachPrimitive :: Void |
                    eachPrimitive attributes attributes do: {:eachAttribute :: Void |
                        eachAttribute location = VertexAttributeLocation Joints0 ifTrue: {
                            (processedAccessors includes: eachAttribute accessor) ifFalse: {
                                processedAccessors add: eachAttribute accessor.
                                eachNode skeleton permutateBoneIndicesInVertices: eachAttribute accessor
                            }
                        }
                    }
                }
            }
        }.
    }.

    method optimizeIndexBuffers => Void := {
        let processedIndices mutable type: Std Collections Set(ModelAssetBinaryBufferAccessorRef).
        let convertedIndices mutable type: Std Collections Vector(UInt16).
        let convertedIndicesAccessors mutable type: Std Collections Vector(ModelAssetBinaryBufferAccessorRef).

        ## Create the accessors for the new index buffers.
        meshes do: {:eachMesh :: Void |
            eachMesh primitives do: {:eachPrimitive :: Void |
                let indices := eachPrimitive indices.
                indices isNotNil && (processedIndices includes: indices) not ifTrue: {
                    processedIndices add: indices.

                    indices format = PixelFormat R32_UInt && indices maxValue <= 16rFFFF ifTrue: {
                        let newAccessor := self newBufferAccessor.
                        newAccessor
                            offset: convertedIndices size * 2;
                            count: indices count;
                            columnCount: indices columnCount;
                            format: PixelFormat R16_UInt.
                        convertedIndicesAccessors add: newAccessor.

                        let sourceData := indices asCPUBufferPointer reinterpretCastTo: UInt32 pointer.
                        convertedIndices reserve: indices count.
                        0 until: indices count do: {:i :: Void |
                            convertedIndices add: (sourceData[i] castTo: UInt16)
                        }.

                        eachPrimitive indices: newAccessor
                    }
                }
            }
        }.

        ## If there is nothing required to convert, just return.
        convertedIndicesAccessors ifEmpty: {
            return: void
        }.

        ## Create the new buffer and buffer view.
        let newBuffer := self newBuffer
            setContent: ((convertedIndices data reinterpretCastTo: UInt8 pointer) until: convertedIndices size * 4);
            yourself.

        let newBufferView := self newBufferView
            buffer: newBuffer;
            size: newBuffer dataSize;
            stride: 2;
            usage: BufferUsageMode ElementArray;
            yourself.

        ## Use the new buffer view in the new accessors.
        convertedIndicesAccessors do: {:each :: Void |
            each bufferView: newBufferView
        }
    }.

    method optimizeBuffers => Void := {

    }.
}.

compileTime constant ModelAssetRef := ModelAsset rcRef.

} ## End of namespace Assets
} ## End of namespace Woden
