namespace Woden definition: {
namespace Assets definition: {

useNamespace: Woden Runtime.
useNamespace: Std Graphics Core.

#**
 * I am a metallic-roughness material in a model asset.
 *#
class ModelAssetMetallicRoughnessMaterial superclass: ModelAssetMaterial; definition: {
    override method initialize => Void := {
        baseColorFactor := Float32x4 white.
        metallicFactor := 0.0f.
        roughnessFactor := 0.55f.
    }.

    public field baseColorFactor type: Float32x4.
    public field baseColorTexture type: ModelAssetTextureRef.

    public field metallicFactor type: Float32.
    public field roughnessFactor type: Float32.
    public field metallicRoughnessTexture type: ModelAssetTextureRef.

    field renderingMaterial type: MaterialRef.

    override method isMetallicRoughnessMaterial => Boolean8
        := true.

    override method asRenderingMaterialFor: (engine: EngineRef const ref) ::=> MaterialRef := {
        renderingMaterial ifNotNil: {return: renderingMaterial}.

        let convertedMaterial := MetallicRoughnessMaterial for: engine.

        convertedMaterial
            doubleSided: doubleSided;
            isTranslucent: alphaMode = ModelAssetMaterialAlphaMode Blend.

        convertedMaterial state
            emissionFactor: Float32x4(emissionFactor, 1.0f);
            baseColorFactor: baseColorFactor;
            alphaCutoff: (alphaMode = ModelAssetMaterialAlphaMode Mask ifTrue: alphaCutoff ifFalse: 0.0f);
            metallicFactor: metallicFactor;
            roughnessFactor: roughnessFactor.

        baseColorTexture ifNotNil: {
            convertedMaterial baseColorTexture: (baseColorTexture asTextureWithViewFor: engine)
        }.

        emissionTexture ifNotNil: {
            convertedMaterial emissionTexture: (emissionTexture asTextureWithViewFor: engine)
        }.

        normalTexture ifNotNil: {
            convertedMaterial normalTexture: (normalTexture asTextureWithViewFor: engine)
        }.

        metallicRoughnessTexture ifNotNil: {
            convertedMaterial metallicRoughnessTexture: (metallicRoughnessTexture asTextureWithViewFor: engine)
        }.

        occlusionTexture ifNotNil: {
            convertedMaterial occlusionTexture: (occlusionTexture asTextureWithViewFor: engine)
        }.

        renderingMaterial := convertedMaterial upCastFor: Material
    }.
}.

compileTime constant ModelAssetMetallicRoughnessMaterialRef := ModelAssetMetallicRoughnessMaterial rcRef.

} ## End of namespace Assets
} ## End of namespace Woden
