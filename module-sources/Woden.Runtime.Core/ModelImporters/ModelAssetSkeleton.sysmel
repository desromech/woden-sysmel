namespace Woden definition: {
namespace Assets definition: {

useNamespace: Woden Runtime.
useNamespace: Std Math Geometry.
useNamespace: Std Graphics Core.

#**
 * I represent a skeleton which is composed of a hierarchy of unions.
 *#
class ModelAssetSkeleton superclass: ModelAssetElement; definition: {
    public field inverseBindMatricesAccessor type: ModelAssetBinaryBufferAccessorPtr.
    public field joints type: Std Collections Vector(ModelAssetNodePtr).
    public field rootJoint type: ModelAssetNodePtr.

    method cleanupSkeleton => Void := {
        joints do: {:each :: Void |
            each _
                isJoint: true;
                hasValidJointIndex: false.
        }.

        let nextJointIndex mutable type: UIntPointer.
        rootJoint ifNotNil: {
            nextJointIndex := self cleanUpJoint: rootJoint parentIndex: -1 joinIndex: nextJointIndex.
        }.

        joints do: {:each :: Void |
            nextJointIndex := self cleanUpJoint: each parentIndex: -1 joinIndex: nextJointIndex.
        }.
        Std assert: nextJointIndex = joints size.
    }.

    method cleanUpJoint: (joint: ModelAssetNodePtr const ref) parentIndex: (parentIndex: IntPointer) joinIndex: (nextJointIndex: UIntPointer) ::=> UIntPointer := {
        joint _ hasValidJointIndex ifTrue: {return: nextJointIndex}.

        let childrenParentIndex mutable := parentIndex.
        let result mutable := nextJointIndex.

        joint _ isJoint ifTrue: {
            joint _
                jointIndex: nextJointIndex;
                parentJointIndex: parentIndex;
                hasValidJointIndex: true.
            childrenParentIndex := nextJointIndex castTo: IntPointer.
            result := nextJointIndex + 1u
        }.

        joint _ children do: {:child :: Void |
            result := self cleanUpJoint: child parentIndex: childrenParentIndex joinIndex: result
        }.

        result
    }.

    field skeleton type: SkeletonPtr.

    method permutateBoneIndex: (boneIndex: UInt32) ::=> UInt32
        := joints[boneIndex] _ jointIndex castTo: UInt32.

    method permutateBoneIndicesInVertices: (vertexData: ModelAssetBinaryBufferAccessorPtr const ref) ::=> Void := {
        vertexData _ format selectCase: #{
        PixelFormat R32G32B32A32_UInt : {
            let data := vertexData _ asCPUBufferPointer reinterpretCastTo: UInt32 pointer.
            0 until: vertexData _ count * 4 do: {:i :: Void |
                data[i] := (self permutateBoneIndex: (data[i] castTo: UInt32)) castTo: UInt32
            }
        }.
        PixelFormat R32G32B32A32_SInt : {
            let data := vertexData _ asCPUBufferPointer reinterpretCastTo: Int32 pointer.
            0 until: vertexData _ count * 4 do: {:i :: Void |
                data[i] := (self permutateBoneIndex: (data[i] castTo: UInt32)) castTo: Int32
            }
        }.
        PixelFormat R16G16B16A16_UInt : {
            let data := vertexData _ asCPUBufferPointer reinterpretCastTo: UInt16 pointer.
            0 until: vertexData _ count * 4 do: {:i :: Void |
                data[i] := (self permutateBoneIndex: (data[i] castTo: UInt32)) castTo: UInt16
            }
        }.
        PixelFormat R16G16B16A16_SInt : {
            let data := vertexData _ asCPUBufferPointer reinterpretCastTo: Int16 pointer.
            0 until: vertexData _ count * 4 do: {:i :: Void |
                data[i] := (self permutateBoneIndex: (data[i] castTo: UInt32)) castTo: Int16
            }
        }.
        PixelFormat R8G8B8A8_UInt : {
            let data := vertexData _ asCPUBufferPointer reinterpretCastTo: UInt8 pointer.
            0 until: vertexData _ count * 4 do: {:i :: Void |
                data[i] := (self permutateBoneIndex: (data[i] castTo: UInt32)) castTo: UInt8
            }
        }.
        PixelFormat R8G8B8A8_SInt : {
            let data := vertexData _ asCPUBufferPointer reinterpretCastTo: Int8 pointer.
            0 until: vertexData _ count * 4 do: {:i :: Void |
                data[i] := (self permutateBoneIndex: (data[i] castTo: UInt32)) castTo: Int8
            }
        }.
        }.
    }.

    method asSkeleton => SkeletonPtr := {
        skeleton ifNotNil: {return: skeleton}.

        let boneCount := joints size.
        let inverseBindMatrices := inverseBindMatricesAccessor _ decodeAsVectorOfFloat32x4x4.
        Std assert: inverseBindMatrices size = boneCount.

        skeleton := Skeleton rcNew.
        skeleton _ bones resizeTo: boneCount.
        joints doWithIndex: {:joint :index :: Void |
            let jointSortedIndex := joint _ jointIndex.
            Std assert: jointSortedIndex < boneCount && joint _ hasValidJointIndex.

            skeleton _ bones[jointSortedIndex]
                parentIndex: joint _ parentJointIndex;
                inverseBindMatrix: inverseBindMatrices[index];
                restPose: (BonePose()
                    scale: joint _ scale;
                    rotation: joint _ rotationQuaternion;
                    translation: joint _ translation;
                    yourself)
        }.

        skeleton
    }.
}.

compileTime constant ModelAssetSkeletonPtr := ModelAssetSkeleton rcPointer.

} ## End of namespace Assets
} ## End of namespace Woden
