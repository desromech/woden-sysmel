namespace Woden definition: {
namespace Assets definition: {

useNamespace: Woden Runtime.
useNamespace: Std Graphics Core.
useNamespace: Std Math Geometry.

#**
 * I am a primitive in a mesh.
 *#
class ModelAssetMeshPrimitive superclass: ModelAssetElement; definition: {
    public field attributes type: ModelAssetMeshPrimitiveAttributesRef.
    public field indices type: ModelAssetBinaryBufferAccessorRef.
    public field material type: ModelAssetMaterialRef.
    public field primitiveTopology type: PrimitiveTopology.

    method boundingBox => BoxF32
        := attributes boundingBox.

    method trianglesDo: (aBlock: ((UInt32 -- UInt32 -- UInt32) => Void) nativeStackBlockClosure) ::=> Void := {
        primitiveTopology = PrimitiveTopology Triangles ifTrue: {
            indices ifNil: {
                let triangleCount := attributes vertexCount / 3u castTo: UInt32.
                0 until: triangleCount do: {:i :: Void |
                    aBlock(i*3, i*3 + 1, i*3 + 2)
                }.
            } ifNotNil: {
                indices trianglesDo: aBlock
            }.
        }.
    }.

    method asSubmeshFor: (engine: EngineRef const ref) ::=> GenericSubmesh := {
        let result mutable :=  GenericSubmesh()
            vertexBinding: (attributes asVertexBindingFor: engine);
            vertexAttributeMask: attributes vertexAttributeMask;
            material: (material
                ifNil: {engine resourceCache defaultMaterial}
                ifNotNil: {material asRenderingMaterialFor: engine});
            primitiveTopology: primitiveTopology;
            yourself.

        indices ifNil: {
            result indexOrVertexCount: (attributes vertexCount castTo: UInt32).
        } ifNotNil: {
            result
                indexBuffer: (indices asIndexBufferFor: engine);
                indexBufferOffset: indices asIndexBufferOffset;
                indexBufferStride: indices asIndexBufferStride;
                firstIndex: (indices asFirstIndex castTo: UInt32);
                indexOrVertexCount: (indices count castTo: UInt32).
        }.

        result
    }.

    method isTranslucent => Boolean8
        := material isNotNil && material isTranslucent.

    method isOpaque => Boolean8
        := material isNil || material isOpaque.
}.

compileTime constant ModelAssetMeshPrimitiveRef := ModelAssetMeshPrimitive rcRef.

} ## End of namespace Assets
} ## End of namespace Woden
