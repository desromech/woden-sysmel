namespace Woden definition: {
namespace Assets definition: {

useNamespace: Woden Runtime.
useNamespace: Std Math.
useNamespace: Std Math LinearAlgebra.

#**
 * I am a scene node in a model asset.
 *#
class ModelAssetNode superclass: ModelAssetElement; definition: {
    public field children type: Std Collections Vector(ModelAssetNode rcRef).
    public field mesh type: ModelAssetMeshRef.

    public field skeleton type: ModelAssetSkeleton rcRef.

    public field isJoint type: Boolean8.
    public field hasValidJointIndex type: Boolean8.
    public field jointIndex type: UIntPointer.
    public field parentJointIndex type: IntPointer.

    public field transform type: ReversibleAffineTransform3dF32.
    public field scale type: Float32x3.
    public field rotationQuaternion type: QuaternionF32.
    public field translation type: Float32x3.

    override method initialize => Void := {
        transform setIdentity.
        scale := 1.
        rotationQuaternion := QuaternionF32 identity.
    }.

    method asSceneNodeFor: (engine: EngineRef const ref) ::=> SceneNodeRef := {
        let node := SpatialObjectNode new.
        mesh ifNotNil: {
            node renderable: (mesh asRenderableFor: engine).

            skeleton ifNotNil: {
                node renderable: (SkinnedRenderableMesh new
                    mesh: node renderable;
                    skeleton: skeleton asSkeleton;
                    createRestPose;
                    upCastFor: Renderable)
            }
        }.

        node transform: transform.
        children do: {:each :: Void |
            (each asSceneNodeFor: engine) ifNotNil: {:childNode :: Void |
                node addChild: childNode.
            }
        }.

        node upCastFor: SceneNode.
    }.
}.

compileTime constant ModelAssetNodeRef := ModelAssetNode rcRef.

} ## End of namespace Assets
} ## End of namespace Woden
