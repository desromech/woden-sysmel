namespace Woden definition: {
namespace Assets definition: {

useNamespace: Woden Runtime.
useNamespace: Std Graphics Core.

#**
 * I am a binary buffer in a model asset. I am used for holding different kinds
 * of data that is typically (but not always) uploaded onto the GPU.
 *#
class ModelAssetBinaryBuffer superclass: ModelAssetElement; definition: {
    public field data type: UInt8 uniquePointer.
    public field dataSize type: UIntPointer.

    field gpuBuffer type: BufferRef.

    method asArraySlice => UInt8 arraySlice
        := data getPointer until: dataSize.

    method setContent: (newContent: UInt8 arraySlice) ::=> Void := {
        dataSize := newContent size.
        dataSize > 0 ifTrue: {
            data reset: (Std malloc(newContent size) reinterpretCastTo: UInt8 pointer).
            Std memcpy(data getPointer, newContent[0] address, newContent size)
        } ifFalse: {
            data reset
        }.
    }.

    method asGpuBufferFor: (engine: EngineRef const ref) ::=> BufferRef := {
        gpuBuffer ifNotNil: {return: gpuBuffer}.
        gpuBuffer := engine renderingDevice createBuffer: (BufferDescription()
            size: dataSize;
            heapType: MemoryHeapType DeviceLocal;
            usageModes: BufferUsageMode Array | BufferUsageMode ElementArray;
            mainUsageMode: BufferUsageMode Array | BufferUsageMode ElementArray;
            yourself) initialData: data getPointer
    }.
}.

compileTime constant ModelAssetBinaryBufferRef := ModelAssetBinaryBuffer rcRef.

} ## End of namespace Assets
} ## End of namespace Woden
