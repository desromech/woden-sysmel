namespace Woden definition: {
namespace Assets definition: {

useNamespace: Woden Runtime.
useNamespace: Std Graphics Core.
useNamespace: Std Math Geometry.

#**
 * I am an accessor for structured data in a binary buffer view.
 *#
class ModelAssetBinaryBufferAccessor superclass: ModelAssetElement; definition: {
    public field bufferView type: ModelAssetBinaryBufferViewPtr.
    public field offset type: UIntPointer.
    public field count type: UIntPointer.
    public field columnCount type: UIntPointer.
    public field format type: PixelFormat.

    ## Use doubles so that all integer also fit here.
    public field minValue type: Float64x4.
    public field maxValue type: Float64x4.

    method asIndexBufferFor: (engine: EnginePtr const ref) ::=> BufferRef
        := bufferView _ asIndexBufferFor: engine.

    method asFirstIndex => UIntPointer
        := offset / self asIndexBufferStride.

    method asIndexBufferOffset ::=> UIntPointer
        := bufferView _ asGpuBufferOffset.

    method asGpuBufferOffset ::=> UIntPointer
        := offset + bufferView _ asGpuBufferOffset.

    method asIndexBufferStride ::=> UIntPointer
        := format bytesPerPixel.

    method asCPUBufferPointer => UInt8 pointer
        := bufferView _ asCPUBufferPointer + offset.

    method decodeAsVectorOfFloat32 => Std Collections Vector(Float32) := {
        let result mutable type: Std Collections Vector(Float32).
        bufferView ifNil: {return: result asMoveReference}.

        let bufferPointer := self asCPUBufferPointer.

        format selectCase: #{
        PixelFormat R32_Float : {
            let stride := bufferView _ stride max: 4.
            result resizeTo: count.

            let sourcePointer mutable := bufferPointer.
            let destPointer := result data.
            0 until: count do: {:i :: Void |
                let castedElement := sourcePointer reinterpretCastTo: Float32 pointer.
                destPointer[i] := castedElement _.
                sourcePointer := sourcePointer + stride
            }
        }.
        _ : {}
        }.

        result asMoveReference
    }.

    method decodeAsVectorOfFloat32x2 => Std Collections Vector(Float32x2) := {
        let result mutable type: Std Collections Vector(Float32x2).
        bufferView ifNil: {return: result asMoveReference}.

        let bufferPointer := self asCPUBufferPointer.

        format selectCase: #{
        PixelFormat R32G32_Float : {
            let stride := bufferView _ stride max: 8.
            result resizeTo: count.

            let sourcePointer mutable := bufferPointer.
            let destPointer := result data.
            0 until: count do: {:i :: Void |
                let castedElement := sourcePointer reinterpretCastTo: Float32 pointer.
                destPointer[i] := Float32x2(castedElement[0], castedElement[1]).
                sourcePointer := sourcePointer + stride
            }
        }.
        _ : {}
        }.

        result asMoveReference
    }.

    method decodeAsVectorOfFloat32x3 => Std Collections Vector(Float32x3) := {
        let result mutable type: Std Collections Vector(Float32x3).
        bufferView ifNil: {return: result asMoveReference}.

        let bufferPointer := self asCPUBufferPointer.

        format selectCase: #{
        PixelFormat R32G32B32_Float : {
            let stride := bufferView _ stride max: 12.
            result resizeTo: count.

            let sourcePointer mutable := bufferPointer.
            let destPointer := result data.
            0 until: count do: {:i :: Void |
                let castedElement := sourcePointer reinterpretCastTo: Float32 pointer.
                destPointer[i] := Float32x3(castedElement[0], castedElement[1], castedElement[2]).
                sourcePointer := sourcePointer + stride
            }
        }.
        _ : {}
        }.

        result asMoveReference
    }.

    method decodeAsVectorOfFloat32x4 => Std Collections Vector(Float32x4) := {
        let result mutable type: Std Collections Vector(Float32x4).
        bufferView ifNil: {return: result asMoveReference}.

        let bufferPointer := self asCPUBufferPointer.

        format selectCase: #{
        PixelFormat R32G32B32A32_Float : {
            let stride := bufferView _ stride max: 16.
            result resizeTo: count.

            let sourcePointer mutable := bufferPointer.
            let destPointer := result data.
            0 until: count do: {:i :: Void |
                let castedElement := sourcePointer reinterpretCastTo: Float32 pointer.
                destPointer[i] := Float32x4(castedElement[0], castedElement[1], castedElement[2], castedElement[3]).
                sourcePointer := sourcePointer + stride
            }
        }.
        _ : {}
        }.

        result asMoveReference
    }.

    method decodeAsVectorOfFloat32x4x4 => Std Collections Vector(Float32x4x4) := {
        let result mutable type: Std Collections Vector(Float32x4x4).
        columnCount ~= 4 || bufferView isNil ifTrue: {return: result asMoveReference}.

        let bufferPointer := self asCPUBufferPointer.

        format selectCase: #{
        PixelFormat R32G32B32A32_Float : {
            let stride := bufferView _ stride max: 64.
            result resizeTo: count.

            let sourcePointer mutable := bufferPointer.
            let destPointer := result data.
            0 until: count do: {:i :: Void |
                let castedElement := sourcePointer reinterpretCastTo: Float32 pointer.
                let firstColumn := Float32x4(castedElement[0], castedElement[1], castedElement[2], castedElement[3]).
                let secondColumn := Float32x4(castedElement[4], castedElement[5], castedElement[6], castedElement[7]).
                let thirdColumn := Float32x4(castedElement[8], castedElement[9], castedElement[10], castedElement[11]).
                let fourthColumn := Float32x4(castedElement[12], castedElement[13], castedElement[14], castedElement[15]).

                destPointer[i] := Float32x4x4(firstColumn, secondColumn, thirdColumn, fourthColumn).
                sourcePointer := sourcePointer + stride
            }
        }.
        _ : {}
        }.

        result asMoveReference
    }.

    method trianglesDo: (aBlock: ((UInt32 -- UInt32 -- UInt32) => Void) nativeStackBlockClosure) ::=> Void := {
        format selectCase: #{
        PixelFormat R8_UInt : {
            let indices mutable := self asCPUBufferPointer reinterpretCastTo: UInt8 pointer.

            0 until: count / 3 do: {:i :: Void |
                aBlock(indices[0], indices[1], indices[2]).
                indices := indices + 3
            }
        }.
        PixelFormat R16_UInt : {
            let indices mutable := self asCPUBufferPointer reinterpretCastTo: UInt16 pointer.

            0 until: count / 3 do: {:i :: Void |
                aBlock(indices[0], indices[1], indices[2]).
                indices := indices + 3
            }
        }.
        PixelFormat R32_UInt : {
            let indices mutable := self asCPUBufferPointer reinterpretCastTo: UInt32 pointer.

            0 until: count / 3 do: {:i :: Void |
                aBlock(indices[0], indices[1], indices[2]).
                indices := indices + 3
            }
        }.
        }.
    }.

    method boundingBox => BoxF32
        := BoxF32 min: (minValue xyz castTo: Float32x3) max: (maxValue xyz castTo: Float32x3).

    method boundingBox: (box: BoxF32 const ref) ::=> Void := {
        minValue := Float64x4(box min castTo: Float64x3, 0).
        maxValue := Float64x4(box max castTo: Float64x3, 0).
    }.
}.

compileTime constant ModelAssetBinaryBufferAccessorPtr := ModelAssetBinaryBufferAccessor rcPointer.

} ## End of namespace Assets
} ## End of namespace Woden
