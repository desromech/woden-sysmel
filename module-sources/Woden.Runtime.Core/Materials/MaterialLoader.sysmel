namespace Woden definition: {
namespace Runtime definition: {

useNamespace: Std Serialization.
useNamespace: Std Graphics Core.

class MaterialLoader definition: {
    field parentFolder type: Std FileReference.
    field engine type: EngineRef.

    method loadColorTextureFrom: (relativePath: Std String const ref) default: (default: TextureWithViewRef const ref) ::=> TextureWithViewRef := {
        let result := engine resourceCache loadColorTextureFrom: (parentFolder resolve: relativePath asNativeFileReference).
        result ifNil: {
            return: default.
        }.

        result
    }.

    method loadColorTextureFrom: (relativePath: Std String const ref) ::=> TextureWithViewRef
        := self loadColorTextureFrom: relativePath default: TextureWithViewRef nil.

    method loadNonColorTextureFrom: (relativePath: Std String const ref) default: (default: TextureWithViewRef const ref) ::=> TextureWithViewRef := {
        let result := engine resourceCache loadNonColorTextureFrom: (parentFolder resolve: relativePath asNativeFileReference).
        result ifNil: {
            return: default.
        }.

        result
    }.

    method loadNonColorTextureFrom: (relativePath: Std String const ref) ::=> TextureWithViewRef
        := self loadNonColorTextureFrom: relativePath default: TextureWithViewRef nil.

    method loadNormalTextureFrom: (relativePath: Std String const ref) default: (default: TextureWithViewRef const ref) ::=> TextureWithViewRef := {
        let result := engine resourceCache loadNormalTextureFrom: (parentFolder resolve: relativePath asNativeFileReference).
        result ifNil: {
            return: default.
        }.

        result
    }.

    method loadNormalTextureFrom: (relativePath: Std String const ref) ::=> TextureWithViewRef
        := self loadNormalTextureFrom: relativePath default: TextureWithViewRef nil.


    method parseMetallicRoughnessMaterialFrom: (object: DOM ObjectRef const ref) into: (result: MetallicRoughnessMaterial ref) ::=> Void := {
        let hasMetallicRoughnessTexture mutable := false.

        object at: "baseColorTexture" ifPresent: {:(DOM Value const ref)value :: Void |
            result baseColorTexture: (self loadColorTextureFrom: (value get: Std String)).
        }.

        object at: "emissionTexture" ifPresent: {:(DOM Value const ref)value :: Void |
            result emissionTexture: (self loadColorTextureFrom: (value get: Std String)).
        }.

        object at: "normalTexture" ifPresent: {:(DOM Value const ref)value :: Void |
            result normalTexture: (self loadNormalTextureFrom: (value get: Std String)).
        }.

        object at: "metallicRoughnessTexture" ifPresent: {:(DOM Value const ref)value :: Void |
            hasMetallicRoughnessTexture := true.
            result metallicRoughnessTexture: (self loadNonColorTextureFrom: (value get: Std String)).
        }.

        object at: "occlusionTexture" ifPresent: {:(DOM Value const ref)value :: Void |
            hasMetallicRoughnessTexture := true.
            result occlusionTexture: (self loadNonColorTextureFrom: (value get: Std String)).
        }.

        object at: "occlusionMetallicRoughnessTexture" ifPresent: {:(DOM Value const ref)value :: Void |
            let texture := self loadNonColorTextureFrom: (value get: Std String).
            result
                metallicRoughnessTexture: texture;
                occlusionTexture: texture.
        }.

        result
            baseColorFactor: Std Math Color decodeSRGB(object getFloat32x4: "baseColorFactor" default: 1.0f);
            emissionFactor: Std Math Color decodeSRGB(Float32x4(object getFloat32x3: "emissionFactor" default: 0, 0)) rgb;
            occlusionFactor: (object getFloat32: "occlusionFactor" default: 1.0);
            metallicFactor: (object getFloat32: "metallicFactor" default: (hasMetallicRoughnessTexture ifTrue: 1.0f ifFalse: 0.0f));
            roughnessFactor: (object getFloat32: "roughnessFactor" default: 1.0f);
            alphaCutoff: (object getFloat32: "alphaCutoff" default: 0.0f);
            doubleSided: (object getBoolean8: "doubleSided" default: false);
            isTranslucent: (object getBoolean8: "isTranslucent" default: false)
    }.

    method loadColorCubeTextureFrom: (relativePath: Std String const ref) default: (default: TextureWithViewRef const ref) ::=> TextureWithViewRef := {
        let result := engine resourceCache loadColorCubeTextureFrom: (parentFolder resolve: relativePath asNativeFileReference).
        result ifNil: {
            return: default.
        }.

        result
    }.

    method loadColorCubeTextureFrom: (relativePath: Std String const ref) ::=> TextureWithViewRef
        := self loadColorCubeTextureFrom: relativePath default: TextureWithViewRef nil.


    method parseMetallicRoughnessMaterialFrom: (object: DOM ObjectRef const ref) ::=> MaterialRef := {
        let result := MetallicRoughnessMaterial for: engine.
        self parseMetallicRoughnessMaterialFrom: object into: result rcObjectAddress _.
        result upCastFor: Material.
    }.

    method parseUnlitMaterialFrom: (object: DOM ObjectRef const ref) ::=> MaterialRef := {
        let result := UnlitMaterial for: engine.

        object at: "texture" ifPresent: {:(DOM Value const ref)value :: Void |
            result texture: (self loadColorTextureFrom: (value get: Std String))
        }.

        result
            colorFactor: Std Math Color decodeSRGB(object getFloat32x4: "colorFactor" default: 1.0f);
            alphaCutoff: (object getFloat32: "alphaCutoff" default: 0.0f);
            doubleSided: (object getBoolean8: "doubleSided" default: false);
            isTranslucent: (object getBoolean8: "isTranslucent" default: false).

        result upCastFor: Material.
    }.

    method parseSkyMaterialFrom: (object: DOM ObjectRef const ref) ::=> MaterialRef := {
        let result := SkyMaterial for: engine.

        object at: "texture" ifPresent: {:(DOM Value const ref)value :: Void |
            result texture: (self loadColorCubeTextureFrom: (value get: Std String))
        }.

        result upCastFor: Material.
    }.

    method parseWaterMaterialFrom: (object: DOM ObjectRef const ref) ::=> MaterialRef := {
        let result := WaterMaterial for: engine.
        self parseMetallicRoughnessMaterialFrom: object into: result rcObjectAddress _.
        result upCastFor: Material.
    }.

    method parseMaterialFrom: (object: DOM ObjectRef const ref) ::=> MaterialRef := {
        let materialType := object getString: "type" default: "MetallicRoughness".
        materialType asArraySlice selectCase: #{
        "MetallicRoughness" : (self parseMetallicRoughnessMaterialFrom: object).
        "Unlit" : (self parseUnlitMaterialFrom: object).
        "Sky" : (self parseSkyMaterialFrom: object).
        "Water" : (self parseWaterMaterialFrom: object).
        _ : MaterialRef nil
        }.
    }.

    method parseMaterialFromFileReference: (fileReference: Std FileReference const ref) for: (anEngine: EngineRef const ref) ::=> MaterialRef := {
        parentFolder := fileReference parent.
        engine := anEngine.

        let inputReadStream mutable := fileReference binaryReadStream.
        inputReadStream ifNil: {return: MaterialRef nil}.

        let domValue := fileReference extension asArraySlice = "wtmat"
            ifTrue: { JSON ValueParser parseStream: inputReadStream getPointer }
            ifFalse: { MessagePack ValueDecoder decodeStream: inputReadStream getPointer }.

        self parseMaterialFrom: (domValue get: DOM ObjectRef).
    }.
}.

}. ## End of namespace Runtime
}. ## End of namespace Woden
