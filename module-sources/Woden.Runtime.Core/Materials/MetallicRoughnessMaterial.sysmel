namespace Woden definition: {
namespace Runtime definition: {

useNamespace: Stdn Graphics Core.

#**
 * I represent an abstract renderable, which is any 3D object that may be rendered by using a state tracker.
 *#
class MetallicRoughnessMaterial superclass: Material; definition: {
    meta definition: {
        method for: (anEngine: EnginePtr const ref) ::=> MetallicRoughnessMaterial sharedPointer := {
            let result := MetallicRoughnessMaterial sharedNew.
            result _ initializeWithEngine: anEngine.
            result
        }.
    }.

    public field state type: Woden Shaders MetallicRoughnessMaterialStateData.

    public field stateBinding type: ShaderResourceBindingsPtr.
    public field stateBuffer type: BufferPtr. ## TODO: Use pool of elements here.

    public field albedoTexture type: TexturePtr.
    public field normalTexture type: TexturePtr.
    public field emissionTexture type: TexturePtr.
    public field metallicRoughnessTexture type: TexturePtr.

    const inline method albedoColor => Float32x4
        := state albedo.

    inline method albedoColor: (color: Float32x4) ::=> Void
        := state albedo: color.

    const inline method emissionColor => Float32x4
        := state emission.

    inline method emissionColor: (color: Float32x4) ::=> Void
        := state emission: color.

    const inline method roughnessFactor => Float32
        := state roughnessFactor.

    inline method roughnessFactor: (factor: Float32) ::=> Void
        := state roughnessFactor: factor.

    const inline method metallicFactor => Float32
        := state metallicFactor.

    inline method metallicFactor: (factor: Float32) ::=> Void
        := state metallicFactor: factor.

    override method initialize => Void := {
        state
            albedo: Float32x4 white;
            metallicFactor: 0.0f;
            roughnessFactor: 0.55f.
    }.

    override method activateWithSceneRenderingContext: (context: SceneRenderingContext ref) ::=> Boolean8
        := context activateMetallicRoughnessMaterial: self.

    method validAlbedoTexture => TexturePtr := {
        albedoTexture ifNil: {return: engine _ resourceCache _ whiteTexture}.
        albedoTexture
    }.

    method albedoTextureView => TextureViewPtr
        := self validAlbedoTexture _ getOrCreateFullView.

    method validNormalTexture => TexturePtr := {
        normalTexture ifNil: {return: engine _ resourceCache _ neutralNormalTexture}.
        normalTexture
    }.

    method normalTextureView => TextureViewPtr
        := self validNormalTexture _ getOrCreateFullView.

    method validEmissionTexture => TexturePtr := {
        emissionTexture ifNil: {return: engine _ resourceCache _ transparentTexture}.
        emissionTexture
    }.

    method emissionTextureView => TextureViewPtr
        := self validEmissionTexture _ getOrCreateFullView.

    method validMetallicRoughnessTexture => TexturePtr := {
        metallicRoughnessTexture ifNil: {return: engine _ resourceCache _ whiteTexture}.
        metallicRoughnessTexture
    }.

    method metallicRoughnessTextureView => TextureViewPtr
        := self validMetallicRoughnessTexture _ getOrCreateFullView.
}.

compileTime constant MetallicRoughnessMaterialPtr := MetallicRoughnessMaterial sharedPointer.

}. ## End of namespace Runtime
}. ## End of namespace Woden
