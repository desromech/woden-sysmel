namespace Woden definition: {
namespace Runtime definition: {

useNamespace: Std Graphics Core.

#**
 * I represent an abstract renderable, which is any 3D object that may be rendered by using a state tracker.
 *#
class MetallicRoughnessMaterial superclass: Material; definition: {
    meta definition: {
        method for: (anEngine: EnginePtr const ref) ::=> MetallicRoughnessMaterial rcPointer := {
            let result := MetallicRoughnessMaterial rcNew.
            result _ initializeWithEngine: anEngine.
            result
        }.
    }.

    public field state type: Woden Shaders MetallicRoughnessMaterialStateData.

    public field stateBinding type: ShaderResourceBindingsRef.
    public field stateBuffer type: BufferRef. ## TODO: Use pool of elements here.

    public field baseColorTexture type: TextureWithViewRef.
    public field normalTexture type: TextureWithViewRef.
    public field emissionTexture type: TextureWithViewRef.
    public field occlusionTexture type: TextureWithViewRef.
    public field metallicRoughnessTexture type: TextureWithViewRef.

    public field doubleSided type: Boolean8.
    public field isTranslucent type: Boolean8.

    const inline method hasAlphaMask => Boolean8
        := state alphaCutoff > 0.

    const inline method baseColorFactor => Float32x4
        := state baseColorFactor.

    inline method baseColorFactor: (color: Float32x4) ::=> Void
        := state baseColorFactor: color.

    const inline method emissionFactor => Float32x4
        := state emissionFactor.

    inline method emissionFactor: (color: Float32x3) ::=> Void
        := state emissionFactor: Float32x4(color, 0.0f).

    const inline method occlusionFactor => Float32
        := state occlusionFactor.

    inline method occlusionFactor: (factor: Float32) ::=> Void
        := state occlusionFactor: factor.

    const inline method roughnessFactor => Float32
        := state roughnessFactor.

    inline method roughnessFactor: (factor: Float32) ::=> Void
        := state roughnessFactor: factor.

    const inline method metallicFactor => Float32
        := state metallicFactor.

    inline method metallicFactor: (factor: Float32) ::=> Void
        := state metallicFactor: factor.

    inline method alphaCutoff: (value: Float32) ::=> Void
        := state alphaCutoff: value.

    const inline method alphaCutoff => Float32
        := state alphaCutoff.

    override method initialize => Void := {
        state
            baseColorFactor: Float32x4 white;
            occlusionFactor: 1.0f;
            metallicFactor: 0.0f;
            roughnessFactor: 0.55f.
    }.

    override method activateWithSceneRenderingContext: (context: SceneRenderingContext ref) ::=> Boolean8
        := context activateMetallicRoughnessMaterial: self.

    method validBaseColorTexture => TextureWithViewRef := {
        baseColorTexture ifNil: {return: engine _ resourceCache _ whiteTexture}.
        baseColorTexture
    }.

    method validNormalTexture => TextureWithViewRef := {
        normalTexture ifNil: {return: engine _ resourceCache _ neutralNormalTexture}.
        normalTexture
    }.

    method validEmissionTexture => TextureWithViewRef := {
        emissionTexture ifNil: {return: engine _ resourceCache _ whiteTexture}.
        emissionTexture
    }.

    method validOcclusionTexture => TextureWithViewRef := {
        occlusionTexture ifNil: {return: engine _ resourceCache _ whiteTexture}.
        occlusionTexture
    }.

    method validMetallicRoughnessTexture => TextureWithViewRef := {
        metallicRoughnessTexture ifNil: {return: engine _ resourceCache _ whiteTexture}.
        metallicRoughnessTexture
    }.
}.

compileTime constant MetallicRoughnessMaterialPtr := MetallicRoughnessMaterial rcPointer.

}. ## End of namespace Runtime
}. ## End of namespace Woden
