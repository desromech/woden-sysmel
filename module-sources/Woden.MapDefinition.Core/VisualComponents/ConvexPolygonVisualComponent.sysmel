namespace Woden definition: {
namespace MapDefinition definition: {

useNamespace: Std Math Geometry.
useNamespace: Std Math LinearAlgebra.
useNamespace: Woden Runtime.

class ConvexPolygonVisualComponent superclass: VisualComponent2d; definition: {
    public field vertices type: Std Collections Vector(Float32x2).
    public field topFaceAttributes type: PolygonFaceAttributes.
    public field bottomFaceAttributes type: PolygonFaceAttributes.
    public field sideFaceAttributes type: PolygonFaceAttributes.

    field boundingRectangle type: RectangleF32.

    override method boundingRectangle => RectangleF32
        := boundingRectangle.

    override method setMaterial: (newMaterial: MaterialDefinitionRef const ref) ::=> Void := {
        topFaceAttributes setMaterial: newMaterial.
        bottomFaceAttributes setMaterial: newMaterial.
        sideFaceAttributes setMaterial: newMaterial.
    }.

    field renderable type: RenderableRef.

    method faceAttributesForNormal: (normal: Float32x3) ::=> PolygonFaceAttributes const ref := {
        normal y > 0 ifTrue: {
            return: topFaceAttributes
        }.

        normal y < 0 ifTrue: {
            return: bottomFaceAttributes
        }.

        sideFaceAttributes
    }.

    method getOrCreateRenderableFor: (engine: EngineRef) parentTransform: (parentTransform: ReversibleAffineTransform3dF32 const ref) ::=> RenderableRef := {
        renderable ifNotNil: {return: renderable}.

        let meshBuilder := engine newGenericMeshBuilder.
        self generateExtrudedFacesFor: engine with: meshBuilder parentTransform: parentTransform.

        renderable := meshBuilder computeTangentsBitangents;
            renderable
    }.

    method generateExtrudedFaceVertices: (faceVertices: Float32x3 arraySlice) normal: (faceNormal: Float32x3) for: (engine: EngineRef) with: (meshBuilder: GenericMeshBuilderRef const ref) parentTransform: (parentTransform: ReversibleAffineTransform3dF32 const ref) ::=> Void := {
        let faceAttributes ref := self faceAttributesForNormal: faceNormal.

        faceAttributes materialAttributes material ifNotNil: {:mat :: Void |
            meshBuilder currentMaterial: (mat getOrCreateMaterialFor: engine)
        }.
        meshBuilder
            beginTriangles.

        let normalAxis := meshBuilder computeNormalAxis: faceNormal.
        let tangent := meshBuilder tangentForAxis: normalAxis.
        let bitangent := meshBuilder bitangentForAxis: normalAxis.
        let textureMatrix := faceAttributes materialAttributes textureTransform.

        faceVertices do: {:each :: Void |
            let worldVertex := parentTransform transformPosition: each.
            
            let uv := Float32x2 x: (tangent dot: worldVertex) y: (bitangent dot: worldVertex).
            meshBuilder addP: each N: faceNormal TC: (textureMatrix * Float32x3(uv, 1)) xy
        }.

        2 until: (faceVertices size castTo: UInt32) do: {:(UInt32)index :: Void |
            meshBuilder addI1: 0 i2: index - 1 i3: index
        }.
    }.

    method generateExtrudedFacesFor: (engine: EngineRef) with: (meshBuilder: GenericMeshBuilderRef const ref) parentTransform: (parentTransform: ReversibleAffineTransform3dF32 const ref) ::=> Void := {
        ## Front face.
        let frontVertices mutable type: Std Collections Vector(Float32x3).
        frontVertices reserve: vertices size.
        vertices do: {:each :: Void |
            frontVertices add: Float32x3(each, maxZ)
        }.
        self generateExtrudedFaceVertices: frontVertices asArraySlice normal: Float32x3(0, 0, 1) for: engine with: meshBuilder parentTransform: parentTransform.

        ## Back face.
        let backVertices mutable type: Std Collections Vector(Float32x3).
        backVertices reserve: vertices size.
        vertices reverseDo: {:each :: Void |
            backVertices add: Float32x3(each, minZ)
        }.
        self generateExtrudedFaceVertices: backVertices asArraySlice normal: Float32x3(0, 0, -1) for: engine with: meshBuilder parentTransform: parentTransform.

        ## Side faces.
        let vertexCount := frontVertices size.
        0 until: vertexCount do: {:vs :: Void |
            let ve := (vs + 1) % vertexCount.
            let faceVertices mutable := Float32x3 array(
                frontVertices[ve],
                frontVertices[vs],
                backVertices[vertexCount - vs - 1],
                backVertices[vertexCount - ve - 1]
            ).

            let u := faceVertices second - faceVertices first.
            let v := faceVertices third - faceVertices first.
            let n := (u cross: v) normalized.
            self generateExtrudedFaceVertices: faceVertices normal: n for: engine with: meshBuilder parentTransform: parentTransform.
        }.
    }.

    override method createSceneNodeFor: (engine: EngineRef) parentTransform: (parentTransform: ReversibleAffineTransform3dF32 const ref) ::=> SceneNodeRef := {
        SpatialObjectNode new
            renderable: (self getOrCreateRenderableFor: engine parentTransform: parentTransform);
            upCastFor: SceneNode
    }.
}.

compileTime constant ConvexPolygonVisualComponentRef := ConvexPolygonVisualComponent rcRef.

}. ## namespace MapDefinition
}. ## namespace Woden
