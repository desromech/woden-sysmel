namespace Woden definition: {
namespace MapDefinition definition: {

useNamespace: Std Math Geometry.
useNamespace: Std Math LinearAlgebra.
useNamespace: Woden Runtime.

class PolyhedronFace superclass: LevelElementDefinition; definition: {
    public field materialAttributes type: FaceMaterialAttributes.
    public field plane type: PlaneF32.
    public field vertices type: Std Collections Vector(Float32x3).

    meta definition: {
        static method plane: (plane: PlaneF32 const ref) ::=> PolyhedronFace rcPointer := {
            let result := InstanceType rcNew.
            result _
                plane: plane.
            result
        }
    }.

    override method isPolyhedronFace => Boolean8
        := true.

    override method setMaterial: (newMaterial: MaterialDefinitionPtr const ref) ::=> Void := {
        materialAttributes material: newMaterial
    }.

    method buildMeshFor: (engine: EnginePtr) with: (meshBuilder: GenericMeshBuilderPtr const ref) parentTransform: (parentTransform: ReversibleAffineTransform3dF32 const ref) ::=> Void := {
        materialAttributes material ifNotNil: {
            meshBuilder _ currentMaterial: (materialAttributes material _ getOrCreateMaterialFor: engine)
        }.
        meshBuilder _
            beginTriangles.

    	let normalAxis := meshBuilder _ computeNormalAxis: plane normal.
    	let tangent := meshBuilder _ tangentForAxis: normalAxis.
    	let bitangent := meshBuilder _ bitangentForAxis: normalAxis.
    	let textureMatrix := materialAttributes textureTransform.

        vertices do: {:each :: Void |
            let worldVertex := parentTransform transformPosition: each.
            
            let uv := Float32x2 x: (tangent dot: worldVertex) y: (bitangent dot: worldVertex).
            meshBuilder _ addP: each N: plane normal TC: (textureMatrix * Float32x3(uv, 1)) xy
        }.

        2 until: (vertices size castTo: UInt32) do: {:(UInt32)index :: Void |
            meshBuilder _ addI1: 0 i2: index - 1 i3: index
        }.
    }.

    method sortVerticesCounterClockwise => Void := {
        vertices ifEmpty: {return: void}.

        let centroid mutable := Float32x3 zeros.
        vertices do: {:each :: Void |
            centroid := centroid + each
        }.
        centroid := centroid / (vertices size castTo: Float32).

        vertices sortWith: {:(Float32x3 const ref)a :(Float32x3 const ref)b :: Boolean8 |
            let u := a - centroid.
            let v := b - centroid.
            ((u cross: v) dot: plane normal) >= 0
        }
    }.
}.

compileTime constant PolyhedronFacePtr := PolyhedronFace rcPointer.

}. ## namespace MapDefinition
}. ## namespace Woden
