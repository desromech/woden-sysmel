namespace Woden definition: {
namespace MapDefinition definition: {

useNamespace: Std Serialization.
useNamespace: Std Graphics Core.
useNamespace: Std Math.
useNamespace: Std Math Geometry.

class LevelLoadingContext definition: {
    field textures type: Std Collections Vector(TextureDefinitionRef).
    field materials type: Std Collections Vector(MaterialDefinitionRef).

    method addTexture: (texture: TextureDefinitionRef const ref) ::=> Void := {
        textures add: texture
    }.

    method getTextureWithIndex: (index: Int32) ::=> TextureDefinitionRef := {
        index < 1 ifTrue: {return: TextureDefinitionRef nil}.

        let actualIndex := index - 1 castTo: UIntPointer.
        actualIndex >= textures size ifTrue: {return: TextureDefinitionRef nil}.

        textures[actualIndex]
    }.

    method addMaterial: (material: MaterialDefinitionRef const ref) ::=> Void := {
        materials add: material
    }.

    method getMaterialWithIndex: (index: Int32) ::=> MaterialDefinitionRef := {
        index < 1 ifTrue: {return: MaterialDefinitionRef nil}.

        let actualIndex := index - 1 castTo: UIntPointer.
        actualIndex >= materials size ifTrue: {return: MaterialDefinitionRef nil}.

        materials[actualIndex]
    }.
}.

LevelElementDefinition extend: {
    meta definition: {
        static method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> LevelElementDefinition rcRef := {
            let typeName := domObject getString: "type" asMutableString default: "" asMutableString.
            let resultInstance := typeName asArraySlice selectCase: #{
            "Level" : (LevelDefinition new upCastFor: LevelElementDefinition).
            "Sector" : (SectorDefinition new upCastFor: LevelElementDefinition).
            "SectorLayer" : (SectorLayerDefinition new upCastFor: LevelElementDefinition).
            "Entity" : (EntityDefinition new upCastFor: LevelElementDefinition).
            "BoxCollisionComponent" : (BoxCollisionShape new upCastFor: LevelElementDefinition).
            "PolygonConvexHullCollisionComponent" : (PolygonConvexHullCollisionShape new upCastFor: LevelElementDefinition).
            "ConvexHullCollisionComponent" : (ConvexHullCollisionShape new upCastFor: LevelElementDefinition).
            "PolyhedronConvexHullCollisionComponent" : (ConvexHullCollisionShape new upCastFor: LevelElementDefinition).
            "RectangleCollisionComponent" : (RectangleCollisionShape new upCastFor: LevelElementDefinition).
            "RectangleVisualComponent" : (RectangleVisualComponent new upCastFor: LevelElementDefinition).
            "BoxVisualComponent" : (BoxVisualComponent new upCastFor: LevelElementDefinition).
            "PolyhedronFace" : (PolyhedronFace new upCastFor: LevelElementDefinition).
            "ConvexPolyhedronVisualComponent" : (ConvexPolyhedronVisualComponent new upCastFor: LevelElementDefinition).
            "ConvexPolygonVisualComponent" : (ConvexPolygonVisualComponent new upCastFor: LevelElementDefinition).
            "DirectionalLightSourceVisualComponent" : (DirectionalLightSourceVisualComponent new upCastFor: LevelElementDefinition).
            "PointLightSourceVisualComponent" : (PointLightSourceVisualComponent new upCastFor: LevelElementDefinition).
            "SpotLightSourceVisualComponent" : (SpotLightSourceVisualComponent new upCastFor: LevelElementDefinition).
            "MetallicRoughnessMaterial" : (MetallicRoughnessMaterialDefinition new upCastFor: LevelElementDefinition).
            "FileReferenceMaterial" : (FileReferenceMaterialDefinition new upCastFor: LevelElementDefinition).
            _ : LevelElementDefinitionRef nil
            }.

            resultInstance ifNotNil: {
                resultInstance loadFromDOM: domObject context: context
            }.

            resultInstance
        }.
    }.

    virtual method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        name := domObject getString: "name" asMutableString default: "" asMutableString.
    }.
}.

LevelDefinition extend: {
    meta extend: {
        static method loadFromFile: (fileReference: Std FileReference const ref) ::=> LevelDefinition rcRef := {
            let context mutable type: LevelLoadingContext.
            let extension := fileReference extension.
            extension = "wlevel" || extension = "wtlevel" ifTrue: {
                let inputReadStream := fileReference binaryReadStream.
                inputReadStream ifNil: {return: LevelDefinitionRef nil}.

                let domValue := extension = "wtlevel"
                    ifTrue: {JSON ValueParser parseStream: inputReadStream getPointer}
                    ifFalse: {MessagePack ValueDecoder decodeStream: inputReadStream getPointer}.

                let result := LevelElementDefinition loadFromDOM: (domValue get: DOM ObjectPtr) _ context: context.
                result isNotNil && result isLevel ifTrue: {
                    return: (result downCastFor: LevelDefinition)
                }.

                return: LevelDefinitionRef nil
            }.

            LevelDefinitionRef nil
        }
    }.

    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        domObject at: "textures" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            (value get: DOM ListPtr) _ do: {:each :: Void |
                let texture := LevelElementDefinition loadFromDOM: (each get: DOM ObjectPtr) _ context: context.
                context addTexture: (texture downCastFor: TextureDefinition)
            }
        }.

        domObject at: "materials" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            (value get: DOM ListPtr) _ do: {:each :: Void |
                let material := LevelElementDefinition loadFromDOM: (each get: DOM ObjectPtr) _ context: context.
                context addMaterial: (material downCastFor: MaterialDefinition)
            }
        }.

        domObject at: "sectors" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            (value get: DOM ListPtr) _ do: {:each :: Void |
                let sector := LevelElementDefinition loadFromDOM: (each get: DOM ObjectPtr) _ context: context.
                sector isNotNil && sector isSector ifTrue: {
                    self addSector: (sector downCastFor: SectorDefinition)
                }
            }
        }.
    }.
}.

SectorDefinition extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.
        isSector2D := domObject getBoolean8: "isSector2D" asMutableString default: isSector2D.

        domObject at: "layers" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            (value get: DOM ListPtr) _ do: {:each :: Void |
                let layer := LevelElementDefinition loadFromDOM: (each get: DOM ObjectPtr) _ context: context.
                layer isNotNil && layer isSectorLayer ifTrue: {
                    self addLayer: (layer downCastFor: SectorLayerDefinition)
                }
            }
        }.
    }.
}.

SectorLayerDefinition extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.
        layerMinZ := domObject getFloat32: "layerMinZ" asMutableString default: layerMinZ.
        layerMaxZ := domObject getFloat32: "layerMaxZ" asMutableString default: layerMaxZ.

        domObject at: "children" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            (value get: DOM ListPtr) _ do: {:each :: Void |
                let entity := LevelElementDefinition loadFromDOM: (each get: DOM ObjectPtr) _ context: context.
                entity isNotNil && entity isEntity ifTrue: {
                    self addEntity: (entity downCastFor: EntityDefinition)
                }
            }
        }.
    }.
}.

EntityDefinition extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        className := domObject getString: "className" asMutableString default: "" asMutableString.
        self
            scale: (domObject getFloat32x3: "scale" asMutableString default: 1);
            orientation: (QuaternionF32 xyzw: (domObject getFloat32x4: "orientation" asMutableString default: Float32x4(0, 0, 0, 1)));
            position: (domObject getFloat32x3: "position" asMutableString default: 0);
        is2DEntity := (domObject getString: "dimensions" asMutableString default: "" asMutableString) asArraySlice = "2D".

        domObject at: "localBoundingBox" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let boxObject := (value get: DOM ObjectPtr) _.
            localBoundingBox := BoxF32 min: (boxObject getFloat32x3: "min" asMutableString) max: (boxObject getFloat32x3: "max" asMutableString)
        }.

        domObject at: "components" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            (value get: DOM ListPtr) _ do: {:each :: Void |
                let component := LevelElementDefinition loadFromDOM: (each get: DOM ObjectPtr) _ context: context.
                component isNotNil && component isEntityComponent ifTrue: {
                    self addComponent: (component downCastFor: EntityComponentDefinition)
                }
            }
        }.
    }.
}.

RectangleCollisionShape extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        domObject at: "rectangle" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let rectObject ref := (value get: DOM ObjectPtr) _.
            let rectangle := RectangleF32 min: (rectObject getFloat32x2: "min" asMutableString) max: (rectObject getFloat32x2: "max" asMutableString).

            ## FIXME: support displaced rectangles.
            halfExtent := rectangle halfExtent.
        }.
    }.
}.

FaceMaterialAttributes extend: {
    method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        material := context getMaterialWithIndex: (domObject getInt32: "material" asMutableString default: 0).
        scale := domObject getFloat32x2: "scale" asMutableString default: scale.
        offset := domObject getFloat32x2: "offset" asMutableString default: offset.
        rotation := domObject getFloat32: "rotation" asMutableString default: rotation.
    }
}.

RectangleVisualComponent extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        domObject at: "rectangle" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let rectObject ref := (value get: DOM ObjectPtr) _.
            rectangle := RectangleF32 min: (rectObject getFloat32x2: "min" asMutableString) max: (rectObject getFloat32x2: "max" asMutableString)
        }.

        domObject at: "material" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            materialAttributes loadFromDOM: (value get: DOM ObjectPtr) _ context: context
        }.
    }.
}.

BoxVisualComponent extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        domObject at: "box" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let boxObject ref := (value get: DOM ObjectPtr) _.
            box := BoxF32 min: (boxObject getFloat32x3: "min" asMutableString) max: (boxObject getFloat32x3: "max" asMutableString).
        }.

        domObject at: "material" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            materialAttributes loadFromDOM: (value get: DOM ObjectPtr) _ context: context
        }.
    }.
}.

BoxCollisionShape extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        domObject at: "box" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let boxObject ref := (value get: DOM ObjectPtr) _.
            let box := BoxF32 min: (boxObject getFloat32x3: "min" asMutableString) max: (boxObject getFloat32x3: "max" asMutableString).

            ## FIXME: support displaced boxes.
            halfExtent := box halfExtent.
        }.
    }.
}.

PolygonConvexHullCollisionShape extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        domObject at: "points" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let list ref := (value get: DOM ListPtr) _.
            points reserve: list size.
            list do: {:each :: Void |
                points add: DOM valueToFloat32x2(each)
            }
        }.

        self computeBoundingRectangle
    }.
}.

ConvexHullCollisionShape extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        domObject at: "points" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let list ref := (value get: DOM ListPtr) _.
            points reserve: list size.
            list do: {:each :: Void |
                points add: DOM valueToFloat32x3(each)
            }
        }.

        domObject at: "planes" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let list ref := (value get: DOM ListPtr) _.
            planes reserve: list size.
            list do: {:each :: Void |
                let planeData := DOM valueToFloat32x4(each).
                planes add: (PlaneF32 normal: planeData xyz distance: planeData w negated)
            }
        }.

        self computeBoundingBox
    }.
}.

PolyhedronFace extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        let planeData := domObject getFloat32x4: "plane" asMutableString default: Float32x4(plane normal, plane distance negated).
        plane := PlaneF32 normal: planeData xyz distance: planeData w negated.

        domObject at: "vertices" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let list ref := (value get: DOM ListPtr) _.
            vertices reserve: list size.
            list do: {:each :: Void |
                vertices add: DOM valueToFloat32x3(each)
            }
        }.

        domObject at: "material" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            materialAttributes loadFromDOM: (value get: DOM ObjectPtr) _ context: context
        }.
    }.
}.

ConvexPolyhedronVisualComponent extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        domObject at: "boundingBox" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let boxObject ref := (value get: DOM ObjectPtr) _.
            boundingBox := BoxF32 min: (boxObject getFloat32x3: "min" asMutableString) max: (boxObject getFloat32x3: "max" asMutableString).
        }.

        domObject at: "vertices" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let list ref := (value get: DOM ListPtr) _.
            vertices reserve: list size.
            list do: {:each :: Void |
                vertices add: DOM valueToFloat32x3(each)
            }
        }.

        domObject at: "faces" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let list ref := (value get: DOM ListPtr) _.
            faces reserve: list size.
            list do: {:each :: Void |
                let each := LevelElementDefinition loadFromDOM: (each get: DOM ObjectPtr) _ context: context.
                each isNotNil && each isPolyhedronFace ifTrue: {
                    faces add: (each downCastFor: PolyhedronFace)
                }
            }
        }.
    }.
}.

PolygonFaceAttributes extend: {
    method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        domObject at: "material" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            materialAttributes loadFromDOM: (value get: DOM ObjectPtr) _ context: context
        }.
    }.
}.

ConvexPolygonVisualComponent extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        domObject at: "boundingRectangle" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let rectangleObject ref := (value get: DOM ObjectPtr) _.
            boundingRectangle := RectangleF32 min: (rectangleObject getFloat32x2: "min" asMutableString) max: (rectangleObject getFloat32x2: "max" asMutableString).
        }.

        domObject at: "vertices" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let list ref := (value get: DOM ListPtr) _.
            vertices reserve: list size.
            list do: {:each :: Void |
                vertices add: DOM valueToFloat32x2(each)
            }
        }.

        domObject at: "topFace" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            topFaceAttributes loadFromDOM: (value get: DOM ObjectPtr) _ context: context
        }.

        domObject at: "bottomFace" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            bottomFaceAttributes loadFromDOM: (value get: DOM ObjectPtr) _ context: context
        }.

        domObject at: "sideFace" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            sideFaceAttributes loadFromDOM: (value get: DOM ObjectPtr) _ context: context
        }.
    }.
}.

LightSourceVisualComponent extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        color := domObject getFloat32x3: "color" asMutableString default: color.
        intensity := domObject getFloat32: "intensity" asMutableString default: intensity.
        castShadows := domObject getBoolean8: "castShadows" asMutableString default: castShadows.
    }.
}.

PointLightSourceVisualComponent extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        radius := domObject getFloat32: "radius" asMutableString default: intensity.
    }.
}.

SpotLightSourceVisualComponent extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        outerCutOffAngle := domObject getFloat32: "outerCutOffAngle" asMutableString default: outerCutOffAngle.
        innerCutOffAngle := domObject getFloat32: "innerCutOffAngle" asMutableString default: innerCutOffAngle.
        exponent := domObject getFloat32: "exponent" asMutableString default: exponent.
    }.
}.

MetallicRoughnessMaterialDefinition extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        baseColorTexture := context getTextureWithIndex: (domObject getInt32: "baseColorTexture" asMutableString default: 0).
        emissionTexture := context getTextureWithIndex: (domObject getInt32: "emissionTexture" asMutableString default: 0).
        normalTexture := context getTextureWithIndex: (domObject getInt32: "normalTexture" asMutableString default: 0).
        occlusionMetallicRougnessTexture := context getTextureWithIndex: (domObject getInt32: "occlusionMetallicRougnessTexture" asMutableString default: 0).

        baseColorFactor := domObject getFloat32x4: "baseColorFactor" asMutableString default: baseColorFactor.
        emissionFactor := domObject getFloat32x3: "emissionFactor" asMutableString default: emissionFactor.
        occlusionFactor := domObject getFloat32: "occlusionFactor" asMutableString default: (occlusionMetallicRougnessTexture ifNil: {occlusionFactor} ifNotNil: {1.0f}).
        roughnessFactor := domObject getFloat32: "roughnessFactor" asMutableString default: (occlusionMetallicRougnessTexture ifNil: {roughnessFactor} ifNotNil: {1.0f}).
        metallicFactor := domObject getFloat32: "metallicFactor" asMutableString default: (occlusionMetallicRougnessTexture ifNil: {metallicFactor} ifNotNil: {1.0f}).
    }.
}.

FileReferenceMaterialDefinition extend: {
    override method loadFromDOM: (domObject: DOM Object const ref) context: (context: LevelLoadingContext ref) ::=> Void := {
        super loadFromDOM: domObject context: context.

        path := domObject getString: "path" asMutableString default: "" asMutableString.
    }.
}.

}. ## namespace MapDefinition
}. ## namespace Woden
