namespace Woden definition: {
namespace MapDefinition definition: {

useNamespace: Stdn Serialization.
useNamespace: Stdn Graphics Core.
useNamespace: Stdn Math.
useNamespace: Stdn Math Geometry.

LevelElementDefinition extend: {
    meta definition: {
        static method loadFromJson: (jsonObject: JSON Object const ref) ::=> LevelElementDefinition sharedPointer := {
            let typeName := jsonObject getString: "type" asMutableString default: "" asMutableString.
            let resultInstance := typeName asArraySlice selectCase: #{
            "Level" : (LevelDefinition sharedNew upCastFor: LevelElementDefinition).
            "Sector" : (SectorDefinition sharedNew upCastFor: LevelElementDefinition).
            "SectorLayer" : (SectorLayerDefinition sharedNew upCastFor: LevelElementDefinition).
            "Entity" : (EntityDefinition sharedNew upCastFor: LevelElementDefinition).
            "BoxCollisionComponent" : (BoxCollisionShape sharedNew upCastFor: LevelElementDefinition).
            "RectangleCollisionComponent" : (RectangleCollisionShape sharedNew upCastFor: LevelElementDefinition).
            "RectangleVisualComponent" : (RectangleVisualComponent sharedNew upCastFor: LevelElementDefinition).
            "BoxVisualComponent" : (BoxVisualComponent sharedNew upCastFor: LevelElementDefinition).
            "DirectionalLightSourceVisualComponent" : (DirectionalLightSourceVisualComponent sharedNew upCastFor: LevelElementDefinition).
            "PointLightSourceVisualComponent" : (PointLightSourceVisualComponent sharedNew upCastFor: LevelElementDefinition).
            "SpotLightSourceVisualComponent" : (SpotLightSourceVisualComponent sharedNew upCastFor: LevelElementDefinition).
            _ : LevelElementDefinitionPtr nil
            }.

            resultInstance ifNotNil: {
                resultInstance _ loadFromJson: jsonObject
            }.

            resultInstance
        }.
    }.

    virtual method loadFromJson: (jsonObject: JSON Object const ref) ::=> Void := {
        name := jsonObject getString: "name" asMutableString default: "" asMutableString.
    }.
}.

LevelDefinition extend: {
    meta extend: {
        static method loadFromFile: (fileReference: Stdn FileReference const ref) ::=> LevelDefinition sharedPointer := {
            fileReference extension = "wlevel" ifTrue: {
                let jsonReadStream := fileReference binaryReadStream.
                jsonReadStream ifNil: {return: LevelDefinitionPtr nil}.

                let jsonValue := JSON ValueParser parseStream: jsonReadStream getPointer.
                let result := LevelElementDefinition loadFromJson: (jsonValue get: JSON ObjectPtr) _.
                result isNotNil && result _ isLevel ifTrue: {
                    return: (result downCastFor: LevelDefinition)
                }.

                return: LevelDefinitionPtr nil
            }.

            LevelDefinitionPtr nil
        }
    }.

    override method loadFromJson: (jsonObject: JSON Object const ref) ::=> Void := {
        super loadFromJson: jsonObject.
        jsonObject at: "sectors" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            (value get: JSON ListPtr) _ do: {:each :: Void |
                let sector := LevelElementDefinition loadFromJson: (each get: JSON ObjectPtr) _.
                sector isNotNil && sector _ isSector ifTrue: {
                    self addSector: (sector downCastFor: SectorDefinition)
                }
            }
        }.
    }.
}.

SectorDefinition extend: {
    override method loadFromJson: (jsonObject: JSON Object const ref) ::=> Void := {
        super loadFromJson: jsonObject.
        isSector2D := jsonObject getBoolean8: "isSector2D" asMutableString default: isSector2D.

        jsonObject at: "layers" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            (value get: JSON ListPtr) _ do: {:each :: Void |
                let layer := LevelElementDefinition loadFromJson: (each get: JSON ObjectPtr) _.
                layer isNotNil && layer _ isSectorLayer ifTrue: {
                    self addLayer: (layer downCastFor: SectorLayerDefinition)
                }
            }
        }.
    }.
}.

SectorLayerDefinition extend: {
    override method loadFromJson: (jsonObject: JSON Object const ref) ::=> Void := {
        super loadFromJson: jsonObject.
        defaultMinZ := jsonObject getFloat32: "defaultMinZ" asMutableString default: defaultMinZ.
        defaultMaxZ := jsonObject getFloat32: "defaultMaxZ" asMutableString default: defaultMaxZ.

        jsonObject at: "children" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            (value get: JSON ListPtr) _ do: {:each :: Void |
                let entity := LevelElementDefinition loadFromJson: (each get: JSON ObjectPtr) _.
                entity isNotNil && entity _ isEntity ifTrue: {
                    self addEntity: (entity downCastFor: EntityDefinition)
                }
            }
        }.
    }.
}.

EntityDefinition extend: {
    override method loadFromJson: (jsonObject: JSON Object const ref) ::=> Void := {
        super loadFromJson: jsonObject.

        className := jsonObject getString: "className" asMutableString default: "" asMutableString.
        position := jsonObject getFloat32x3: "position" asMutableString default: 0.
        orientation := QuaternionF32 xyzw: (jsonObject getFloat32x4: "orientation" asMutableString default: Float32x4(0, 0, 0, 1)).

        jsonObject at: "localBoundingBox" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            let boxObject := (value get: JSON ObjectPtr) _.
            localBoundingBox := BoxF32 min: (boxObject getFloat32x3: "min" asMutableString) max: (boxObject getFloat32x3: "max" asMutableString)
        }.

        jsonObject at: "components" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            (value get: JSON ListPtr) _ do: {:each :: Void |
                let component := LevelElementDefinition loadFromJson: (each get: JSON ObjectPtr) _.
                component isNotNil && component _ isEntityComponent ifTrue: {
                    self addComponent: (component downCastFor: EntityComponentDefinition)
                }
            }
        }.
    }.
}.

RectangleCollisionShape extend: {
    override method loadFromJson: (jsonObject: JSON Object const ref) ::=> Void := {
        super loadFromJson: jsonObject.

        jsonObject at: "rectangle" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            let rectObject := (value get: JSON ObjectPtr) _.
            let rectangle := RectangleF32 min: (rectObject getFloat32x2: "min" asMutableString) max: (rectObject getFloat32x2: "max" asMutableString).

            ## FIXME: support displaced rectangles.
            halfExtent := rectangle halfExtent.
        }.
    }.
}.

RectangleVisualComponent extend: {
    override method loadFromJson: (jsonObject: JSON Object const ref) ::=> Void := {
        super loadFromJson: jsonObject.

        color := jsonObject getFloat32x4: "color" asMutableString default: color.

        jsonObject at: "rectangle" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            let rectObject := (value get: JSON ObjectPtr) _.
            rectangle := RectangleF32 min: (rectObject getFloat32x2: "min" asMutableString) max: (rectObject getFloat32x2: "max" asMutableString)
        }.
    }.
}.

BoxCollisionShape extend: {
    override method loadFromJson: (jsonObject: JSON Object const ref) ::=> Void := {
        super loadFromJson: jsonObject.

        jsonObject at: "box" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            let boxObject := (value get: JSON ObjectPtr) _.
            let box := BoxF32 min: (boxObject getFloat32x3: "min" asMutableString) max: (boxObject getFloat32x3: "max" asMutableString).

            ## FIXME: support displaced boxes.
            halfExtent := box halfExtent.
        }.
    }.
}.

BoxVisualComponent extend: {
    override method loadFromJson: (jsonObject: JSON Object const ref) ::=> Void := {
        super loadFromJson: jsonObject.

        color := jsonObject getFloat32x4: "color" asMutableString default: color.

        jsonObject at: "box" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            let boxObject := (value get: JSON ObjectPtr) _.
            box := BoxF32 min: (boxObject getFloat32x3: "min" asMutableString) max: (boxObject getFloat32x3: "max" asMutableString).
        }.
    }.
}.

LightSourceVisualComponent extend: {
    override method loadFromJson: (jsonObject: JSON Object const ref) ::=> Void := {
        super loadFromJson: jsonObject.

        color := jsonObject getFloat32x3: "color" asMutableString default: color.
        intensity := jsonObject getFloat32: "intensity" asMutableString default: intensity.
        castShadows := jsonObject getBoolean8: "castShadows" asMutableString default: castShadows.
    }.
}.

PointLightSourceVisualComponent extend: {
    override method loadFromJson: (jsonObject: JSON Object const ref) ::=> Void := {
        super loadFromJson: jsonObject.

        radius := jsonObject getFloat32: "radius" asMutableString default: intensity.
    }.
}.

SpotLightSourceVisualComponent extend: {
    override method loadFromJson: (jsonObject: JSON Object const ref) ::=> Void := {
        super loadFromJson: jsonObject.

        outerCutOffAngle := jsonObject getFloat32: "outerCutOffAngle" asMutableString default: outerCutOffAngle.
        innerCutOffAngle := jsonObject getFloat32: "innerCutOffAngle" asMutableString default: innerCutOffAngle.
        exponent := jsonObject getFloat32: "exponent" asMutableString default: exponent.
    }.
}.

}. ## namespace MapDefinition
}. ## namespace Woden
