namespace Woden definition: {
namespace ForwardRenderer definition: {

useNamespace: Woden Runtime.
useNamespace: Stdn Graphics Core.

#**
 * An abstract pipeline for rendering a null scene.
 *#
class ForwardSceneRenderingContext superclass: SceneRenderingContext; definition: {
    public field sceneRenderingPipeline type: ForwardSceneRenderingPipeline pointer.

    method device => RenderingDevicePtr const ref
        := sceneRenderingPipeline _ engine _ renderingDevice.

    override method uploadDeformationState: (deformationStateData: Void const pointer) size: (deformationStateSize: UIntPointer) on: (deformationStateCache: DeformationStateCache ref) ::=> Boolean8 := {
        deformationStateCache buffers isCreated ifFalse: {
            let engine := sceneRenderingPipeline _ engine.

            deformationStateCache buffers for: engine createWithDescription: (BufferDescription()
                size: deformationStateSize;
                heapType: MemoryHeapType HostToDevice;
                usageModes: BufferUsageMode Uniform;
                mainUsageMode: BufferUsageMode Uniform;
                mappingFlags: BufferMappingFlags DynamicStorage;
                yourself
            ) initialData: nil.

            deformationStateCache bindings for: engine createForShaderSignature: sceneRenderingPipeline _ shaderSignature bindingSet: 4.
            deformationStateCache bindings bindings doWithIndex: {:each :index :: Void |
                each _ bindOn: 0 uniformBuffer: deformationStateCache buffers buffers[index]
            }.
        }.

        deformationStateCache buffers current _ uploadAt: 0 size: deformationStateSize data: deformationStateData.
        true
    }.

    override method uploadAndActivateDeformationState: (deformationStateData: Void const pointer) size: (deformationStateSize: UIntPointer) on: (deformationStateCache: DeformationStateCache ref) ::=> Boolean8 := {
        (self uploadDeformationState: deformationStateData size: deformationStateSize on: deformationStateCache) && {
            stateTracker _
                useGraphicShaderBindings: deformationStateCache bindings current.
            true
        }
    }.

    override method activateUnlitMaterial: (material: UnlitMaterial ref) ::=> Boolean8 := {
        false
    }.

    method validateMetallicRoughnessMaterialStateBinding: (material: MetallicRoughnessMaterial ref) ::=> Boolean8 := {
        material stateBinding ifNil: {
            material stateBuffer := self device _ createBuffer: (BufferDescription()
                size: Woden Shaders MetallicRoughnessMaterialStateData instanceSize;
                heapType: MemoryHeapType DeviceLocal;
                usageModes: BufferUsageMode Uniform;
                mainUsageMode: BufferUsageMode Uniform;
                mappingFlags: BufferMappingFlags DynamicStorage;
                yourself
            ) initialData: material state address.

            material stateBinding := self createMaterialStateBinding.
            material stateBinding _
                bindOn: 0 uniformBuffer: material stateBuffer;
                bindOn: 1 sampledTextureWithView: material validBaseColorTexture;
                bindOn: 2 sampledTextureWithView: material validNormalTexture;
                bindOn: 3 sampledTextureWithView: material validEmissionTexture;
                bindOn: 4 sampledTextureWithView: material validOcclusionTexture;
                bindOn: 5 sampledTextureWithView: material validMetallicRoughnessTexture.
        }.

        true
    }.

    override method activateMetallicRoughnessMaterial: (material: MetallicRoughnessMaterial ref) ::=> Boolean8 := {
        material doubleSided ifTrue: {
            self materialFaceCullingMode: FaceCullingMode None
        }.

        (self validateMetallicRoughnessMaterialStateBinding: material) ifFalse: {
            return: false.
        }.

        material isTranslucent ifTrue: {
            renderPass isDepthPass ifTrue: {return: false}.
            self materialBlendingEquation: BlendingMode CompositePremultipliedAlphaOver asBlendingEquation.
        } ifFalse: {
            self materialBlendingEquation: BlendingMode Copy asBlendingEquation.
        }.

        stateTracker _
            useGraphicShaderBindings: material stateBinding.

        let hasColor0 := self hasColor0VertexAttribute.
        let hasTangent4 := self hasTangent4VertexAttribute && renderPass isDepthOnlyPass not.
        let hasSkinning := self hasSkinningParameters.

        stateTracker _
            vertexShader: ((hasSkinning, hasColor0, hasTangent4) selectCase: #{
            (false, false, false) : Woden Shaders MetallicRoughnessMaterialShaders(false, false, false) vertex shaderEntryPointInfo address.
            (false, false, true) : Woden Shaders MetallicRoughnessMaterialShaders(false, false, true) vertex shaderEntryPointInfo address.
            (false, true, false) : Woden Shaders MetallicRoughnessMaterialShaders(false, true, false) vertex shaderEntryPointInfo address.
            (false, true, true) : Woden Shaders MetallicRoughnessMaterialShaders(false, true, true) vertex shaderEntryPointInfo address.

            (true, false, false) : Woden Shaders MetallicRoughnessMaterialShaders(true, false, false) vertex shaderEntryPointInfo address.
            (true, false, true) : Woden Shaders MetallicRoughnessMaterialShaders(true, false, true) vertex shaderEntryPointInfo address.
            (true, true, false) : Woden Shaders MetallicRoughnessMaterialShaders(true, true, false) vertex shaderEntryPointInfo address.
            (true, true, true) : Woden Shaders MetallicRoughnessMaterialShaders(true, true, true) vertex shaderEntryPointInfo address.
            }
        ).

        renderPass isDepthPass ifTrue: {
            renderPass isDepthNormalPass ifTrue: {
                stateTracker _
                    fragmentShader: Woden Shaders MetallicRoughnessMaterialShaders(false, false, false) surfaceNormalValueFragment shaderEntryPointInfo address.
            } ifFalse: {
                material hasAlphaMask ifTrue: {
                    stateTracker _
                        fragmentShader: Woden Shaders MetallicRoughnessMaterialShaders(false, false, false) alphaTestingFragment shaderEntryPointInfo address.
                } ifFalse: {
                    stateTracker _
                        fragmentShader: nil.
                }.
            }.
        } ifFalse: {
            material normalTexture isNotNil && hasTangent4 ifTrue: {
                stateTracker _
                    fragmentShader: Woden Shaders MetallicRoughnessMaterialShaders(false, false, true) fragment shaderEntryPointInfo address.
            } ifFalse: {
                stateTracker _
                    fragmentShader: Woden Shaders MetallicRoughnessMaterialShaders(false, false, false) fragment shaderEntryPointInfo address.
            }.
        }.

        true
    }.

    override method activateSkyMaterial: (material: SkyMaterial ref) ::=> Boolean8 := {
        renderPass isDepthPass ifTrue: { return: false. }.

        material stateBinding ifNil: {
            material stateBinding := self createMaterialStateBinding.
            material stateBinding _
                bindOn: 1 sampledTextureWithView: material validTexture.
        }.

        stateTracker _
            useGraphicShaderBindings: material stateBinding;
            vertexShader: Woden Shaders SkyMaterialShaders vertex shaderEntryPointInfo address;
            fragmentShader: Woden Shaders SkyMaterialShaders fragment shaderEntryPointInfo address.

        true
    }.

    override method activateWaterMaterial: (material: WaterMaterial ref) ::=> Boolean8 := {
        renderPass isDepthPass ifTrue: { return: false. }.

        ## Always double sided.
        self materialFaceCullingMode: FaceCullingMode None.
        self materialBlendingEquation: BlendingMode CompositePremultipliedAlphaOver asBlendingEquation.

        (self validateMetallicRoughnessMaterialStateBinding: material) ifFalse: {
            return: false.
        }.

        stateTracker _
            useGraphicShaderBindings: material stateBinding;
            vertexShader: Woden Shaders WaterMaterialShaders vertex shaderEntryPointInfo address;
            fragmentShader: Woden Shaders WaterMaterialShaders fragment shaderEntryPointInfo address.
        true
    }.

    method createMaterialStateBinding => ShaderResourceBindingsPtr
        := sceneRenderingPipeline _ shaderSignature _ createShaderResourceBindings: 5
}.

}. ## End of namespace ForwardRenderer
}. ## End of namespace Woden
