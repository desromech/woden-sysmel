namespace Woden definition: {
namespace ForwardRenderer definition: {

useNamespace: Woden Runtime.
useNamespace: Std Graphics Core.
useNamespace: Std Graphics GUI.
useNamespace: Std Math Geometry.
useNamespace: Std Math LinearAlgebra.

#**
 * An abstract pipeline for rendering a null scene.
 *#
class ForwardSceneRenderingPipelineViewport superclass: SceneRenderingPipelineViewport; definition: {
    compileTime constant ShadowMapTextureLayers := ForwardSceneRenderingPipeline ShadowMapTextureLayers.

    public field leftEyeViewport type: ForwardSceneRenderingPipelineViewportEye.
    public field rightEyeViewport type: ForwardSceneRenderingPipelineViewportEye.
    public field sceneRenderingPipeline type: ForwardSceneRenderingPipelinePtr.

    public field currentExtent type: UInt32x2.
    public field renderingCommandQueue type: CommandQueuePtr.
    public field stateTrackers type: FrameBufferedStateTracker.

    public field depthNormalFramebuffer type: FramebufferPtr.
    public field depthNormalRenderPass type: RenderPassPtr.

    public field renderDepthBufferTextureView type: TextureViewPtr.
    public field decodedDepthBufferTextureView type: TextureViewPtr.
    public field decodeDepthFramebuffer type: FramebufferPtr.
    public field decodeDepthRenderPass type: RenderPassPtr.
    public field decodeDepthBinding type: ShaderResourceBindingsPtr.

    public field renderNormalBufferTexture type: TexturePtr.
    public field normalBufferTexture type: TexturePtr.
    public field normalBufferTextureView type: TextureViewPtr.

    public field ssaoQuality type: ScreenSpaceAmbientOcclusionQualitySetting.
    public field multiSampleCount type: UInt32.

    public field ssaoTextureExtent type: UInt32x2.
    public field ssaoTextureView type: TextureViewPtr.
    public field ssaoFramebuffer type: FramebufferPtr.
    public field ssaoPingTextureView type: TextureViewPtr.
    public field ssaoPingFramebuffer type: FramebufferPtr.
    public field ssaoComputationRenderPass type: RenderPassPtr.
    public field ssaoComputationBinding type: ShaderResourceBindingsPtr.
    public field ssaoBlurPingBinding type: ShaderResourceBindingsPtr.
    public field ssaoBlurPongBinding type: ShaderResourceBindingsPtr.

    public field hdrColorFramebuffer type: FramebufferPtr.
    public field renderHDRColorBuffer type: TexturePtr.
    public field resolveHDRColorBuffer type: TexturePtr.
    public field hdrColorRenderPass type: RenderPassPtr.
    public field hdrColorBufferBinding type: ShaderResourceBindingsPtr.

    protected field eyeReadbackBufferPitch type: UIntPointer.
    protected field eyeReadbackBufferSlicePitch type: UIntPointer.
    protected field eyeReadbackBufferSize type: UIntPointer.
    protected field eyeReadbackBuffer type: BufferPtr.

    protected field dumpFrameCount type: UIntPointer.

    protected field leftEyeFramebuffer type: FramebufferPtr.
    protected field leftEyeTexture type: TexturePtr.
    protected field leftEyeTextureView type: TextureViewPtr.

    protected field rightEyeFramebuffer type: FramebufferPtr.
    protected field rightEyeTexture type: TexturePtr.
    protected field rightEyeTextureView type: TextureViewPtr.

    protected field eyeCompositionRenderPass type: RenderPassPtr.
    protected field stereoEyeCompositionBinding type: ShaderResourceBindingsPtr.

    protected field currentBackBufferLeftEye type: FramebufferPtr.
    protected field currentBackBufferRightEye type: FramebufferPtr.
    public field currentDisplayRenderPass type: RenderPassPtr.
    public field currentScene2D type: Std Graphics Scene2D NodePtr.

    const inline method engine => EnginePtr
        := sceneRenderingPipeline _ engine.

    method initializeWithSceneRenderingPipeline: (theRenderingPipeline: ForwardSceneRenderingPipelinePtr) ::=> Void := {
        sceneRenderingPipeline := theRenderingPipeline.
        leftEyeViewport viewport: self address.
        rightEyeViewport viewport: self address; isRightEye: true.
    }.

    override method extent: (requiredExtent: UInt32x2) ::=> Void := {
        let renderingSettings ref := self engine _ renderingSettings.

        currentExtent = requiredExtent &&
            hdrColorFramebuffer isNotNil &&
            ssaoQuality = renderingSettings screenSpaceAmbientOcclusionQuality &&
            multiSampleCount = (renderingSettings multiSampleCount max: 1u) ifTrue: {
            return: void
        }.

        ssaoQuality := renderingSettings screenSpaceAmbientOcclusionQuality.

        let isDumpingFrames := self engine _ renderingSettings frameDumping.
        let device := self engine _ renderingDevice.
        renderingCommandQueue ifNotNil: {
            renderingCommandQueue _ waitForIdle
        }.

        let newMultiSampleCount := renderingSettings multiSampleCount max: 1u.
        multiSampleCount = newMultiSampleCount ifFalse: {
            depthNormalRenderPass reset.
            hdrColorRenderPass reset.
        }.

        multiSampleCount := newMultiSampleCount.

        hdrColorFramebuffer reset.

        let renderDepthBuffer := device _ createTexture: (TextureDescription()
            type: TextureType Texture2D;
            width: requiredExtent x;
            height: requiredExtent y;
            depth: 1;
            layers: 1;
            miplevels: 1;
            format: PixelFormat R32_Typeless;
            usageModes: TextureUsageMode Sampled | TextureUsageMode DepthAttachment;
            mainUsageMode: TextureUsageMode Sampled;
            heapType: MemoryHeapType DeviceLocal;
            sampleCount: multiSampleCount;
            yourself).
        let decodedDepthBuffer := device _ createTexture: (TextureDescription()
            type: TextureType Texture2D;
            width: requiredExtent x;
            height: requiredExtent y;
            depth: 1;
            layers: 1;
            miplevels: 1;
            format: PixelFormat R32_Float;
            usageModes: TextureUsageMode Sampled | TextureUsageMode ColorAttachment;
            mainUsageMode: TextureUsageMode Sampled;
            heapType: MemoryHeapType DeviceLocal;
            sampleCount: 1;
            yourself).

        ## We cannot use R10G10B10A2_UNorm for multi-sampled rendering.
        let normalBufferFormat := PixelFormat R10G10B10A2_UNorm.

        renderNormalBufferTexture := device _ createTexture: (TextureDescription()
            type: TextureType Texture2D;
            width: requiredExtent x;
            height: requiredExtent y;
            depth: 1;
            layers: 1;
            miplevels: 1;
            format: normalBufferFormat;
            usageModes: TextureUsageMode Sampled | TextureUsageMode ColorAttachment;
            mainUsageMode: TextureUsageMode Sampled;
            heapType: MemoryHeapType DeviceLocal;
            sampleCount: multiSampleCount;
            yourself).
        normalBufferTexture := renderNormalBufferTexture.
        multiSampleCount > 1u ifTrue: {
            normalBufferTexture := device _ createTexture: (TextureDescription()
                type: TextureType Texture2D;
                width: requiredExtent x;
                height: requiredExtent y;
                depth: 1;
                layers: 1;
                miplevels: 1;
                format: normalBufferFormat;
                usageModes: TextureUsageMode Sampled;
                mainUsageMode: TextureUsageMode Sampled;
                heapType: MemoryHeapType DeviceLocal;
                sampleCount: 1;
                yourself).
        }.

        let depthBufferAttachmentView := {
            let depthBufferAttachmentViewDescription mutable := renderDepthBuffer _ getFullViewDescription.
            depthBufferAttachmentViewDescription
                format: PixelFormat D32_Float;
                usageMode: TextureUsageMode DepthAttachment.
            renderDepthBuffer _ createView: depthBufferAttachmentViewDescription
        }.

        {
            let renderDepthBufferTextureViewDescription mutable := renderDepthBuffer _ getFullViewDescription.
            renderDepthBufferTextureViewDescription format: PixelFormat R32_Float.
            renderDepthBufferTextureView := renderDepthBuffer _ createView: renderDepthBufferTextureViewDescription.
        }.

        decodedDepthBufferTextureView := decodedDepthBuffer _ getOrCreateFullView.
        normalBufferTextureView := normalBufferTexture _ getOrCreateFullView.

        ## Create the depth normal framebuffer.
        {
            let renderNormalBufferTextureView := renderNormalBufferTexture _ getOrCreateFullView.
            let colorAttachments mutable := TextureViewPtr array(renderNormalBufferTextureView).
            depthNormalFramebuffer := device _ createFramebuffer: requiredExtent colorViews: colorAttachments depthStencilView: depthBufferAttachmentView.
        }.

        depthNormalRenderPass ifNil: {
            let colorAttachments mutable := RenderPassColorAttachmentDescription array (
                RenderPassColorAttachmentDescription()
                    format: normalBufferFormat;
                    sampleCount: multiSampleCount;
                    beginAction: RenderPassAttachmentAction Clear;
                    endAction: RenderPassAttachmentAction Keep;
                    clearValue: Float32x4(0.5f, 0.5f, 1.0f, 0.0f);
                    yourself
            ).

            let depthStencilAttachment mutable := RenderPassDepthStencilAttachmentDescription()
                format: PixelFormat D32_Float;
                sampleCount: multiSampleCount;
                beginAction: RenderPassAttachmentAction Clear;
                endAction: RenderPassAttachmentAction Keep;
                yourself.
            depthNormalRenderPass := device _ createRenderPass: colorAttachments depthStencilAttachment: depthStencilAttachment address.
        }.

        ## Create the decode framebuffer render pass.
        {
            let colorAttachments mutable := TextureViewPtr array(decodedDepthBufferTextureView).
            decodeDepthFramebuffer := device _ createFramebuffer: requiredExtent colorViews: colorAttachments depthStencilView: TextureViewPtr nil.
        }.

        decodeDepthBinding ifNil: {
            decodeDepthBinding := sceneRenderingPipeline _ shaderSignature _ createShaderResourceBindings: 5.
        }.
        decodeDepthBinding _
            bindOn: 1 sampledTextureView: renderDepthBufferTextureView.

        decodeDepthRenderPass ifNil: {
            let colorAttachments mutable := RenderPassColorAttachmentDescription array (
                RenderPassColorAttachmentDescription()
                    format: PixelFormat R32_Float;
                    beginAction: RenderPassAttachmentAction Discard;
                    endAction: RenderPassAttachmentAction Keep;
                    yourself
            ).
            decodeDepthRenderPass := device _ createRenderPass: colorAttachments depthStencilAttachment: nil.
        }.

        ## Create the main hdr framebuffer.
        {
            renderHDRColorBuffer := device _ createTexture: (TextureDescription()
                type: TextureType Texture2D;
                width: requiredExtent x;
                height: requiredExtent y;
                depth: 1;
                layers: 1;
                miplevels: 1;
                format: PixelFormat R16G16B16A16_Float;
                usageModes: TextureUsageMode Sampled | TextureUsageMode ColorAttachment;
                mainUsageMode: TextureUsageMode Sampled;
                heapType: MemoryHeapType DeviceLocal;
                sampleCount: multiSampleCount;
                yourself).
            resolveHDRColorBuffer := renderHDRColorBuffer.
            multiSampleCount > 1u ifTrue: {
                resolveHDRColorBuffer := device _ createTexture: (TextureDescription()
                    type: TextureType Texture2D;
                    width: requiredExtent x;
                    height: requiredExtent y;
                    depth: 1;
                    layers: 1;
                    miplevels: 1;
                    format: PixelFormat R16G16B16A16_Float;
                    usageModes: TextureUsageMode Sampled;
                    mainUsageMode: TextureUsageMode Sampled;
                    heapType: MemoryHeapType DeviceLocal;
                    sampleCount: 1;
                    yourself).
            }.

            let renderColorBufferTextureView := renderHDRColorBuffer _ getOrCreateFullView.

            hdrColorBufferBinding ifNil: {
                hdrColorBufferBinding := sceneRenderingPipeline _ shaderSignature _ createShaderResourceBindings: 5.
            }.
            hdrColorBufferBinding _ bindOn: 1 sampledTextureView: resolveHDRColorBuffer _ getOrCreateFullView.

            let colorAttachments mutable := TextureViewPtr array(renderColorBufferTextureView).
            hdrColorFramebuffer := device _ createFramebuffer: requiredExtent colorViews: colorAttachments depthStencilView: depthBufferAttachmentView.
        }.

        ssaoFramebuffer reset.
        ssaoTextureView reset.
        ssaoPingFramebuffer reset.
        ssaoPingTextureView reset.
        ssaoQuality isDisabled ifTrue: {
            ssaoTextureView := self engine _ resourceCache _ whiteTexture _ textureView.
        } ifFalse: {
            self createSSAOBuffersForExtent: requiredExtent.
        }.

        hdrColorRenderPass ifNil: {
            let colorAttachments mutable := RenderPassColorAttachmentDescription array (
                RenderPassColorAttachmentDescription()
                    format: PixelFormat R16G16B16A16_Float;
                    sampleCount: multiSampleCount;
                    beginAction: RenderPassAttachmentAction Clear;
                    endAction: RenderPassAttachmentAction Keep;
                    yourself
            ).

            let depthStencilAttachment mutable := RenderPassDepthStencilAttachmentDescription()
                format: PixelFormat D32_Float;
                sampleCount: multiSampleCount;
                beginAction: RenderPassAttachmentAction Keep;
                endAction: RenderPassAttachmentAction Keep;
                yourself.
            hdrColorRenderPass := device _ createRenderPass: colorAttachments depthStencilAttachment: depthStencilAttachment address.
        }.

        isDumpingFrames ifTrue: {
            eyeReadbackBufferPitch := sceneRenderingPipeline _ swapChainColorBufferFormat bytesPerPixel * requiredExtent x alignedTo: device _ minTextureDataPitchAlignment.
            eyeReadbackBufferSlicePitch := eyeReadbackBufferPitch * requiredExtent y alignedTo: device _ minTextureDataOffsetAlignment.
            eyeReadbackBufferSize := eyeReadbackBufferSlicePitch * FrameBufferingCount.
            stereoPresentationMode isStereoscopic ifTrue: {
                eyeReadbackBufferSize := eyeReadbackBufferSize * 2
            }.

            eyeReadbackBuffer := device _ createBuffer: (BufferDescription()
                size: eyeReadbackBufferSize;
                heapType: MemoryHeapType DeviceToHost;
                usageModes: BufferUsageMode CopyDestinationBuffer;
                mainUsageMode: BufferUsageMode CopyDestinationBuffer;
                mappingFlags: BufferMappingFlags Read;
                yourself) initialData: nil.
        }.

        isDumpingFrames || (stereoPresentationMode isStereoscopic && stereoPresentationMode isMultiLayerSwapChain not) ifTrue: {
            let usageModes := isDumpingFrames
                ifTrue: {TextureUsageMode Sampled | TextureUsageMode ColorAttachment | TextureUsageMode CopySource }
                ifFalse: {TextureUsageMode Sampled | TextureUsageMode ColorAttachment}.
            let eyeTextureDescription := TextureDescription()
                type: TextureType Texture2D;
                width: requiredExtent x;
                height: requiredExtent y;
                depth: 1;
                layers: 1;
                miplevels: 1;
                format: sceneRenderingPipeline _ swapChainColorBufferFormat;
                usageModes: usageModes;
                mainUsageMode: TextureUsageMode Sampled;
                heapType: MemoryHeapType DeviceLocal;
                sampleCount: 1;
                yourself.

            ## Left eye
            {
                leftEyeTexture := device _ createTexture: eyeTextureDescription.
                leftEyeTextureView := leftEyeTexture _ getOrCreateFullView.
                let colorAttachments mutable := TextureViewPtr array(leftEyeTextureView).
                leftEyeFramebuffer := device _ createFramebuffer: requiredExtent colorViews: colorAttachments depthStencilView: TextureViewPtr nil.
            }.

            ## Right eye
            stereoPresentationMode isStereoscopic ifTrue: {
                rightEyeTexture := device _ createTexture: eyeTextureDescription.
                rightEyeTextureView := rightEyeTexture _ getOrCreateFullView.
                let colorAttachments mutable := TextureViewPtr array(rightEyeTextureView).
                rightEyeFramebuffer := device _ createFramebuffer: requiredExtent colorViews: colorAttachments depthStencilView: TextureViewPtr nil.
            } ifFalse: {
                rightEyeTexture := leftEyeTexture.
                rightEyeTextureView := leftEyeTextureView.
                rightEyeFramebuffer := leftEyeFramebuffer.
                void.
            }.

            stereoEyeCompositionBinding ifNil: {
                stereoEyeCompositionBinding := sceneRenderingPipeline _ shaderSignature _ createShaderResourceBindings: 5.
            }.

            self hasStereoscopicPresentationModeWithFlippedEyes ifTrue: {
                stereoEyeCompositionBinding _ bindOn: 1 sampledTextureView: rightEyeTextureView.
                stereoEyeCompositionBinding _ bindOn: 2 sampledTextureView: leftEyeTextureView.
            } ifFalse: {
                stereoEyeCompositionBinding _ bindOn: 1 sampledTextureView: leftEyeTextureView.
                stereoEyeCompositionBinding _ bindOn: 2 sampledTextureView: rightEyeTextureView.
            }.

            eyeCompositionRenderPass ifNil: {
                let colorAttachments mutable := RenderPassColorAttachmentDescription array (
                    RenderPassColorAttachmentDescription()
                        format: sceneRenderingPipeline _ swapChainColorBufferFormat;
                        beginAction: RenderPassAttachmentAction Discard;
                        endAction: RenderPassAttachmentAction Keep;
                        yourself
                ).

                eyeCompositionRenderPass := device _ createRenderPass: colorAttachments depthStencilAttachment: nil.
            }.
        }.

        leftEyeViewport ensureResourcesAreCreatedFor: sceneRenderingPipeline owner: self address.
        stereoPresentationMode isStereoscopic ifTrue: {
            rightEyeViewport ensureResourcesAreCreatedFor: sceneRenderingPipeline owner: self address.
        }.

        ## Get the rendering command queue.
        renderingCommandQueue := device _ getDefaultCommandQueue.

        ## Build the command allocator and list.
        stateTrackers isCreated ifFalse: {
            stateTrackers for: self engine createOfType: CommandListType Direct
        }.

        currentExtent := requiredExtent.
    }.

    method createSSAOBuffersForExtent: (framebufferExtent: UInt32x2) ::=> Void := {
        let device ref := self engine _ renderingDevice.

        ssaoComputationBinding ifNil: {
            ssaoComputationBinding := sceneRenderingPipeline _ shaderSignature _ createShaderResourceBindings: 5.
        }.
        ssaoComputationBinding _
            bindOn: 1 sampledTextureView: decodedDepthBufferTextureView;
            bindOn: 2 sampledTextureView: normalBufferTextureView.

        ## Create the SSAO computation framebuffer.
        ssaoTextureExtent := ssaoQuality computeTextureExtentForFramebufferExtent: framebufferExtent.
        {
            let ssaoTexture := device _ createTexture: (TextureDescription()
                type: TextureType Texture2D;
                width: ssaoTextureExtent x;
                height: ssaoTextureExtent y;
                depth: 1;
                layers: 1;
                miplevels: 1;
                format: PixelFormat R8_UNorm;
                usageModes: TextureUsageMode Sampled | TextureUsageMode ColorAttachment;
                mainUsageMode: TextureUsageMode Sampled;
                heapType: MemoryHeapType DeviceLocal;
                sampleCount: 1;
                yourself).
            ssaoTextureView := ssaoTexture _ getOrCreateFullView.

            let colorAttachments mutable := TextureViewPtr array(ssaoTextureView).
            ssaoFramebuffer := device _ createFramebuffer: ssaoTextureExtent colorViews: colorAttachments depthStencilView: TextureViewPtr nil.
        }.

        {
            let ssaoPingTexture := device _ createTexture: (TextureDescription()
                type: TextureType Texture2D;
                width: ssaoTextureExtent x;
                height: ssaoTextureExtent y;
                depth: 1;
                layers: 1;
                miplevels: 1;
                format: PixelFormat R8_UNorm;
                usageModes: TextureUsageMode Sampled | TextureUsageMode ColorAttachment;
                mainUsageMode: TextureUsageMode Sampled;
                heapType: MemoryHeapType DeviceLocal;
                sampleCount: 1;
                yourself).
            ssaoPingTextureView := ssaoPingTexture _ getOrCreateFullView.

            let colorAttachments mutable := TextureViewPtr array(ssaoPingTextureView).
            ssaoPingFramebuffer := device _ createFramebuffer: ssaoTextureExtent colorViews: colorAttachments depthStencilView: TextureViewPtr nil.
        }.

        ssaoBlurPingBinding ifNil: {
            ssaoBlurPingBinding := sceneRenderingPipeline _ shaderSignature _ createShaderResourceBindings: 5.
        }.
        ssaoBlurPingBinding _ bindOn: 1 sampledTextureView: ssaoTextureView.

        ssaoBlurPongBinding ifNil: {
            ssaoBlurPongBinding := sceneRenderingPipeline _ shaderSignature _ createShaderResourceBindings: 5.
        }.
        ssaoBlurPongBinding _ bindOn: 1 sampledTextureView: ssaoPingTextureView.

        ssaoComputationRenderPass ifNil: {
            let colorAttachments mutable := RenderPassColorAttachmentDescription array (
                RenderPassColorAttachmentDescription()
                    format: PixelFormat R8_UNorm;
                    beginAction: RenderPassAttachmentAction Discard;
                    endAction: RenderPassAttachmentAction Keep;
                    yourself
            ).

            ssaoComputationRenderPass := device _ createRenderPass: colorAttachments depthStencilAttachment: nil.
        }.
    }.

    override method getLastFrameVisibleObjectCount => UIntPointer := {
        leftEyeViewport getLastFrameVisibleObjectCount +
            (stereoPresentationMode isMonoscopic ifTrue: 0u ifFalse: rightEyeViewport getLastFrameVisibleObjectCount)
    }.

    override method prepareRendering ::=> Void := {
        let camera ref := self camera.
        camera ifNotNil: {
            self engine _ frameProfiler cameraTransform: camera _ globalTransform
        }.

        leftEyeViewport prepareRendering.
        stereoPresentationMode isStereoscopic ifTrue: {
            rightEyeViewport prepareRendering.
        }.
    }.

    method screenQuadShader => GPU ShaderEntryPointInfo const pointer := {
        self engine _ renderingDevice _ shouldInvertProjectionY ifTrue: {
            Woden Shaders CompositionMaterialShaders screenQuad shaderEntryPointInfo address
        } ifFalse: {
            Woden Shaders CompositionMaterialShaders screenQuadFlippedY shaderEntryPointInfo address
        }.
    }.

    override method setCurrentBackBufferLeftEye: (leftEye: FramebufferPtr const ref) rightEye: (rightEye: FramebufferPtr const ref) renderPass: (displayRenderPass: RenderPassPtr) ::=> Void := {
        currentDisplayRenderPass := displayRenderPass.
        currentBackBufferLeftEye := leftEye.
        currentBackBufferRightEye := rightEye.
    }.

    method hasStereoscopicPresentationModeWithFlippedEyes => Boolean8 := {
        stereoPresentationMode selectCase: #{
            StereoPresentationMode AnaglyphCyanRed : true.
            StereoPresentationMode BottomTopSideBySide : true.
            StereoPresentationMode InterleavedOddEven : true.
            _ : false.
        }.
    }.

    method stereoscopicPresentationCompositionShader => GPU ShaderEntryPointInfo const pointer := {
        stereoPresentationMode selectCase: #{
            StereoPresentationMode AnaglyphRedCyan : Woden Shaders StereoscopicCompositionMaterial anaglyphRedCyan shaderEntryPointInfo address.
            StereoPresentationMode AnaglyphCyanRed : Woden Shaders StereoscopicCompositionMaterial anaglyphRedCyan shaderEntryPointInfo address.
            StereoPresentationMode LeftRightSideBySide : Woden Shaders StereoscopicCompositionMaterial leftRightSideBySide shaderEntryPointInfo address.
            StereoPresentationMode RightLeftSideBySide : Woden Shaders StereoscopicCompositionMaterial leftRightSideBySide shaderEntryPointInfo address.
            StereoPresentationMode TopBottomSideBySide : Woden Shaders StereoscopicCompositionMaterial topBottomSideBySide shaderEntryPointInfo address.
            StereoPresentationMode BottomTopSideBySide : Woden Shaders StereoscopicCompositionMaterial topBottomSideBySide shaderEntryPointInfo address.
            StereoPresentationMode InterleavedEvenOdd : Woden Shaders StereoscopicCompositionMaterial interleavedEvenOdd shaderEntryPointInfo address.
            StereoPresentationMode InterleavedOddEven : Woden Shaders StereoscopicCompositionMaterial interleavedEvenOdd shaderEntryPointInfo address.
            StereoPresentationMode VR : Woden Shaders StereoscopicCompositionMaterial leftEyeOnly shaderEntryPointInfo address.
            _ : Woden Shaders StereoscopicCompositionMaterial leftEyeOnly shaderEntryPointInfo address.
        }.
    }.

    method composeStereoscopicPresentation => Void := {
        let viewportRectangle := RectangleI32 min: Int32x2 zeros max: (currentExtent castTo: Int32x2).
        stateTrackers current _
            resetState;
            useShaderSignature: sceneRenderingPipeline _ shaderSignature;
            useGraphicShaderBindings: sceneRenderingPipeline _ samplingStateBinding;
            useGraphicShaderBindings: stereoEyeCompositionBinding;

            beginRenderPass: currentDisplayRenderPass on: currentBackBufferLeftEye contentOnBundle: false;
            setViewport: viewportRectangle;
            setScissor: viewportRectangle;

            vertexShader: self screenQuadShader;
            fragmentShader: self stereoscopicPresentationCompositionShader;
            primitiveTopology: PrimitiveTopology Triangles;
            drawArrays: 3 instanceCount: 1 firstVertex: 0 baseInstance: 0;
            endRenderPass
    }.

    method presentAndDumpFrame => Void := {
        let frameBufferingIndex := dumpFrameCount % (FrameBufferingCount castTo: UIntPointer).
        let frameOffset := frameBufferingIndex * eyeReadbackBufferSlicePitch.

        dumpFrameCount >= FrameBufferingCount ifTrue: {
            let frameCountText := Std String textStreamContents: {:out :: Void | out << dumpFrameCount }.
            let paddedFrameCountText mutable := Std String ().
            0 until: (5 - (frameCountText size castTo: IntPointer) max: 0) do: {:i :: Void |
                paddedFrameCountText add: '0'
            }.
            paddedFrameCountText addAll: frameCountText asArraySlice.
            let outputFilename := self engine _ renderingSettings frameDumpingPrefix -- paddedFrameCountText -- ".jpg".

            let frameToSave := dumpFrameCount - FrameBufferingCount.
            let formToSave := Form extent: currentExtent pixelFormat: sceneRenderingPipeline _ swapChainColorBufferFormat.
            let sourceData := (eyeReadbackBuffer _ map: MappingAccessMask ReadOnly) reinterpretCastTo: UInt8 pointer.

            let destRow mutable := formToSave _ pixels getPointer.
            let destPitch := formToSave _ pitch.
            let sourceRow mutable := sourceData + frameOffset.
            let copySize := currentExtent x * formToSave _ pixelFormat bytesPerPixel.
            0 until: currentExtent y do: {:y :: Void |
                Std memcpy(destRow, sourceRow, copySize).
                destRow := destRow + destPitch.
                sourceRow := sourceRow + eyeReadbackBufferPitch.
            }.

            eyeReadbackBuffer _ unmap.

            formToSave _ writeToFileNamed: outputFilename
        }.
        let viewportRectangle := RectangleI32 min: Int32x2 zeros max: (currentExtent castTo: Int32x2).
        let stateTracker ref := stateTrackers current _.

        stateTracker
            ## Present the frame.
            resetState;
            useShaderSignature: sceneRenderingPipeline _ shaderSignature;
            useGraphicShaderBindings: sceneRenderingPipeline _ samplingStateBinding;
            useGraphicShaderBindings: stereoEyeCompositionBinding;

            beginRenderPass: currentDisplayRenderPass on: currentBackBufferLeftEye contentOnBundle: false;
            setViewport: viewportRectangle;
            setScissor: viewportRectangle;

            vertexShader: self screenQuadShader;
            fragmentShader: Woden Shaders StereoscopicCompositionMaterial leftEyeOnly shaderEntryPointInfo address;
            primitiveTopology: PrimitiveTopology Triangles;
            drawArrays: 3 instanceCount: 1 firstVertex: 0 baseInstance: 0;
            endRenderPass;
            
            ## Readback the left eye.
            pushTexture: leftEyeTexture
                subresourceRange: (TextureSubResourceRange()
                    aspect: TextureAspect Color;
                    levelCount: 1;
                    layerCount: 1;
                    yourself)
                transitionBarrierFrom: TextureUsageMode Sampled into: TextureUsageMode CopySource;
            copyFromTexture: leftEyeTexture intoBuffer: eyeReadbackBuffer
                region: (BufferImageCopyRegion()
                    bufferOffset: frameOffset;
                    bufferPitch: eyeReadbackBufferPitch;
                    bufferSlicePitch: eyeReadbackBufferSlicePitch;

                    textureUsageMode: TextureUsageMode CopySource;
                    textureSubResourceLevel: (TextureSubResourceLevel()
                        aspect: TextureAspect Color;
                        layerCount: 1;
                        yourself);
                    textureRegion: (BoxI32 min: 0 max: Int32x3(currentExtent castTo: Int32x2, 1));
                    yourself);
            popBufferTransitionBarrier.
        dumpFrameCount := dumpFrameCount + 1.
    }.

    override method setScene2D: (scene2D: Std Graphics Scene2D NodePtr const ref) ::=> Void := {
        currentScene2D := scene2D
    }.

    override method scene2DBuilder => Std Graphics Scene2D BuilderPtr
        := self engine _ renderingDevice _ createScene2DBuilder.

    override method constructAndEnqueueCommandList => Void := {
        currentBackBufferLeftEye isNil || currentDisplayRenderPass isNil ifTrue: {
            return: void
        }.

        leftEyeViewport uploadRenderingStates.
        stereoPresentationMode isStereoscopic ifTrue: {
            rightEyeViewport uploadRenderingStates.
        }.

        let stateTracker := stateTrackers currentReseted.
        let isDumpingFrames := self engine _ renderingSettings frameDumping.

        stereoPresentationMode isMonoscopic || stereoPresentationMode isMultiLayerSwapChain ifTrue: {
            isDumpingFrames ifTrue: {
                leftEyeViewport constructCommandsOn: stateTracker displayingOn: leftEyeFramebuffer with: currentDisplayRenderPass.
                self presentAndDumpFrame
            } ifFalse: {
                leftEyeViewport constructCommandsOn: stateTracker displayingOn: currentBackBufferLeftEye with: currentDisplayRenderPass.
            }.
            stereoPresentationMode isMultiLayerSwapChain && currentBackBufferRightEye isNotNil ifTrue: {
                rightEyeViewport constructCommandsOn: stateTracker displayingOn: currentBackBufferRightEye with: currentDisplayRenderPass.
            }.
        } ifFalse: {
            ## Render this on separate buffers.
            leftEyeViewport constructCommandsOn: stateTracker displayingOn: leftEyeFramebuffer with: eyeCompositionRenderPass.
            rightEyeViewport constructCommandsOn: stateTracker displayingOn: rightEyeFramebuffer with: eyeCompositionRenderPass.

            self composeStereoscopicPresentation
        }.

        stateTracker _
            close.

        self engine _ enqueueCommandList: (stateTracker upCastFor: CommandList).
    }.
}.

}. ## End of namespace ForwardRenderer
}. ## End of namespace Woden
