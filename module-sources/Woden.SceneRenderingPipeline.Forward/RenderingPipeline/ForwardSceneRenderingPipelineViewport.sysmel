namespace Woden definition: {
namespace ForwardRenderer definition: {

useNamespace: Woden Runtime.
useNamespace: Stdn Graphics Core.
useNamespace: Stdn Graphics GUI.
useNamespace: Stdn Math Geometry.

#**
 * An abstract pipeline for rendering a null scene.
 *#
class ForwardSceneRenderingPipelineViewport superclass: SceneRenderingPipelineViewport; definition: {
    protected field sceneRenderingPipeline type: ForwardSceneRenderingPipelinePtr.

    protected field currentExtent type: UInt32x2.
    protected field renderingCommandQueue type: CommandQueuePtr.
    protected field commandListAllocator type: CommandListAllocatorPtr.
    protected field commandList type: CommandListPtr.

    protected field colorBufferTextureHandle type: StrongTextureHandlePtr.
    protected field framebuffer type: FramebufferPtr.
    protected field renderPass type: RenderPassPtr.

    const inline method engine => EnginePtr
        := sceneRenderingPipeline _ engine.

    method initializeWithSceneRenderingPipeline: (theRenderingPipeline: ForwardSceneRenderingPipelinePtr) ::=> Void := {
        sceneRenderingPipeline := theRenderingPipeline.
    }.

    override method mainColorBufferTextureHandle => StrongTextureHandlePtr
        := colorBufferTextureHandle.

    override method extent: (requiredExtent: UInt32x2) ::=> Void := {
        currentExtent = requiredExtent && colorBufferTextureHandle isNotNil ifTrue: {return: void}.

        let renderingDevice := self engine _ renderingDevice.
        renderingCommandQueue ifNotNil: {
            renderingCommandQueue _ waitForIdle
        }.

        colorBufferTextureHandle reset.
        framebuffer reset.

        ## Create the main framebuffer.
        {
            let colorBuffer := renderingDevice _ createTexture: (TextureDescription()
                type: TextureType Texture2D;
                width: requiredExtent x;
                height: requiredExtent y;
                depth: 1;
                layers: 1;
                miplevels: 1;
                format: PixelFormat B8G8R8A8_UNormSRGB;
                usageModes: TextureUsageMode Sampled | TextureUsageMode ColorAttachment;
                mainUsageMode: TextureUsageMode Sampled;
                heapType: MemoryHeapType DeviceLocal;
                sampleCount: 1;
                yourself).
            let colorBufferTextureView := colorBuffer _ getOrCreateFullView.

            colorBufferTextureHandle := renderingDevice _ createScene2DBuilder _
                createTextureHandleFor: (colorBuffer upCastFor: Stdn SharedObject) view: (colorBufferTextureView upCastFor: Stdn SharedObject).

            let depthBuffer := renderingDevice _ createTexture: (TextureDescription()
                type: TextureType Texture2D;
                width: requiredExtent x;
                height: requiredExtent y;
                depth: 1;
                layers: 1;
                miplevels: 1;
                format: PixelFormat D32_Float;
                usageModes: TextureUsageMode DepthAttachment;
                mainUsageMode: TextureUsageMode DepthAttachment;
                heapType: MemoryHeapType DeviceLocal;
                sampleCount: 1;
                yourself).
            let depthBufferTextureView := depthBuffer _ getOrCreateFullView.

            let colorAttachments mutable := TextureViewPtr array(colorBufferTextureView).
            framebuffer := renderingDevice _ createFramebuffer: UInt32x2(640, 480) colorViews: colorAttachments depthStencilView: depthBufferTextureView.
        }.

        renderPass ifNil: {
            let colorAttachments mutable := RenderPassColorAttachmentDescription array (
                RenderPassColorAttachmentDescription()
                    format: PixelFormat B8G8R8A8_UNormSRGB;
                    beginAction: RenderPassAttachmentAction Clear;
                    endAction: RenderPassAttachmentAction Keep;
                    clearValue: 0.25f;
                    yourself
            ).

            let depthStencilAttachment mutable := RenderPassDepthStencilAttachmentDescription()
                format: PixelFormat D32_Float;
                beginAction: RenderPassAttachmentAction Clear;
                endAction: RenderPassAttachmentAction Discard;
                yourself.
            renderPass := renderingDevice _ createRenderPass: colorAttachments depthStencilAttachment: depthStencilAttachment address.
        }.

        ## Get the rendering command queue.
        renderingCommandQueue := renderingDevice _ getDefaultCommandQueue.

        ## Build the command allocator and list.
        {
            commandListAllocator := renderingDevice _ createCommandAllocatorOfType: CommandListType Direct for: renderingCommandQueue.
            commandList := renderingDevice _ createCommandListOfType: CommandListType Direct for: commandListAllocator.
            commandList _ close.
        }.

        currentExtent := requiredExtent.
    }.

    override method render => Void := {
        commandListAllocator _ resetAllocator.
        commandList _
            resetFor: commandListAllocator;

            beginRenderPass: renderPass on: framebuffer contentOnBundle: false;
            endRenderPass;
            close.

        renderingCommandQueue _
            submitCommandList: commandList;
            waitForIdle.
    }.
}.

}. ## End of namespace ForwardRenderer
}. ## End of namespace Woden
