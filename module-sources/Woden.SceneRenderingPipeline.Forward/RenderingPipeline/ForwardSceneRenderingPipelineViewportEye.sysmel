namespace Woden definition: {
namespace ForwardRenderer definition: {

useNamespace: Woden Runtime.
useNamespace: Std Graphics Core.
useNamespace: Std Graphics GUI.
useNamespace: Std Math Geometry.
useNamespace: Std Math LinearAlgebra.

#**
 * An abstract pipeline for rendering a null scene.
 *#
class ForwardSceneRenderingPipelineViewportEye superclass: RenderingPipelineCameraEye; definition: {
    compileTime constant ShadowMapTextureLayers := ForwardSceneRenderingPipeline ShadowMapTextureLayers.

    protected field stateTracker type: StateTrackerRef.
    protected field toneMappingOperator type: ToneMappingOperator.

    public field isRightEye type: Boolean8.
    public field viewport type: ForwardSceneRenderingPipelineViewport pointer.

    public field backgroundLayer type: ForwardSceneRenderingPipelineViewportLayer.
    public field normalLayer type: ForwardSceneRenderingPipelineViewportLayer.
    public field foregroundLayer type: ForwardSceneRenderingPipelineViewportLayer.

    public field activeShadowMapLayerCount type: UIntPointer.
    public field shadowMapLayers type: (ShadowMapRenderingPipelineLayer array: ShadowMapTextureLayers).

    protected field cameraPostProcessingStateBuffer type: BufferRef.
    public field scene2DRenderers type: (StateTracker2DSceneRendererRef array: FrameBufferingCount).

    const inline method engine => EnginePtr
        := viewport _ engine.

    const inline method sceneRenderingPipeline => ForwardSceneRenderingPipelinePtr const ref
        := viewport _ sceneRenderingPipeline.

    const inline method isLeftEye => Boolean8
        := isRightEye not.

    const inline method isRightEye => Boolean8
        := isRightEye.

    override method ensureResourcesAreCreatedFor: (theSceneRenderingPipeline: ForwardSceneRenderingPipelinePtr const ref) owner: (theOwner: SceneRenderingPipelineViewport pointer) ::=> Void := {
        owner := theOwner.
        sceneRenderingPipeline := theSceneRenderingPipeline.

        cameraPostProcessingStateBuffer ifNil: {
            let initialState mutable := Woden Shaders CameraPostProcessingStateData()
                currentAverageLuminance: 0.5f;
                yourself.

            cameraPostProcessingStateBuffer := self engine _ renderingDevice createBuffer: (BufferDescription()
                size: Woden Shaders CameraPostProcessingStateData instanceSize;
                heapType: MemoryHeapType DeviceLocal;
                usageModes: BufferUsageMode Storage | BufferUsageMode CopyDestinationBuffer;
                mainUsageMode: BufferUsageMode Storage;
                mappingFlags: BufferMappingFlags DynamicStorage;
                yourself) initialData: initialState address.
        }.

        backgroundLayer
            ensureResourcesAreCreatedFor: sceneRenderingPipeline owner: self address;
            cameraPostProcessingStateBuffer: cameraPostProcessingStateBuffer.
        normalLayer
            ensureResourcesAreCreatedFor: sceneRenderingPipeline owner: self address;
            cameraPostProcessingStateBuffer: cameraPostProcessingStateBuffer.
        foregroundLayer
            ensureResourcesAreCreatedFor: sceneRenderingPipeline owner: self address;
            cameraPostProcessingStateBuffer: cameraPostProcessingStateBuffer.

        0 until: ShadowMapTextureLayers do: {:i :: Void |
            shadowMapLayers[i] ensureResourcesAreCreatedFor: sceneRenderingPipeline owner: self address.
        }.
    }.

    method prepareCameraState => Void := {
        let scene := self scene.
        let camera ref := self camera.
        scene ifNil: {return: void}.
        camera ifNil: {return: void}.

        toneMappingOperator := camera _ toneMappingOperator.

        let normalCameraTransform mutable := camera _ globalTransform.
        let backgroundCameraTransform mutable := normalCameraTransform.
        backgroundCameraTransform translation: Float32x3 zeros.
        let foregroundCameraTransform := ReversibleAffineTransform3dF32 identity.

        let fov := camera _ fov.
        let nearDistance := camera _ nearDistance.
        let farDistance := camera _ farDistance.

        let screenSize := (viewport _ currentExtent castTo: Float32x2).
        let aspect := screenSize x / screenSize y.
        let projectionMatrix mutable type: Float32x4x4.
        let frustum mutable type: FrustumF32.

        viewport _ stereoPresentationMode isStereoscopic ifTrue: {
            let ipd := camera _ stereoIpd.
            let ipdOffset := normalCameraTransform transformVector: Float32x3(ipd*0.5f, 0, 0).
            let frustumTangents mutable := FrustumTangentsF32().

            self isLeftEye ifTrue: {
                frustumTangents setForStereoLeftEyeFovY: fov aspect: aspect ipd: ipd displayDistance: camera _ stereoDisplayDistance.
                normalCameraTransform translateBy: ipdOffset negated
            } ifFalse: {
                frustumTangents setForStereoRightEyeFovY: fov aspect: aspect ipd: ipd displayDistance: camera _ stereoDisplayDistance.
                normalCameraTransform translateBy: ipdOffset
            }.

            projectionMatrix := frustumTangents makeReverseDepthProjectionMatrixWithNearDistance: nearDistance farDistance: farDistance invertedY: self engine _ renderingDevice shouldInvertProjectionY.
            frustum := frustumTangents makeFrustumWithNearDistance: nearDistance farDistance: farDistance.
        } ifFalse: {
            projectionMatrix := Float32x4x4 reversePerspectiveFovY: fov aspect: aspect near: nearDistance far: farDistance invertedY: self engine _ renderingDevice shouldInvertProjectionY.
            frustum := FrustumF32()
                makePerspectiveFovY: fov aspect: aspect near: nearDistance far: farDistance;
                yourself.
        }.

        let backgroundFrustum := frustum transformedWith: backgroundCameraTransform.
        let normalFrustum := frustum transformedWith: normalCameraTransform.
        let foregroundFrustum := frustum transformedWith: foregroundCameraTransform.

        let normalCameraState mutable := Woden Shaders CameraStateData()
            matrix: normalCameraTransform matrix4;
            inverseMatrix: normalCameraTransform inverseMatrix4;

            projectionMatrix: projectionMatrix;
            inverseProjectionMatrix: projectionMatrix inverse;

            screenSize: screenSize;
            inverseScreenSize: 1 / screenSize;

            ndcToTextureFetchTransform: (self engine _ renderingDevice shouldInvertProjectionY
                ifTrue: Float32x4(1.0f, 1.0f, 1.0f, 1.0f)
                ifFalse: Float32x4(1.0f, -1.0f, 1.0f, 1.0f));

            currentTime: scene _ currentTime;
            currentFrameDeltaTime: viewport _ timeSinceLastFrame;

            exposure: camera _ exposure;
            autoExposureInfluenceFactor: camera _ autoExposureInfluenceFactor;
            yourself.

        let backgroundCameraState mutable := normalCameraState.
        backgroundCameraState
            matrix: backgroundCameraTransform matrix4;
            inverseMatrix: backgroundCameraTransform inverseMatrix4.

        let foregroundCameraState mutable := normalCameraState.
        foregroundCameraState
            matrix: foregroundCameraTransform matrix4;
            inverseMatrix: foregroundCameraTransform inverseMatrix4.

        backgroundLayer
            cameraTransform: backgroundCameraTransform;
            cameraState: backgroundCameraState;
            frustum: backgroundFrustum.
        normalLayer
            cameraTransform: normalCameraTransform;
            cameraState: normalCameraState;
            frustum: normalFrustum.
        foregroundLayer
            cameraTransform: foregroundCameraTransform;
            cameraState: foregroundCameraState;
            frustum: foregroundFrustum.
    }.

    method uploadCameraState => Void := {
        backgroundLayer uploadCameraState.
        normalLayer uploadCameraState.
        foregroundLayer uploadCameraState.
        0 until: activeShadowMapLayerCount do: {:i :: Void |
            shadowMapLayers[i] uploadCameraState
        }.
    }.

    method uploadLightingState => Void := {
        let ssaoTextureView := viewport _ ssaoTextureView.

        backgroundLayer
            setSSAOTextureView: ssaoTextureView;
            uploadLightingState.
        normalLayer
            setSSAOTextureView: ssaoTextureView;
            uploadLightingState.
        foregroundLayer
            setSSAOTextureView: ssaoTextureView;
            uploadLightingState.
    }.

    method gatherVisibleRenderingObjectsOf: (sceneLayer: SceneLayerPtr const ref) on: (viewportLayer: ForwardSceneRenderingPipelineViewportLayer ref) ::=> Void := {
        let scene := self scene.
        scene ifNil: {return: void}.

        viewportLayer lightSources removeAll.
        viewportLayer renderableSceneObjects removeAll.

        let frustum ref := viewportLayer frustum.
        sceneLayer _ renderingSceneObjectsDo: {:(RenderingSceneObjectPtr const ref)each :: Void |
            let cameraDistance := (viewportLayer cameraTransform translation - each _ boundingBox center) length.
            (each _ isVisibleInFrustum: frustum) ifTrue: {
                each _ isLightSource ifTrue: {
                    viewportLayer lightSources add: (ViewportLayerLightSource()
                        cameraDistance: cameraDistance;
                        object: (each downCastFor: RenderingSceneLightSource);
                        yourself)
                }.

                each _ isRenderable ifTrue: {
                    let renderingSceneRenderable := each downCastFor: RenderingSceneRenderable.
                    viewportLayer renderableSceneObjects add: (ViewportLayerRenderableObject()
                        priority: renderingSceneRenderable _ renderable _ renderPriority;
                        cameraDistance: cameraDistance;
                        object: renderingSceneRenderable;
                        yourself)
                }.
            }.
        }.
    }.

    method gatherShadowCastingRenderingObjectsOf: (sceneLayer: SceneLayerPtr const ref) on: (viewportLayer: ShadowMapRenderingPipelineLayer ref) ::=> Void := {
        let scene := self scene.
        scene ifNil: {return: void}.

        viewportLayer renderableSceneObjects removeAll.

        let frustum ref := viewportLayer frustum.
        sceneLayer _ renderingSceneObjectsDo: {:(RenderingSceneObjectPtr const ref)each :: Void |
            let cameraDistance := (viewportLayer cameraTransform translation - each _ boundingBox center) length.

            each _ isRenderable && (frustum intersectsOrContainsBox: each _ boundingBox) ifTrue: {
                let renderingSceneRenderable := each downCastFor: RenderingSceneRenderable.
                let priority := renderingSceneRenderable _ renderable _ renderPriority.
                priority < RenderPriority TranslucentSorted ifTrue: {
                    viewportLayer renderableSceneObjects add: (ViewportLayerRenderableObject()
                        priority: priority;
                        cameraDistance: cameraDistance;
                        object: renderingSceneRenderable;
                        yourself)
                }.
            }.
        }.
    }.

    method setupShadowMapLayer: (layer: ShadowMapRenderingPipelineLayer ref)
        withCameraTransform: (cameraTransform: ReversibleAffineTransform3dF32 const ref)
        projectionMatrix: (projectionMatrix: Float32x4x4)
        frustum: (frustum: FrustumF32 const ref) ::=> Void := {

        let scene := self scene.
        scene ifNil: {return: void}.

        let worldFrustum := frustum transformedWith: cameraTransform.
        let cameraState mutable := Woden Shaders CameraStateData()
            matrix: cameraTransform matrix4;
            inverseMatrix: cameraTransform inverseMatrix4;

            projectionMatrix: projectionMatrix;
            currentTime: scene _ currentTime;
            yourself.

        layer
            cameraTransform: cameraTransform;
            cameraState: cameraState;
            frustum: worldFrustum.
    }.

    method selectAndPrepareShadowCastingSpotLight: (spotLight: ViewportLayerLightSource ref)
        lightState: (lightState: Woden Shaders LightSourceData ref)
        in: (viewportLayer: ForwardSceneRenderingPipelineViewportLayer ref) ::=> Void := {
        let lightSourceObject := spotLight object _ lightSourceObject.

        let fov := lightSourceObject _ spotOuterCutoff * 2.0f.
        let nearDistance := 0.01f.
        let farDistance := lightState radius.
        let aspect := 1.0f.

        let cameraTransform := spotLight object _ currentTransform.
        let projectionMatrix := Float32x4x4 reversePerspectiveFovY: fov aspect: aspect near: nearDistance far: farDistance invertedY: self engine _ renderingDevice shouldInvertProjectionY.
        let frustum := FrustumF32()
            makePerspectiveFovY: fov aspect: aspect near: nearDistance far: farDistance;
            yourself.

        let shadowLayer ref := shadowMapLayers[activeShadowMapLayerCount].
        self setupShadowMapLayer: shadowLayer
            withCameraTransform: cameraTransform projectionMatrix: projectionMatrix frustum: frustum.

        let shadowMapBias := self engine _ projectiveTextureMatrix.
        lightState
            cascadeSplitOffsets: 1;
            cascadeFrustumPlane: 0;
            shadowMapLayer: activeShadowMapLayerCount;
            shadowMapTransform: (shadowMapBias * (projectionMatrix * (shadowLayer cameraState viewMatrix * viewportLayer cameraState inverseViewMatrix))).

        activeShadowMapLayerCount := activeShadowMapLayerCount + 1
    }.

    const inline method extractShadowCastingBodyForFrustumCorners: (frustumCorners: (Float32x3 array: 8)) sceneBoundingBox: (sceneBoundingBox: BoxF32)
        extrudeDirection: (extrudeDirection: Float32x3) ::=> (Float32x3 array: 16) := {

        let maxExtrudeExtent mutable := Float32 negativeInfinity.
        sceneBoundingBox corners do: {:each :: Void |
            maxExtrudeExtent := maxExtrudeExtent max: (each dot: extrudeDirection)
        }.
        let maxExtrudeProjection := maxExtrudeExtent * extrudeDirection.

        let result mutable type: (Float32x3 array: 16).
        0 until: 8 do: {:i :: Void |
            let worldCorner := frustumCorners[i].
            let flattenedWorldCorner := worldCorner - (worldCorner dot: extrudeDirection)*extrudeDirection.

            result[i*2] := worldCorner.
            result[i*2 + 1] := flattenedWorldCorner + maxExtrudeProjection
        }.

        result
    }.

    method setupShadowCastingDirectionalLight: (directionalLight: ViewportLayerLightSource ref)
        in: (viewportLayer: ForwardSceneRenderingPipelineViewportLayer ref)
        cascadeFrustum: (cascadeFrustum: FrustumF32 const ref) ::=> Float32x4x4 := {

        let scene := self scene.
        let sceneBoundingBox := scene _ normalLayer _ boundingBox.

        let extrudeDirection := directionalLight object _ position xyz.
        let lookDirection := extrudeDirection negated.

        let shadowCastingBody := self extractShadowCastingBodyForFrustumCorners: cascadeFrustum corners sceneBoundingBox: sceneBoundingBox
            extrudeDirection: extrudeDirection.

        ## Compute the shadow casting body bounding box to facilitate focusing the shadow.
        let shadowCastingBodyBoundingBox mutable := BoxF32 empty.
        shadowCastingBody do: {:each :: Void |
            shadowCastingBodyBoundingBox := shadowCastingBodyBoundingBox unionWith: each
        }.

        let clippedShadowCastingBodyBoundingBox := shadowCastingBodyBoundingBox intersectionWith: sceneBoundingBox.
        clippedShadowCastingBodyBoundingBox isEmpty ifFalse: {
            shadowCastingBodyBoundingBox := clippedShadowCastingBodyBoundingBox
        }.

        let lightTransform mutable := directionalLight object _ currentTransform.
        lightTransform translation: shadowCastingBodyBoundingBox center.

        let frustumBoundingBox mutable := BoxF32 empty.
        shadowCastingBodyBoundingBox corners do: {:each :: Void |
            frustumBoundingBox := frustumBoundingBox unionWith: (lightTransform inverseTransformPosition: each)
        }.

        let projectionMatrix := frustumBoundingBox mappingToNDCCoordinatesReverseDepthWithInvertedY: self engine _ renderingDevice shouldInvertProjectionY.
        let frustum := frustumBoundingBox asFrustum.

        let shadowLayer ref := shadowMapLayers[activeShadowMapLayerCount].
        self setupShadowMapLayer: shadowLayer
            withCameraTransform: lightTransform projectionMatrix: projectionMatrix frustum: frustum.

        let shadowMapBias := self engine _ projectiveTextureMatrix.
        let shadowMapTransform := shadowMapBias * (projectionMatrix * (shadowLayer cameraState viewMatrix * viewportLayer cameraState inverseViewMatrix)).
        activeShadowMapLayerCount := activeShadowMapLayerCount + 1.

        shadowMapTransform
    }.

    method selectAndPrepareShadowCastingDirectionalLight: (directionalLight: ViewportLayerLightSource ref)
        lightState: (lightState: Woden Shaders LightSourceData ref)
        in: (viewportLayer: ForwardSceneRenderingPipelineViewportLayer ref) ::=> Void := {
        activeShadowMapLayerCount + 4 > ShadowMapTextureLayers ifTrue: {return: void}.

        let camera ref := self camera.
        let scene := self scene.
        camera ifNil: {return: void}.
        scene ifNil: {return: void}.

        let sceneBoundingBox := scene _ normalLayer _ boundingBox.
        sceneBoundingBox isEmpty ifTrue: {return: void}.

        let splitDistribution := camera _ cascadeSplitDistribution.
        let firstCascadeLayer := activeShadowMapLayerCount.
        let frustum := viewportLayer frustum.
        let nearDistance := camera _ nearDistance.
        let farDistance := camera _ farDistance.

        ## Compute the frustum split distribution.
        ## Parallel split shadow mapping: https://developer.nvidia.com/gpugems/gpugems3/part-ii-light-and-shadows/chapter-10-parallel-split-shadow-maps-programmable-gpus
        let frustumSplitDistribution mutable type: (Float32 array: 5).
        0 until: 5 do: {:i :: Void |
            let alpha := i/4.0f.
            let uniformSplit := nearDistance + (farDistance - nearDistance)*alpha.
            let logarithmicSplit := nearDistance* (farDistance / nearDistance raisedTo: alpha).
            frustumSplitDistribution[i] := logarithmicSplit interpolateTo: uniformSplit at: splitDistribution.
        }.

        ## Generate the cascade layers.
        let shadowMapTransforms mutable type: (Float32x4x4 array: 4).
        0 until: 4 do: {:i :: Void |
            let splitNearDistance := frustumSplitDistribution[i].
            let splitFarDistance := frustumSplitDistribution[i + 1].

            let splitNearLambda := (splitNearDistance - nearDistance) / (farDistance - nearDistance).
            let splitFarLambda := (splitFarDistance - nearDistance) / (farDistance - nearDistance).
            let splitFrustum := frustum splitAtNearLambda: splitNearLambda farLambda: splitFarLambda.
            shadowMapTransforms[i] := self setupShadowCastingDirectionalLight: directionalLight in: viewportLayer cascadeFrustum: splitFrustum
        }.

        let nearPlane := frustum nearPlane.
        lightState
            cascadeSplitOffsets: Float32x4(frustumSplitDistribution second, frustumSplitDistribution third, frustumSplitDistribution fourth, frustumSplitDistribution fifth);
            cascadeFrustumPlane: Float32x4(0, 0, -1, 0);
            shadowMapLayer: firstCascadeLayer;
            shadowMapTransform: shadowMapTransforms first;
            shadowMapTransform2: shadowMapTransforms second;
            shadowMapTransform3: shadowMapTransforms third;
            shadowMapTransform4: shadowMapTransforms fourth.
    }.

    method selectAndPrepareShadowCastingLightsIn: (viewportLayer: ForwardSceneRenderingPipelineViewportLayer ref) ::=> Void := {
        activeShadowMapLayerCount >= ShadowMapTextureLayers ifTrue: {return: void}.

        0 until: viewportLayer layerLightSourceCount do: {:i :: Void |
            let lightSource ref := viewportLayer lightSources[i].
            let lightState ref := viewportLayer lightingState lightSources[i].

            lightSource object _ castShadows ifTrue: {
                lightSource object _ lightType selectCase: #{
                LightSourceType Spot : { self selectAndPrepareShadowCastingSpotLight: lightSource lightState: lightState in: viewportLayer }.
                LightSourceType Directional : { self selectAndPrepareShadowCastingDirectionalLight: lightSource lightState: lightState in: viewportLayer }.
                _ : {}
                }.

                activeShadowMapLayerCount >= ShadowMapTextureLayers ifTrue: {return: void}.
            }
        }
    }.

    method prepareShadowMapLayer: (layer: ShadowMapRenderingPipelineLayer ref) ::=> Void := {
        let scene := self scene.
        scene ifNil: {return: void}.

        self gatherShadowCastingRenderingObjectsOf: scene _ normalLayer on: layer.
        layer sortRenderingObjects.
    }.

    method prepareShadowMapLayers => Void := {
        0 until: activeShadowMapLayerCount do: {:i :: Void |
            self prepareShadowMapLayer: shadowMapLayers[i]
        }
    }.

    method prepareSceneLayer: (sceneLayer: SceneLayerPtr const ref) on: (viewportLayer: ForwardSceneRenderingPipelineViewportLayer ref) ::=> Void := {
        self gatherVisibleRenderingObjectsOf: sceneLayer on: viewportLayer.

        viewportLayer
            sortRenderingObjects;
            sortLights;
            gatherSceneLightingState.

        viewportLayer address == normalLayer address ifTrue: {
            self selectAndPrepareShadowCastingLightsIn: viewportLayer
        }.
    }.

    method setupStateTracker: (stateTracker: StateTrackerRef const ref) forRenderPass: (renderPass: RenderPassRef const ref)
        on: (framebuffer: FramebufferRef const ref) ::=> Void
        := self setupStateTracker: stateTracker forRenderPass: renderPass
            on: framebuffer viewport: (RectangleI32 min: Int32x2 zeros max: (viewport _ currentExtent castTo: Int32x2)).

    method setupStateTracker: (stateTracker: StateTrackerRef const ref) forRenderPass: (renderPass: RenderPassRef const ref)
        on: (framebuffer: FramebufferRef const ref) viewport: (viewport: RectangleI32) ::=> Void := {
        stateTracker
            resetState;
            useShaderSignature: sceneRenderingPipeline _ shaderSignature;
            useGraphicShaderBindings: sceneRenderingPipeline _ samplingStateBinding;

            frontFaceOrientation: FrontFaceOrientation CounterClockwise;
            depthFunction: CompareFunction GreaterOrEqual;

            beginRenderPass: renderPass on: framebuffer contentOnBundle: false;
            setViewport: viewport;
            setScissor: viewport.
    }.

    method renderSceneObjectsWith: (renderingContext: SceneRenderingContext ref) ::=> Void := {
        backgroundLayer renderSceneObjectsWith: renderingContext.
        normalLayer renderSceneObjectsWith: renderingContext.
        foregroundLayer renderSceneObjectsWith: renderingContext.
    }.

    method renderShadowMaps => Void := {
        0 until: activeShadowMapLayerCount do: {:i :: Void |
            let renderingContext mutable := ForwardSceneRenderingContext().

            self setupStateTracker: stateTracker forRenderPass: sceneRenderingPipeline _ shadowMapRenderPass on: sceneRenderingPipeline _ shadowMapFramebuffers[i]
                viewport: (RectangleI32 min: 0 max: (sceneRenderingPipeline _ shadowMapTextureExtent castTo: Int32x2)).

            renderingContext
                stateTracker: stateTracker;
                renderPass: SceneRenderPass DepthOnly;
                sceneRenderingPipeline: sceneRenderingPipeline getPointer;
                sceneBlendingEquation: BlendingMode Copy asBlendingEquation;
                sceneFaceCullingMode: FaceCullingMode Back;
                sceneDepthTestingEnabled: OverrideableBoolean True;
                sceneDepthWriteMask: OverrideableBoolean True.

            stateTracker
                depthBiasConstantFactor: -10.0f;
                depthBiasSlopeFactor: -3.0f.

            shadowMapLayers[i] renderSceneObjectsWith: renderingContext.

            stateTracker
                endRenderPass.
        }
    }.

    method renderDepthNormalPass => Void := {
        self setupStateTracker: stateTracker forRenderPass: viewport _ depthNormalRenderPass on: viewport _ depthNormalFramebuffer.

        let renderingContext mutable := ForwardSceneRenderingContext().
        renderingContext
            stateTracker: stateTracker;
            renderPass: SceneRenderPass DepthNormal;
            sceneRenderingPipeline: sceneRenderingPipeline getPointer;
            sceneBlendingEquation: BlendingMode Copy asBlendingEquation;
            sceneFaceCullingMode: FaceCullingMode Back;
            sceneDepthTestingEnabled: OverrideableBoolean True;
            sceneDepthWriteMask: OverrideableBoolean True.

        self renderSceneObjectsWith: renderingContext.

        stateTracker
            endRenderPass.
    }.

    method decodeDepthBuffer => Void := {
        let viewportRectangle := RectangleI32 min: Int32x2 zeros max: (viewport _ currentExtent castTo: Int32x2).
        stateTracker
            resetState;

            useShaderSignature: sceneRenderingPipeline _ shaderSignature;
            useGraphicShaderBindings: sceneRenderingPipeline _ samplingStateBinding;
            useGraphicShaderBindings: normalLayer cameraStateBindings current;
            useGraphicShaderBindings: viewport _ decodeDepthBinding;

            beginRenderPass: viewport _ decodeDepthRenderPass on: viewport _ decodeDepthFramebuffer contentOnBundle: false;
            setViewport: viewportRectangle;
            setScissor: viewportRectangle;

            vertexShader: viewport _ screenQuadShader;
            fragmentShader: (viewport _ multiSampleCount > 1u
                ifTrue: Woden Shaders DepthBufferComputationMaterial decodeDepthBufferMS shaderEntryPointInfo address
                ifFalse: Woden Shaders DepthBufferComputationMaterial decodeDepthBuffer  shaderEntryPointInfo address);
            primitiveTopology: PrimitiveTopology Triangles;
            drawArrays: 3 instanceCount: 1 firstVertex: 0 baseInstance: 0;

            endRenderPass.
    }.

    method resolveNormalBuffer => Void := {
        viewport _ renderNormalBufferTexture == viewport _ normalBufferTexture ifFalse: {
            stateTracker
                resolveTexture: viewport _ renderNormalBufferTexture level: 0 layer: 0
                    into: viewport _ normalBufferTexture level: 0 layer: 0
                    levelCount: 1 layerCount: 1
                    aspect: TextureAspect Color
        }.
    }.

    method computeScreenSpaceAmbientOcclusion => Void := {
        viewport _ ssaoQuality isDisabled ifTrue: {
            return: void.
        }.

        self
            decodeDepthBuffer;
            resolveNormalBuffer.

        let ssaoViewport := RectangleI32 min: Int32x2 zeros max: (viewport _ ssaoTextureExtent castTo: Int32x2).
        stateTracker
            resetState;

            useShaderSignature: sceneRenderingPipeline _ shaderSignature;
            useGraphicShaderBindings: sceneRenderingPipeline _ samplingStateBinding;
            useGraphicShaderBindings: normalLayer cameraStateBindings current;
            useGraphicShaderBindings: viewport _ ssaoComputationBinding;

            beginRenderPass: viewport _ ssaoComputationRenderPass on: viewport _ ssaoFramebuffer contentOnBundle: false;
            setViewport: ssaoViewport;
            setScissor: ssaoViewport;

            vertexShader: viewport _ screenQuadShader;
            fragmentShader: Woden Shaders SSAOComputationMaterialShaders ssaoComputation shaderEntryPointInfo address;
            primitiveTopology: PrimitiveTopology Triangles;
            drawArrays: 3 instanceCount: 1 firstVertex: 0 baseInstance: 0;

            endRenderPass.

        0 until: 2 do: {:blurPass :: Void |
            ## Horizontal blur.
            stateTracker
                useGraphicShaderBindings: viewport _ ssaoBlurPingBinding;
                beginRenderPass: viewport _ ssaoComputationRenderPass on: viewport _ ssaoPingFramebuffer contentOnBundle: false;
                setViewport: ssaoViewport;
                setScissor: ssaoViewport;
                fragmentShader: Woden Shaders SSAOComputationMaterialShaders ssaoHorizontalBlur shaderEntryPointInfo address;
                primitiveTopology: PrimitiveTopology Triangles;
                drawArrays: 3 instanceCount: 1 firstVertex: 0 baseInstance: 0;
                endRenderPass.

            ## Vertical blur.
            stateTracker
                useGraphicShaderBindings: viewport _ ssaoBlurPongBinding;
                beginRenderPass: viewport _ ssaoComputationRenderPass on: viewport _ ssaoFramebuffer contentOnBundle: false;
                setViewport: ssaoViewport;
                setScissor: ssaoViewport;
                fragmentShader: Woden Shaders SSAOComputationMaterialShaders ssaoVerticalBlur shaderEntryPointInfo address;
                primitiveTopology: PrimitiveTopology Triangles;
                drawArrays: 3 instanceCount: 1 firstVertex: 0 baseInstance: 0;
                endRenderPass
        }.
    }.

    method renderColorPass => Void := {
        self setupStateTracker: stateTracker forRenderPass: viewport _ hdrColorRenderPass on: viewport _ hdrColorFramebuffer.

        let renderingContext mutable := ForwardSceneRenderingContext().
        renderingContext
            stateTracker: stateTracker;
            sceneRenderingPipeline: sceneRenderingPipeline getPointer;
            sceneBlendingEquation: BlendingMode Copy asBlendingEquation;
            sceneFaceCullingMode: FaceCullingMode Back;
            sceneDepthTestingEnabled: OverrideableBoolean True;
            sceneDepthWriteMask: OverrideableBoolean True.

        self renderSceneObjectsWith: renderingContext.

        stateTracker
            endRenderPass.

        viewport _ renderHDRColorBuffer == viewport _ resolveHDRColorBuffer ifFalse: {
            stateTracker
                resolveTexture: viewport _ renderHDRColorBuffer level: 0 layer: 0
                    into: viewport _ resolveHDRColorBuffer level: 0 layer: 0
                    levelCount: 1 layerCount: 1
                    aspect: TextureAspect Color
        }.
    }.

    method getLastFrameVisibleObjectCount => UIntPointer := {
        backgroundLayer renderableSceneObjects size + normalLayer renderableSceneObjects size + foregroundLayer renderableSceneObjects size
    }.

    method prepareRendering ::=> Void := {
        let scene := self scene.
        scene ifNil: {return: void}.

        activeShadowMapLayerCount := 0.
        self
            prepareCameraState;
            prepareSceneLayer: scene _ backgroundLayer on: backgroundLayer;
            prepareSceneLayer: scene _ normalLayer on: normalLayer;
            prepareSceneLayer: scene _ foregroundLayer on: foregroundLayer;
            prepareShadowMapLayers.
    }.

    method renderHDRScene => Void := {
        let scene := self scene.
        scene ifNotNil: {
            viewport _ hdrColorRenderPass setColorAttachment: 0 clearValue: scene _ backgroundColor.
        }.

        self
            renderDepthNormalPass;
            computeScreenSpaceAmbientOcclusion;
            renderColorPass
    }.

    method toneMappingShader => GPU ShaderEntryPointInfo const pointer := {
        toneMappingOperator selectCase: #{
            ToneMappingOperator Linear : Woden Shaders ToneMappingMaterialShaders linear shaderEntryPointInfo address.
            ToneMappingOperator Reinhard : Woden Shaders ToneMappingMaterialShaders reinhard shaderEntryPointInfo address.
            ToneMappingOperator Exponential : Woden Shaders ToneMappingMaterialShaders exponential shaderEntryPointInfo address.
            ToneMappingOperator Filmic : Woden Shaders ToneMappingMaterialShaders filmic shaderEntryPointInfo address.
            _ : Woden Shaders ToneMappingMaterialShaders filmic shaderEntryPointInfo address.
        }.
    }.

    method computeAverageLuminance => Void := {
        let camera ref := self camera.
        camera isNil || camera _ hasNoAutoExposure ifTrue: {return: void}.

        stateTracker
            resetState;
            useShaderSignature: sceneRenderingPipeline _ shaderSignature;
            useGraphicShaderBindings: sceneRenderingPipeline _ samplingStateBinding;
            useGraphicShaderBindings: normalLayer cameraStateBindings current;
            useGraphicShaderBindings: viewport _ hdrColorBufferBinding.

        sceneRenderingPipeline _
            performAverageLuminanceComputationWith: stateTracker.

        stateTracker
            useComputeShaderBindings: sceneRenderingPipeline _ samplingStateBinding;
            useComputeShaderBindings: normalLayer cameraStateBindings current;
            useComputeShaderBindings: sceneRenderingPipeline _ luminanceComputationResultMaterialBindings.

        sceneRenderingPipeline _
            performCameraAutoExposureStateComputationWith: stateTracker.

        stateTracker
            buffer: cameraPostProcessingStateBuffer offset: 0 size: Woden Shaders CameraPostProcessingStateData instanceSize
            memoryBarrierFrom: PipelineStageMask ComputeShader accesses: AccessMask ShaderWrite | AccessMask ShaderRead
                to: PipelineStageMask FragmentShader accesses: AccessMask ShaderRead
    }.

    method renderScene2DOverlay => Void := {
        let currentScene2D ref := viewport _ currentScene2D.
        currentScene2D ifNil: { return: void }.

        let scene2DRenderer ref := scene2DRenderers[self engine _ frameBufferingIndex].
        scene2DRenderer ifNil: {
            scene2DRenderer := StateTracker2DSceneRenderer new
                device: self engine _ renderingDevice;
                yourself.
        }.

        scene2DRenderer
            extent: viewport _ currentExtent;
            stateTracker: stateTracker;
            renderScene: viewport _ currentScene2D.
    }.

    method toneMapAndComposeHDRSceneDisplayingOn: (backBuffer: FramebufferRef const ref) with: (displayRenderPass: RenderPassRef const ref) ::=> Void := {
        let viewportRectangle := RectangleI32 min: Int32x2 zeros max: (viewport _ currentExtent castTo: Int32x2).
        stateTracker
            resetState;
            useShaderSignature: sceneRenderingPipeline _ shaderSignature;
            useGraphicShaderBindings: sceneRenderingPipeline _ samplingStateBinding;
            useGraphicShaderBindings: normalLayer cameraStateBindings current;
            useGraphicShaderBindings: viewport _ hdrColorBufferBinding;

            beginRenderPass: displayRenderPass on: backBuffer contentOnBundle: false;
            setViewport: viewportRectangle;
            setScissor: viewportRectangle;

            vertexShader: viewport _ screenQuadShader;
            fragmentShader: self toneMappingShader;
            primitiveTopology: PrimitiveTopology Triangles;
            drawArrays: 3 instanceCount: 1 firstVertex: 0 baseInstance: 0.

        self renderScene2DOverlay.

        stateTracker
            endRenderPass
    }.

    method uploadRenderingStates => Void := {
        self
            uploadCameraState;
            uploadLightingState.
    }.

    method constructCommandsOn: (theStateTracker: StateTrackerRef const ref) displayingOn: (backBuffer: FramebufferRef const ref) with: (displayRenderPass: RenderPassRef const ref) ::=> Void := {
        backBuffer isNil || displayRenderPass isNil ifTrue: {
            return: void
        }.

        stateTracker := theStateTracker.

        self
            renderShadowMaps;
            renderHDRScene;
            computeAverageLuminance;
            toneMapAndComposeHDRSceneDisplayingOn: backBuffer with: displayRenderPass.
    }.
}.

}. ## End of namespace ForwardRenderer
}. ## End of namespace Woden
