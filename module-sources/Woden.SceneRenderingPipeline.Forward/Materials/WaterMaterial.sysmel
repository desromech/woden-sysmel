namespace Woden definition: {
namespace Shaders definition: {

## FIXME: Support moving this to the other module.
WaterDeformationStateHarmonic extend: {
    const inline method evaluateAt: (position: Float32x2) at: (time: Float32) ::=> (Float32 -- Float32x2) := {
        <gpu>
        self evaluateAt: position at: time withPropagationSpeed: 2.0f
    }.

    const inline method evaluateAt: (position: Float32x2) at: (time: Float32) withPropagationSpeed: (propagationSpeed: Float32) ::=> (Float32 -- Float32x2) := {
        <gpu>
        let distance mutable type: Float32.
        let distanceDerivatives mutable type: Float32x2.
        isRadial ~= 0 ifTrue: {
            distance := (position - centerOrDirection) length.
            distanceDerivatives := (position - centerOrDirection) / (distance max: 0.001f).
        } ifFalse: {
            distance := position dot: centerOrDirection.
            distanceDerivatives := centerOrDirection.
        }.

        ## Compute the propagation speed factor.
        let omega := Float32 twoPi * frequency.
        let kappa := omega / propagationSpeed.
        let wavelength := (propagationSpeed / frequency) abs.

        let lodAttenuation := 1.0f. ## - smoothstep(wavelength*0.125f, wavelength*0.5f, lod);

        ## Compute the contribution by the harmonic.
        let phase := kappa*distance + omega*time.
        let height := lodAttenuation*amplitude * phase sin.

        ## Add the tangential factor
        let tangentialContributions := lodAttenuation * amplitude * kappa * phase cos * distanceDerivatives.

        (height, tangentialContributions)
    }.
}.

class WaterMaterialShaders superclass: ForwardSceneRenderingShaderSignature; definition: {
    macro method materialState := ``(`,self materialStateBinding _ state _).
    macro method albedoTexture := ``(`,self materialStateBinding _ texture0).
    macro method normalTexture := ``(`,self materialStateBinding _ texture1).
    macro method emissionTexture := ``(`,self materialStateBinding _ texture2).
    macro method occlusionRoughnessMetallicTexture := ``(`,self materialStateBinding _ texture3).

    macro method deformationState := ``(`,self renderableStateBinding _ waterDeformationState _).

    class FragmentOutput definition: {
        public field color0 type: Float32x4; location: 0.
    }.

    class VertexIO definition: {
        public field position type: Float32x3; location: 0.
        public field texcoord type: Float32x2; location: 1.
        public field color type: Float32x4; location: 2.
        public field surfacePosition type: Float32x2; location: 3.
        public field screenPosition type: Float32x4; location: 4.
    }.

    method transformNormal: (vector: Float32x3) ::=> Float32x3 := {
        let worldNormal := Float32x4(vector, 0.0f).
        (worldNormal * self cameraState inverseViewMatrix) xyz
    }.

    method evaluateWaterHeightAndDerivativesAt: (position: Float32x2) ::=> (Float32 -- Float32x2) := {
        let height mutable := 0.0f.
        let derivatives mutable := Float32x2(0, 0).

        0 until: WaterDeformationState HarmonicCount do: {:i :: Void |
            let harmonic := self deformationState harmonics[i].
            let (let harmonicHeight, let harmonicDerivatives) := harmonic evaluateAt: position at: self cameraState currentTime.
            height := height + harmonicHeight.
            derivatives := derivatives + harmonicDerivatives.
        }.

        ## FIXME: Avoid making these copies.
        (let _ := height, let _ := derivatives)
    }.

    method evaluateWaterHeightAt: (position: Float32x2) ::=> Float32
        := (self evaluateWaterHeightAndDerivativesAt: position) first.

    method evaluateWaterNormalAt: (position: Float32x2) ::=> Float32x3 := {
        let derivatives := (self evaluateWaterHeightAndDerivativesAt: position) second.
        let dx := derivatives x.
        let dy := derivatives y.

        Float32x3(dx negated, 1, dy negated) normalized
    }.

    method evaluateWaterNormalAt: (position: Float32x2) tangentNormal: (tangentNormal: Float32x3) ::=> Float32x3 := {
        let upVector := Float32x3(0.0f, 0.0f, -1.0f).
    	let N := self evaluateWaterNormalAt: position.
    	let T := upVector cross: N.
    	let B := (N cross: T) negated.

        (T * tangentNormal x + B * tangentNormal y + N * tangentNormal z) normalized.
    }.

    function vertex vertexShader(in: GenericVertexInput inputChannel, out: VertexIO outputChannel, stageOut: GPU VertexStageOutput outputChannel) => Void := {
        let input := in receive.

        let surfacePosition := input position xz.
        let height := self evaluateWaterHeightAt: surfacePosition.

        let modelPosition := input position + Float32x3(0, height, 0).

        let worldPosition := self objectState matrix * Float32x4(modelPosition, 1.0f).
        let viewPosition := self cameraState viewMatrix * worldPosition.
        let screenPosition := self cameraState projectionMatrix * viewPosition.

        out send: (VertexIO()
            position: viewPosition xyz;
            surfacePosition: surfacePosition;
            texcoord: input texcoord;
            color: self materialState albedo * self objectState color;
            screenPosition: screenPosition * self cameraState ndcToTextureFetchTransform;
            yourself).

        stageOut send: (GPU VertexStageOutput()
            screenPosition: screenPosition;
            yourself
        ).
    }.

    function fragment fragmentShader(in: VertexIO inputChannel, stageIn: GPU FragmentStageInput inputChannel, out: FragmentOutput outputChannel) => Void := {
        let input := in receive.
        let stageInput := stageIn receive.

        let P := input position.
        let V := P negated normalized.

        let tangentNormal := decodeNormalTexel(self normalSampler sample: self normalTexture at: input texcoord).
        let modelNormal := self evaluateWaterNormalAt: input surfacePosition tangentNormal: tangentNormal.
        let N mutable := self transformNormal: modelNormal.

        stageInput isFrontFacing ifFalse: {
            N := N negated.
        }.

        let albedo := input color * (self albedoSampler sample: self albedoTexture at: input texcoord).
        let emission := self materialState emission * (self albedoSampler sample: self emissionTexture at: input texcoord).

        let occlusionRoughnessMetallicSample := self albedoSampler sample: self occlusionRoughnessMetallicTexture at: input texcoord.
        let occlusion := occlusionRoughnessMetallicSample r.
        let roughness := self materialState roughnessFactor * occlusionRoughnessMetallicSample g.
        let metallic := self materialState metallicFactor * occlusionRoughnessMetallicSample b.

        let lightingResult := self computeForwardLightingWith: (MetallicRoughnessLightingParameters()
            P: P;
            V: P negated normalized;
            N: N;
            surfaceNormal: N;
            screenPosition: input screenPosition;
            emission: emission rgb;
            albedo: albedo rgb;
            occlusion: occlusion;
            metallic: metallic;
            roughness: roughness;
            opacityFactor: albedo a;
            yourself).

        out send: (FragmentOutput()
            color0: lightingResult;
            yourself)
    }.
}.

}. ## End of namespace Shaders
}. ## End of namespace Woden
