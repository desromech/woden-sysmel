namespace Woden definition: {
namespace Shaders definition: {

function decodeNormalTexel(texel: Float32x4) => Float32x3 := {
    let xy := texel rg*2.0f - 1.0f.
    Float32x3(xy, (1.0f - xy length2) sqrt)
}.

template MetallicRoughnessMaterialShaders(hasSkinning: _LiteralBoolean, hasColor0: _LiteralBoolean, hasTangent4: _LiteralBoolean)
    :=  class superclass: ForwardSceneRenderingShaderSignature; definition: {
    macro method materialState := ``(`,self materialStateBinding _ state _).
    macro method baseColorTexture := ``(`,self materialStateBinding _ texture0).
    macro method normalTexture := ``(`,self materialStateBinding _ texture1).
    macro method emissionTexture := ``(`,self materialStateBinding _ texture2).
    macro method occlusionTexture := ``(`,self materialStateBinding _ texture3).
    macro method roughnessMetallicTexture := ``(`,self materialStateBinding _ texture4).
    macro method skinMatrices := ``(`,self renderableStateBinding _ skinDeformationState _ skinMatrices ).

    compileTime constant VertexInput := GenericVertexInputTemplate(hasSkinning, hasColor0, hasTangent4).

    class FragmentOutput definition: {
        public field color0 type: Float32x4; location: 0.
    }.

    class VertexIO definition: {
        public field position type: Float32x3; location: 0.
        public field texcoord type: Float32x2; location: 1.
        public field color type: Float32x4; location: 2.
        public field normal type: Float32x3; location: 3.
        public field screenPosition type: Float32x4; location: 4.
        compileTime if: hasTangent4 then: {
            public field tangent type: Float32x3; location: 5.
            public field bitangent type: Float32x3; location: 6.
        }.
    }.

    compileTime if: hasSkinning then: {
        method skinPosition: (position: Float32x4) joints: (joints: UInt32x4) weights: (weights: Float32x4) ::=> Float32x4
            := self skinMatrices[joints x] * position * weights x +
            self skinMatrices[joints y] * position * weights y +
            self skinMatrices[joints z] * position * weights z +
            self skinMatrices[joints w] * position * weights w.

        method skinVector: (vector: Float32x3) joints: (joints: UInt32x4) weights: (weights: Float32x4) ::=> Float32x3
            := (self skinPosition: Float32x4(vector, 0) joints: joints weights: weights) xyz

    } else: {
        macro method skinPosition: position joints: joints weights: weights := position.
        macro method skinVector: vector joints: joints weights: weights := vector.
    }.

    method transformNormal: (vector: Float32x3) ::=> Float32x3 := {
        let modelNormal := Float32x4(vector, 0.0f).
        let worldNormal := Float32x4((modelNormal * self objectState inverseMatrix) xyz, 0.0f).
        (worldNormal * self cameraState inverseViewMatrix) xyz
    }.

    function vertex vertexShader(in: VertexInput inputChannel, out: VertexIO outputChannel, stageOut: GPU VertexStageOutput outputChannel) => Void := {
        let input := in receive.

        let modelPosition := self skinPosition: Float32x4(input position, 1) joints: input joints weights: input weights.
        let worldPosition := self objectState matrix * modelPosition.
        let viewPosition := self cameraState viewMatrix * worldPosition.
        let screenPosition := self cameraState projectionMatrix * viewPosition.

        let normal := self transformNormal: (self skinVector: input normal joints: input joints weights: input weights).

        let vertexOut mutable := VertexIO()
            position: viewPosition xyz;
            texcoord: input texcoord;
            color: self materialState baseColorFactor * self objectState color * input color;
            normal: normal;
            screenPosition: screenPosition * self cameraState ndcToTextureFetchTransform;
            yourself.

        compileTime if: hasTangent4 then: {
            let tangent := self transformNormal: (self skinVector: input tangent4 xyz joints: input joints weights: input weights).
            let bitangent := (normal cross: tangent) * input tangent4 w.

            vertexOut
                tangent: tangent;
                bitangent: bitangent.
        }.

        out send: vertexOut.

        stageOut send: (GPU VertexStageOutput()
            screenPosition: screenPosition;
            yourself
        ).
    }.

    function fragment fragmentShader(in: VertexIO inputChannel, stageIn: GPU FragmentStageInput inputChannel, out: FragmentOutput outputChannel) => Void := {
        let input := in receive.
        let stageInput := stageIn receive.

        let baseColor := input color * (self baseColorSampler sample: self baseColorTexture at: input texcoord).
        baseColor a < self materialState alphaCutoff ifTrue: {
            GPU discardFragment
        }.

        let P := input position.
        let V := P negated normalized.

        let SN mutable := input normal normalized.
        let N mutable := SN.
        compileTime if: hasTangent4 then: {
            let t := input tangent normalized.
            let b := input bitangent normalized.
            let n := SN.

            let tangentNormal := decodeNormalTexel(self normalSampler sample: self normalTexture at: input texcoord).
            let TBN := Float32x3x3(t, b, n).
            N := (TBN*tangentNormal) normalized.
        }.

        stageInput isFrontFacing ifFalse: {
            N := N negated.
            SN := SN negated.
        }.

        let emission := self materialState emissionFactor * (self baseColorSampler sample: self emissionTexture at: input texcoord).

        let roughnessMetallicSample := self baseColorSampler sample: self roughnessMetallicTexture at: input texcoord.
        let occlusion := self materialState occlusionFactor * (self baseColorSampler sample: self occlusionTexture at: input texcoord) r.
        let roughness := self materialState roughnessFactor * roughnessMetallicSample g.
        let metallic := self materialState metallicFactor * roughnessMetallicSample b.

        let lightingResult := self computeForwardLightingWith: (MetallicRoughnessLightingParameters()
            P: P;
            V: P negated normalized;
            N: N;
            surfaceNormal: SN;
            screenPosition: input screenPosition;
            emission: emission rgb;
            baseColor: baseColor rgb;
            occlusion: occlusion;
            metallic: metallic;
            roughness: roughness;
            opacityFactor: baseColor a;
            yourself).

        out send: (FragmentOutput()
            color0: lightingResult;
            yourself)
    }.

    function surfaceNormalValueFragment fragmentShader(in: VertexIO inputChannel, stageIn: GPU FragmentStageInput inputChannel, out: FragmentOutput outputChannel) => Void := {
        let input := in receive.
        let stageInput := stageIn receive.

        let baseColor := input color * (self baseColorSampler sample: self baseColorTexture at: input texcoord).
        baseColor a < self materialState alphaCutoff ifTrue: {
            GPU discardFragment
        }.

        let N mutable := input normal normalized.
        stageInput isFrontFacing ifFalse: {
            N := N negated.
        }.

        out send: (FragmentOutput()
            color0: Float32x4(N * 0.5f + 0.5f, 1);
            yourself)
    }.

    function alphaTestingFragment fragmentShader(in: VertexIO inputChannel, stageIn: GPU FragmentStageInput inputChannel) => Void := {
        let input := in receive.
        let stageInput := stageIn receive.

        let baseColor := input color * (self baseColorSampler sample: self baseColorTexture at: input texcoord).
        baseColor a < self materialState alphaCutoff ifTrue: {
            GPU discardFragment
        }.
    }.
}.

}. ## End of namespace Shaders
}. ## End of namespace Woden
