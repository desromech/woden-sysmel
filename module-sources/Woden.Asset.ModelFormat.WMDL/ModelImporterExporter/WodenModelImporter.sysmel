namespace Woden definition: {
namespace Assets definition: {

useNamespace: Stdn Serialization.
useNamespace: Stdn Graphics Core.
useNamespace: Stdn Math.

class WodenModelImporter definition: {
    field parentFolder type: Stdn FileReference.
    field modelAsset type: ModelAssetPtr.

    method parseBuffer: (object: DOM Object const ref) ::=> Void := {
        let buffer := modelAsset _ newBuffer.
        buffer _
            name: (object getString: "name" asMutableString default: "" asMutableString);
            dataSize: (object getUIntPointer: "dataSize" asMutableString).

        object at: "data" asMutableString ifPresent: {:(DOM Value const ref)dataValue :: Void |
            let content := DOM valueToByteArray(dataValue).
            Stdn assert: content size = buffer _ dataSize.

            buffer _ data reset: (Stdn malloc(content size) reinterpretCastTo: UInt8 pointer).
            Stdn memcpy(buffer _ data getPointer, content data, content size)
        } ifAbsent: {
            object at: "dataSize" asMutableString ifPresent: {:(DOM Value const ref)dataSizeValue :: Void |
                let dataSize := DOM valueToUIntPointer(dataSizeValue).
                buffer _ data reset: (Stdn zmalloc(dataSize) reinterpretCastTo: UInt8 pointer).
            } ifAbsent: {
                object at: "uri" asMutableString ifPresent: {:(DOM Value const ref)uriValue :: Void |
                    let uri := uriValue get: Stdn String.
                    let uriFileRef := parentFolder / uri asArraySlice.
                    uriFileRef exists ifTrue: {
                        let readStream := uriFileRef binaryUnbufferedReadStream.
                        readStream ifNil: {return: void}.

                        buffer _ data reset: (Stdn zmalloc(buffer _ dataSize) reinterpretCastTo: UInt8 pointer).
                        readStream _ read: buffer _ data getPointer size: buffer _ dataSize
                    }.
                }.
            }
        }
    }.

    method parseBuffers: (list: DOM List ref) ::=> Void := {
        list do: {:each :: Void |
            self parseBuffer: (each get: DOM ObjectPtr) _
        }.
    }.

    method readBinaryBufferData: (buffer: ModelAssetBinaryBufferPtr const ref) from: (input: Stdn IO Stream ref) ::=> Void := {
        buffer _ dataSize > 0 ifTrue: {
            input read: buffer _ data getPointer size: buffer _ dataSize
        }
    }.

    method readBinaryBuffersDataFrom: (input: Stdn IO Stream ref) ::=> Void := {
        modelAsset _ buffers do: {:each :: Void |
            self readBinaryBufferData: each from: input
        }.
    }.

    method parseBufferView: (object: DOM Object const ref) ::=> Void := {
        let bufferView := modelAsset _ newBufferView.
        bufferView _
            name: (object getString: "name" asMutableString default: "" asMutableString);
            buffer: (modelAsset _ buffers[object getUIntPointer: "buffer" asMutableString]);
            offset: (object getUIntPointer: "offset" asMutableString default: 0);
            size: (object getUIntPointer: "size" asMutableString);
            stride: (object getUIntPointer: "stride" asMutableString default: 0);
            usage: ((object getUInt32: "usage" asMutableString default: 0) castTo: BufferUsageMode).
    }.

    method parseBufferViews: (list: DOM List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseBufferView: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseAccessor: (object: DOM Object const ref) ::=> Void := {
        let bufferAccessor := modelAsset _ newBufferAccessor.
        bufferAccessor _
            name: (object getString: "name" asMutableString default: "" asMutableString);
            bufferView: (modelAsset _ bufferViews[object getUIntPointer: "bufferView" asMutableString]);
            offset: (object getUIntPointer: "offset" asMutableString default: 0);
            count: (object getUIntPointer: "count" asMutableString);
            minValue: (object getFloat64x4: "minValue" asMutableString default: 0);
            maxValue: (object getFloat64x4: "maxValue" asMutableString default: 0);
            format: ((object getUInt32: "format" asMutableString default: 0) castTo: PixelFormat);
            columnCount: (object getUInt32: "columnCount" asMutableString default: 0).
    }.

    method parseAccessors: (list: DOM List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseAccessor: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseImage: (object: DOM Object const ref) ::=> Void := {
        let image := modelAsset _ newImage.
        image _
            name: (object getString: "name" asMutableString default: "" asMutableString);
            uri: (object getString: "uri" asMutableString default: "" asMutableString);
            mimeType: (object getString: "mimeType" asMutableString default: "" asMutableString);
            usageMode: ((object getUInt32: "usageMode" asMutableString default: 0) castTo: ModelAssetImageUsageMode).
        object at: "bufferView" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            image _ bufferView: (modelAsset _ bufferViews[DOM valueToUIntPointer(value)])
        }.
    }.

    method parseImages: (list: DOM List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseImage: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseSampler: (object: DOM Object const ref) ::=> Void := {
        let sampler := modelAsset _ newSampler.
        sampler _
            name: (object getString: "name" asMutableString default: "" asMutableString).
        ##Stdn stdout << "TODO: parseSampler " << sampler _ name; nl.
    }.

    method parseSamplers: (list: DOM List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseSampler: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseTexture: (object: DOM Object const ref) ::=> Void := {
        let texture := modelAsset _ newTexture.
        texture _
            name: (object getString: "name" asMutableString default: "" asMutableString).

        object at: "sampler" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            texture _ sampler: (modelAsset _ samplers[DOM valueToUIntPointer(value)])
        }.
        object at: "image" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            texture _ image: (modelAsset _ images[DOM valueToUIntPointer(value)])
        }.
    }.

    method parseTextures: (list: DOM List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseTexture: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseMetallicRoughnessMaterial: (object: DOM Object const ref) ::=> ModelAssetMaterialPtr := {
        let material := modelAsset _ newMetallicRoughnessMaterial.

        material _
            baseColorFactor: (object getFloat32x4: "baseColorFactor" asMutableString default: 1.0f);
            metallicFactor: (object getFloat32: "metallicFactor" asMutableString default: 1.0f);
            roughnessFactor: (object getFloat32: "roughnessFactor" asMutableString default: 1.0f).
        object at: "baseColorTexture" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            material _ baseColorTexture: modelAsset _ textures[DOM valueToUIntPointer(value)].
            material _ baseColorTexture _ setColorUsage
        }.
        object at: "metallicRoughnessTexture" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            material _ metallicRoughnessTexture: modelAsset _ textures[DOM valueToUIntPointer(value)].
            material _ metallicRoughnessTexture _ setLinearUsage
        }.

        material upCastFor: ModelAssetMaterial.
    }.

    method parseMaterial: (object: DOM Object const ref) ::=> Void := {
        let material mutable := ModelAssetMaterialPtr nil.
        object at: "metallicRoughness" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            material := self parseMetallicRoughnessMaterial: (value get: DOM ObjectPtr) _.
        }.

        material ifNil: {
            material := modelAsset _ newMetallicRoughnessMaterial upCastFor: ModelAssetMaterial.
        }.

        material _
            name: (object getString: "name" asMutableString default: "" asMutableString);
            emissionFactor: (object getFloat32x3: "emissionFactor" asMutableString default: 0);
            doubleSided: (object getBoolean8: "doubleSided" asMutableString default: false);
            alphaCutoff: (object getFloat32: "alphaCutoff" asMutableString default: 0.5f);
            alphaMode: ((object getUInt32: "alphaMode" asMutableString default: 0) castTo: ModelAssetMaterialAlphaMode).

        object at: "occlusionTexture" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            material _ occlusionTexture: modelAsset _ textures[DOM valueToUIntPointer(value)].
            material _ occlusionTexture _ setLinearUsage
        }.

        object at: "emissionTexture" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            material _ emissionTexture: modelAsset _ textures[DOM valueToUIntPointer(value)].
            material _ emissionTexture _ setColorUsage
        }.

        object at: "normalTexture" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            material _ normalTexture: modelAsset _ textures[DOM valueToUIntPointer(value)].
            material _ normalTexture _ setNormalUsage
        }.
    }.

    method parseMaterials: (list: DOM List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseMaterial: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseMeshPrimitiveAttributes: (list: DOM List const ref) ::=> ModelAssetMeshPrimitiveAttributesPtr := {
        let attributeList mutable := ModelAssetMeshPrimitiveAttributeList().

        list do: {:(DOM Value const ref)attribute :: Void |
            let attributeObject ref := (attribute get: DOM ObjectPtr) _.
            let location := (attributeObject getUInt32: "location" asMutableString default: 0) castTo: VertexAttributeLocation.
            let accessor := modelAsset _ bufferAccessors[attributeObject getUInt32: "accessor" asMutableString default: 0].
            attributeList add: (ModelAssetMeshPrimitiveAttribute()
                accessor: accessor;
                location: location;
                yourself
            )
        }.

        let result := modelAsset _ newMeshPrimitiveAttributes.
        result _ attributes: attributeList.
        result
    }.

    method parseMesh: (mesh: ModelAssetMeshPtr const ref) primitive: (object: DOM Object const ref) ::=> Void := {

        let primitive := ModelAssetMeshPrimitive sharedNew.
        mesh _ primitives add: primitive.

        primitive _
            attributes: (self parseMeshPrimitiveAttributes: (object getList: "attributes" asMutableString) _ );
            primitiveTopology: ((object getUInt32: "primitiveTopology" asMutableString default: 0) castTo: PrimitiveTopology).

        object at: "indices" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            primitive _ indices: (modelAsset _ bufferAccessors[DOM valueToUIntPointer(value)])
        }.

        object at: "material" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            primitive _ material: (modelAsset _ materials[DOM valueToUIntPointer(value)])
        }.
    }.

    method parseMesh: (object: DOM Object const ref) ::=> Void := {
        let mesh := modelAsset _ newMesh.
        mesh _
            name: (object getString: "name" asMutableString default: "" asMutableString).

        object at: "primitives" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            (value get: DOM ListPtr) _ do: {:each :: Void |
                self parseMesh: mesh primitive: (each get: DOM ObjectPtr) _
            }.
        }.
    }.

    method parseMeshes: (list: DOM List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseMesh: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseSkeleton: (object: DOM Object const ref) ::=> Void := {
        let skeleton := modelAsset _ newSkeleton.
        skeleton _
            name: (object getString: "name" asMutableString default: "" asMutableString).

        object at: "inverseBindMatrices" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            skeleton _ inverseBindMatricesAccessor: modelAsset _ bufferAccessors[DOM valueToUIntPointer(value)]
        }.
    }.

    method parseSkeletons: (list: DOM List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseSkeleton: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseSkeleton: (skeleton: ModelAssetSkeletonPtr const ref) nodes:(object: DOM Object const ref) ::=> Void := {
        let joints := object getList: "joints" asMutableString.
        skeleton _ joints reserve: joints _ size.
        joints _ do: {:(DOM Value const ref)value :: Void |
            skeleton _ joints add: modelAsset _ nodes[DOM valueToUIntPointer(value)]
        }.

        object at: "rootJoint" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            skeleton _ rootJoint := modelAsset _ nodes[DOM valueToUIntPointer(value)]
        }.
    }.

    method parseSkeletonNodes: (list: DOM List const ref) ::=> Void := {
        list doWithIndex: {:each :index :: Void |
            self parseSkeleton: modelAsset _ skeletons[index] nodes: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseNode: (object: DOM Object const ref) ::=> Void := {
        let node := modelAsset _ newNode.
        node _
            name: (object getString: "name" asMutableString default: "" asMutableString);
            isJoint: (object getBoolean8: "isJoint" asMutableString default: false);
            hasValidJointIndex: (object getBoolean8: "hasValidJointIndex" asMutableString default: false);
            jointIndex: (object getUIntPointer: "jointIndex" asMutableString default: 0);
            parentJointIndex: (object getIntPointer: "parentJointIndex" asMutableString default: -1).

        object at: "mesh" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            node _ mesh: (modelAsset _ meshes[DOM valueToUIntPointer(value)])
        }.

        object at: "skeleton" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            node _ skeleton: (modelAsset _ skeletons[DOM valueToUIntPointer(value)])
        }.

        object at: "scale" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let scale := DOM valueToFloat32x3(value, 1).
            node _ scale: scale.
            node _ transform scaleBy: scale.
        }.
        object at: "rotation" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let rotation := QuaternionF32 xyzw: DOM valueToFloat32x4(value, Float32x4(0, 0, 0, 1)).
            node _ rotationQuaternion: rotation.
            node _ transform applyOrthonormalMatrix: rotation asFloat32x3x3.
        }.
        object at: "translation" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let translation := DOM valueToFloat32x3(value, 0).
            node _ translation: translation.
            node _ transform translateBy: translation.
        }.

        object at: "matrix" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let matrix := DOM valueToFloat32x4x4(value, Float32x4x4 identity).
            Stdn stdout << "TODO: parse node matrix "; nl.
            Stdn stdout << matrix firstRow; nl.
            Stdn stdout << matrix secondRow; nl.
            Stdn stdout << matrix thirdRow; nl.
            Stdn stdout << matrix fourthRow; nl.
        }.

    }.

    method parseNode: (node: ModelAssetNodePtr const ref) children: (object: DOM Object const ref) ::=> Void := {
        object at: "children" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let children ref := (value get: DOM ListPtr) _.
            node _ children reserve: children size.
            0 until: children size do: {:i :: Void |
                node _ children add: (modelAsset _ nodes[children getUIntPointer: i])
            }
        }
    }.

    method parseNodes: (list: DOM List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseNode: (each get: DOM ObjectPtr) _
        }.

        list doWithIndex: {:each :index :: Void |
            self parseNode: modelAsset _ nodes[index] children: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseScene: (object: DOM Object const ref) ::=> Void := {
        let scene := modelAsset _ newScene.
        scene _
            name: (object getString: "name" asMutableString default: "" asMutableString).

        object at: "rootNodes" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            let nodeList ref := (value get: DOM ListPtr) _.
            scene _ rootNodes reserve: nodeList size.
            0 until: nodeList size do: {:i :: Void |
                scene _ rootNodes add: (modelAsset _ nodes[nodeList getUIntPointer: i])
            }.
        }.
    }.

    method parseScenes: (list: DOM List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseScene: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseAnimation: (animation: ModelAssetAnimationPtr const ref) sampler: (object: DOM Object const ref) ::=> Void := {
        let sampler := ModelAssetAnimationSampler sharedNew.
        sampler _
            index: animation _ samplers size;
            inputAccessor: (modelAsset _ bufferAccessors[object getUIntPointer: "inputAccessor" asMutableString]);
            outputAccessor: (modelAsset _ bufferAccessors[object getUIntPointer: "outputAccessor" asMutableString]);
            interpolationMethod: ((object getUInt32: "interpolationMethod" asMutableString) castTo: ModelAssetAnimationInterpolationMethod).
        animation _ samplers add: sampler.
    }.

    method parseAnimation: (animation: ModelAssetAnimationPtr const ref) channel: (object: DOM Object const ref) ::=> Void := {
        let channel := ModelAssetAnimationChannel sharedNew.
        channel _
            sampler: (animation _ samplers[object getUIntPointer: "sampler" asMutableString]);
            targetProperty: ((object getUInt32: "targetProperty" asMutableString) castTo: ModelAssetAnimationTargetProperty).

        object at: "targetNode" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            channel _ targetNode: modelAsset _ nodes[DOM valueToUIntPointer(value)]
        }.

        animation _ channels add: channel.
    }.

    method parseAnimation: (object: DOM Object const ref) ::=> Void := {
        let animation := modelAsset _ newAnimation.
        animation _
            name: (object getString: "name" asMutableString default: "" asMutableString).

        let samplers := object getList: "samplers" asMutableString.
        animation _ samplers reserve: samplers _ size.
        samplers _ do: {:each :: Void |
            self parseAnimation: animation sampler: (each get: DOM ObjectPtr) _
        }.

        let channels := object getList: "channels" asMutableString.
        animation _ channels reserve: channels _ size.
        channels _ do: {:each :: Void |
            self parseAnimation: animation channel: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseAnimations: (list: DOM List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseAnimation: (each get: DOM ObjectPtr) _
        }.
    }.

    method parseTopLevel: (object: DOM Object const ref) ::=> ModelAssetPtr := {
        modelAsset := ModelAsset sharedNew.
        modelAsset _ parentFolder: parentFolder.
        object at: "buffers" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseBuffers: (value get: DOM ListPtr) _
        }.
        object at: "bufferViews" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseBufferViews: (value get: DOM ListPtr) _
        }.
        object at: "accessors" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseAccessors: (value get: DOM ListPtr) _
        }.
        object at: "images" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseImages: (value get: DOM ListPtr) _
        }.
        object at: "samplers" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseSamplers: (value get: DOM ListPtr) _
        }.
        object at: "textures" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseTextures: (value get: DOM ListPtr) _
        }.
        object at: "materials" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseMaterials: (value get: DOM ListPtr) _
        }.
        object at: "meshes" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseMeshes: (value get: DOM ListPtr) _
        }.
        object at: "skeletons" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseSkeletons: (value get: DOM ListPtr) _
        }.
        object at: "nodes" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseNodes: (value get: DOM ListPtr) _
        }.
        object at: "skeletons" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseSkeletonNodes: (value get: DOM ListPtr) _
        }.
        object at: "scenes" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseScenes: (value get: DOM ListPtr) _
        }.
        object at: "animations" asMutableString ifPresent: {:(DOM Value const ref)value :: Void |
            self parseAnimations: (value get: DOM ListPtr) _
        }.

        modelAsset
    }.

    method importFromFileReference: (fileReference: Stdn FileReference const ref) ::=> ModelAssetPtr := {
        parentFolder := fileReference parent.

        let inputReadStream mutable := fileReference binaryReadStream.
        inputReadStream ifNil: {return: ModelAssetPtr nil}.

        let isReadingTextModel := fileReference extension asArraySlice = "wtmdl".
        let domValue := isReadingTextModel
            ifTrue: { JSON ValueParser parseStream: inputReadStream getPointer }
            ifFalse: { MessagePack ValueDecoder decodeStream: inputReadStream getPointer }.

        let result := self parseTopLevel: (domValue get: DOM ObjectPtr) _.
        isReadingTextModel ifFalse: {
            self readBinaryBuffersDataFrom: inputReadStream _
        }.

        result
    }.
}.

} ## End of namespace Assets
} ## End of namespace Woden
