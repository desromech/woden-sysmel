namespace Woden definition: {
namespace Assets definition: {

useNamespace: Std Serialization.
useNamespace: Std Graphics Core.
useNamespace: Std Math.

class WodenModelImporter definition: {
    field parentFolder type: Std FileReference.
    field modelAsset type: ModelAssetRef.

    method parseBuffer: (object: DOM ObjectRef const ref) ::=> Void := {
        let buffer := modelAsset newBuffer.
        buffer
            name: (object getString: "name" default: "");
            dataSize: (object getUIntPointer: "dataSize").

        object at: "data" ifPresent: {:(DOM Value const ref)dataValue :: Void |
            let content := DOM valueToByteArray(dataValue).
            Std assert: content size = buffer dataSize.

            buffer data reset: (Std malloc(content size) reinterpretCastTo: UInt8 pointer).
            Std memcpy(buffer data getPointer, content data, content size)
        } ifAbsent: {
            object at: "dataSize" ifPresent: {:(DOM Value const ref)dataSizeValue :: Void |
                let dataSize := DOM valueToUIntPointer(dataSizeValue).
                buffer data reset: (Std zmalloc(dataSize) reinterpretCastTo: UInt8 pointer).
            } ifAbsent: {
                object at: "uri" ifPresent: {:(DOM Value const ref)uriValue :: Void |
                    let uri := uriValue get: Std String.
                    let uriFileRef := parentFolder / uri asArraySlice.
                    uriFileRef exists ifTrue: {
                        let readStream := uriFileRef binaryUnbufferedReadStream.
                        readStream ifNil: {return: void}.

                        buffer data reset: (Std zmalloc(buffer dataSize) reinterpretCastTo: UInt8 pointer).
                        readStream _ read: buffer data getPointer size: buffer dataSize
                    }.
                }.
            }
        }
    }.

    method parseBuffers: (list: DOM ListRef const ref) ::=> Void := {
        list do: {:(DOM Value const ref)each :: Void |
            self parseBuffer: (each get: DOM ObjectRef)
        }.
    }.

    method readBinaryBufferData: (buffer: ModelAssetBinaryBufferRef const ref) from: (input: Std IO Stream ref) ::=> Void := {
        buffer dataSize > 0 ifTrue: {
            input read: buffer data getPointer size: buffer dataSize
        }
    }.

    method readBinaryBuffersDataFrom: (input: Std IO Stream ref) ::=> Void := {
        modelAsset buffers do: {:each :: Void |
            self readBinaryBufferData: each from: input
        }.
    }.

    method parseBufferView: (object: DOM ObjectRef const ref) ::=> Void := {
        modelAsset newBufferView
            name: (object getString: "name" default: "");
            buffer: (modelAsset buffers[object getUIntPointer: "buffer"]);
            offset: (object getUIntPointer: "offset" default: 0);
            size: (object getUIntPointer: "size");
            stride: (object getUIntPointer: "stride" default: 0);
            usage: ((object getUInt32: "usage" default: 0) castTo: BufferUsageMode).
    }.

    method parseBufferViews: (list: DOM ListRef const ref) ::=> Void := {
        list do: {:(DOM Value const ref)each :: Void |
            self parseBufferView: (each get: DOM ObjectRef)
        }.
    }.

    method parseAccessor: (object: DOM ObjectRef const ref) ::=> Void := {
        modelAsset newBufferAccessor
            name: (object getString: "name" default: "");
            bufferView: (modelAsset bufferViews[object getUIntPointer: "bufferView"]);
            offset: (object getUIntPointer: "offset" default: 0);
            count: (object getUIntPointer: "count");
            minValue: (object getFloat64x4: "minValue" default: 0);
            maxValue: (object getFloat64x4: "maxValue" default: 0);
            format: ((object getUInt32: "format" default: 0) castTo: PixelFormat);
            columnCount: (object getUInt32: "columnCount" default: 0).
    }.

    method parseAccessors: (list: DOM ListRef const ref) ::=> Void := {
        list do: {:(DOM Value const ref)each :: Void |
            self parseAccessor: (each get: DOM ObjectRef)
        }.
    }.

    method parseImage: (object: DOM ObjectRef const ref) ::=> Void := {
        let image := modelAsset newImage
            name: (object getString: "name" default: "");
            uri: (object getString: "uri" default: "");
            mimeType: (object getString: "mimeType" default: "");
            usageMode: ((object getUInt32: "usageMode" default: 0) castTo: ModelAssetImageUsageMode);
            yourself.
        object at: "bufferView" ifPresent: {:(DOM Value const ref)value :: Void |
            image bufferView: (modelAsset bufferViews[DOM valueToUIntPointer(value)])
        }.
    }.

    method parseImages: (list: DOM ListRef const ref) ::=> Void := {
        list do: {:(DOM Value const ref)each :: Void |
            self parseImage: (each get: DOM ObjectRef)
        }.
    }.

    method parseSampler: (object: DOM ObjectRef const ref) ::=> Void := {
        modelAsset newSampler
            name: (object getString: "name" default: "")
    }.

    method parseSamplers: (list: DOM ListRef const ref) ::=> Void := {
        list do: {:(DOM Value const ref)each :: Void |
            self parseSampler: (each get: DOM ObjectRef)
        }.
    }.

    method parseTexture: (object: DOM ObjectRef const ref) ::=> Void := {
        let texture := modelAsset newTexture
            name: (object getString: "name" default: "");
            yourself.

        object at: "sampler" ifPresent: {:(DOM Value const ref)value :: Void |
            texture sampler: (modelAsset samplers[DOM valueToUIntPointer(value)])
        }.
        object at: "image" ifPresent: {:(DOM Value const ref)value :: Void |
            texture image: (modelAsset images[DOM valueToUIntPointer(value)])
        }.
    }.

    method parseTextures: (list: DOM ListRef const ref) ::=> Void := {
        list do: {:(DOM Value const ref)each :: Void |
            self parseTexture: (each get: DOM ObjectRef)
        }.
    }.

    method parseMetallicRoughnessMaterial: (object: DOM ObjectRef const ref) ::=> ModelAssetMaterialRef := {
        let material := modelAsset newMetallicRoughnessMaterial
            baseColorFactor: (object getFloat32x4: "baseColorFactor" default: 1.0f);
            metallicFactor: (object getFloat32: "metallicFactor" default: 1.0f);
            roughnessFactor: (object getFloat32: "roughnessFactor" default: 1.0f);
            yourself.
        object at: "baseColorTexture" ifPresent: {:(DOM Value const ref)value :: Void |
            material baseColorTexture: modelAsset textures[DOM valueToUIntPointer(value)].
            material baseColorTexture setColorUsage
        }.
        object at: "metallicRoughnessTexture" ifPresent: {:(DOM Value const ref)value :: Void |
            material metallicRoughnessTexture: modelAsset textures[DOM valueToUIntPointer(value)].
            material metallicRoughnessTexture setLinearUsage
        }.

        material upCastFor: ModelAssetMaterial.
    }.

    method parseMaterial: (object: DOM ObjectRef const ref) ::=> Void := {
        let material mutable := ModelAssetMaterialRef nil.
        object at: "metallicRoughness" ifPresent: {:(DOM Value const ref)value :: Void |
            material := self parseMetallicRoughnessMaterial: (value get: DOM ObjectRef).
        }.

        material ifNil: {
            material := modelAsset newMetallicRoughnessMaterial upCastFor: ModelAssetMaterial.
        }.

        material
            name: (object getString: "name" default: "");
            emissionFactor: (object getFloat32x3: "emissionFactor" default: 0);
            doubleSided: (object getBoolean8: "doubleSided" default: false);
            alphaCutoff: (object getFloat32: "alphaCutoff" default: 0.5f);
            alphaMode: ((object getUInt32: "alphaMode" default: 0) castTo: ModelAssetMaterialAlphaMode).

        object at: "occlusionTexture" ifPresent: {:(DOM Value const ref)value :: Void |
            material occlusionTexture: modelAsset textures[DOM valueToUIntPointer(value)].
            material occlusionTexture setLinearUsage
        }.

        object at: "emissionTexture" ifPresent: {:(DOM Value const ref)value :: Void |
            material emissionTexture: modelAsset textures[DOM valueToUIntPointer(value)].
            material emissionTexture setColorUsage
        }.

        object at: "normalTexture" ifPresent: {:(DOM Value const ref)value :: Void |
            material normalTexture: modelAsset textures[DOM valueToUIntPointer(value)].
            material normalTexture setNormalUsage
        }.
    }.

    method parseMaterials: (list: DOM ListRef const ref) ::=> Void := {
        list do: {:(DOM Value const ref)each :: Void |
            self parseMaterial: (each get: DOM ObjectRef)
        }.
    }.

    method parseMeshPrimitiveAttributes: (list: DOM ListRef const ref) ::=> ModelAssetMeshPrimitiveAttributesRef := {
        let attributeList mutable := ModelAssetMeshPrimitiveAttributeList().

        list do: {:(DOM Value const ref)attribute :: Void |
            let attributeObject ref := attribute get: DOM ObjectRef.
            let location := (attributeObject getUInt32: "location" default: 0) castTo: VertexAttributeLocation.
            let accessor := modelAsset bufferAccessors[attributeObject getUInt32: "accessor" default: 0].
            attributeList add: (ModelAssetMeshPrimitiveAttribute()
                accessor: accessor;
                location: location;
                yourself
            )
        }.

        modelAsset newMeshPrimitiveAttributes
            attributes: attributeList;
            yourself
    }.

    method parseMesh: (mesh: ModelAssetMeshRef const ref) primitive: (object: DOM ObjectRef const ref) ::=> Void := {

        let primitive := ModelAssetMeshPrimitive new.
        mesh primitives add: primitive.

        primitive
            attributes: (self parseMeshPrimitiveAttributes: (object getList: "attributes"));
            primitiveTopology: ((object getUInt32: "primitiveTopology" default: 0) castTo: PrimitiveTopology).

        object at: "indices" ifPresent: {:(DOM Value const ref)value :: Void |
            primitive indices: (modelAsset bufferAccessors[DOM valueToUIntPointer(value)])
        }.

        object at: "material" ifPresent: {:(DOM Value const ref)value :: Void |
            primitive material: (modelAsset materials[DOM valueToUIntPointer(value)])
        }.
    }.

    method parseMesh: (object: DOM ObjectRef const ref) ::=> Void := {
        let mesh := modelAsset newMesh
            name: (object getString: "name" default: "");
            yourself.

        object at: "primitives" ifPresent: {:(DOM Value const ref)value :: Void |
            (value get: DOM ListRef) do: {:(DOM Value const ref)each :: Void |
                self parseMesh: mesh primitive: (each get: DOM ObjectRef)
            }.
        }.
    }.

    method parseMeshes: (list: DOM ListRef const ref) ::=> Void := {
        list do: {:(DOM Value const ref)each :: Void |
            self parseMesh: (each get: DOM ObjectRef)
        }.
    }.

    method parseSkeleton: (object: DOM ObjectRef const ref) ::=> Void := {
        let skeleton := modelAsset newSkeleton
            name: (object getString: "name" default: "");
            yourself.

        object at: "inverseBindMatrices" ifPresent: {:(DOM Value const ref)value :: Void |
            skeleton inverseBindMatricesAccessor: modelAsset bufferAccessors[DOM valueToUIntPointer(value)]
        }.
    }.

    method parseSkeletons: (list: DOM ListRef const ref) ::=> Void := {
        list do: {:(DOM Value const ref)each :: Void |
            self parseSkeleton: (each get: DOM ObjectRef)
        }.
    }.

    method parseSkeleton: (skeleton: ModelAssetSkeletonRef const ref) nodes:(object: DOM ObjectRef const ref) ::=> Void := {
        let joints := object getList: "joints".
        skeleton joints reserve: joints size.
        joints do: {:(DOM Value const ref)value :: Void |
            skeleton joints add: modelAsset nodes[DOM valueToUIntPointer(value)]
        }.

        object at: "rootJoint" ifPresent: {:(DOM Value const ref)value :: Void |
            skeleton rootJoint := modelAsset nodes[DOM valueToUIntPointer(value)]
        }.
    }.

    method parseSkeletonNodes: (list: DOM ListRef const ref) ::=> Void := {
        list doWithIndex: {:(DOM Value const ref)each :(UIntPointer)index :: Void |
            self parseSkeleton: modelAsset skeletons[index] nodes: (each get: DOM ObjectRef)
        }.
    }.

    method parseNode: (object: DOM ObjectRef const ref) ::=> Void := {
        let node := modelAsset newNode
            name: (object getString: "name" default: "");
            isJoint: (object getBoolean8: "isJoint" default: false);
            hasValidJointIndex: (object getBoolean8: "hasValidJointIndex" default: false);
            jointIndex: (object getUIntPointer: "jointIndex" default: 0);
            parentJointIndex: (object getIntPointer: "parentJointIndex" default: -1);
            yourself.

        object at: "mesh" ifPresent: {:(DOM Value const ref)value :: Void |
            node mesh: (modelAsset meshes[DOM valueToUIntPointer(value)])
        }.

        object at: "skeleton" ifPresent: {:(DOM Value const ref)value :: Void |
            node skeleton: (modelAsset skeletons[DOM valueToUIntPointer(value)])
        }.

        object at: "scale" ifPresent: {:(DOM Value const ref)value :: Void |
            let scale := DOM valueToFloat32x3(value, 1).
            node scale: scale.
            node transform scaleBy: scale.
        }.
        object at: "rotation" ifPresent: {:(DOM Value const ref)value :: Void |
            let rotation := QuaternionF32 xyzw: DOM valueToFloat32x4(value, Float32x4(0, 0, 0, 1)).
            node rotationQuaternion: rotation.
            node transform applyOrthonormalMatrix: rotation asFloat32x3x3.
        }.
        object at: "translation" ifPresent: {:(DOM Value const ref)value :: Void |
            let translation := DOM valueToFloat32x3(value, 0).
            node translation: translation.
            node transform translateBy: translation.
        }.

        object at: "matrix" ifPresent: {:(DOM Value const ref)value :: Void |
            let matrix := DOM valueToFloat32x4x4(value, Float32x4x4 identity).
            Std stdout << "TODO: parse node matrix "; nl.
            Std stdout << matrix firstRow; nl.
            Std stdout << matrix secondRow; nl.
            Std stdout << matrix thirdRow; nl.
            Std stdout << matrix fourthRow; nl.
        }.

    }.

    method parseNode: (node: ModelAssetNodeRef const ref) children: (object: DOM ObjectRef const ref) ::=> Void := {
        object at: "children" ifPresent: {:(DOM Value const ref)value :: Void |
            let children ref := (value get: DOM ListRef).
            node children reserve: children size.
            0 until: children size do: {:i :: Void |
                node children add: (modelAsset nodes[children getUIntPointer: i])
            }
        }
    }.

    method parseNodes: (list: DOM ListRef const ref) ::=> Void := {
        list do: {:(DOM Value const ref)each :: Void |
            self parseNode: (each get: DOM ObjectRef)
        }.

        list doWithIndex: {:(DOM Value const ref)each :(UIntPointer)index :: Void |
            self parseNode: modelAsset nodes[index] children: (each get: DOM ObjectRef)
        }.
    }.

    method parseScene: (object: DOM ObjectRef const ref) ::=> Void := {
        let scene := modelAsset newScene
            name: (object getString: "name" default: "");
            yourself.

        object at: "rootNodes" ifPresent: {:(DOM Value const ref)value :: Void |
            let nodeList ref := (value get: DOM ListRef).
            scene rootNodes reserve: nodeList size.
            0 until: nodeList size do: {:i :: Void |
                scene rootNodes add: (modelAsset nodes[nodeList getUIntPointer: i])
            }.
        }.
    }.

    method parseScenes: (list: DOM ListRef const ref) ::=> Void := {
        list do: {:(DOM Value const ref)each :: Void |
            self parseScene: (each get: DOM ObjectRef)
        }.
    }.

    method parseAnimation: (animation: ModelAssetAnimationRef const ref) sampler: (object: DOM ObjectRef const ref) ::=> Void := {
        animation samplers add: (ModelAssetAnimationSampler new
            index: animation samplers size;
            inputAccessor: (modelAsset bufferAccessors[object getUIntPointer: "inputAccessor"]);
            outputAccessor: (modelAsset bufferAccessors[object getUIntPointer: "outputAccessor"]);
            interpolationMethod: ((object getUInt32: "interpolationMethod") castTo: ModelAssetAnimationInterpolationMethod);
            yourself).
    }.

    method parseAnimation: (animation: ModelAssetAnimationRef const ref) channel: (object: DOM ObjectRef const ref) ::=> Void := {
        let channel := ModelAssetAnimationChannel new
            sampler: (animation samplers[object getUIntPointer: "sampler"]);
            targetProperty: ((object getUInt32: "targetProperty") castTo: ModelAssetAnimationTargetProperty);
            yourself.

        object at: "targetNode" ifPresent: {:(DOM Value const ref)value :: Void |
            channel targetNode: modelAsset nodes[DOM valueToUIntPointer(value)]
        }.

        animation channels add: channel.
    }.

    method parseAnimation: (object: DOM ObjectRef const ref) ::=> Void := {
        let animation := modelAsset newAnimation
            name: (object getString: "name" default: "");
            yourself.

        let samplers := object getList: "samplers".
        animation samplers reserve: samplers size.
        samplers do: {:(DOM Value const ref)each :: Void |
            self parseAnimation: animation sampler: (each get: DOM ObjectRef)
        }.

        let channels := object getList: "channels".
        animation channels reserve: channels size.
        channels do: {:(DOM Value const ref)each :: Void |
            self parseAnimation: animation channel: (each get: DOM ObjectRef)
        }.
    }.

    method parseAnimations: (list: DOM ListRef const ref) ::=> Void := {
        list do: {:(DOM Value const ref)each :: Void |
            self parseAnimation: (each get: DOM ObjectRef)
        }.
    }.

    method parseTopLevel: (object: DOM ObjectRef const ref) ::=> ModelAssetRef := {
        modelAsset := ModelAsset new.
        modelAsset parentFolder: parentFolder.
        object at: "buffers" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseBuffers: (value get: DOM ListRef)
        }.
        object at: "bufferViews" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseBufferViews: (value get: DOM ListRef)
        }.
        object at: "accessors" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseAccessors: (value get: DOM ListRef)
        }.
        object at: "images" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseImages: (value get: DOM ListRef)
        }.
        object at: "samplers" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseSamplers: (value get: DOM ListRef)
        }.
        object at: "textures" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseTextures: (value get: DOM ListRef)
        }.
        object at: "materials" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseMaterials: (value get: DOM ListRef)
        }.
        object at: "meshes" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseMeshes: (value get: DOM ListRef)
        }.
        object at: "skeletons" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseSkeletons: (value get: DOM ListRef)
        }.
        object at: "nodes" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseNodes: (value get: DOM ListRef)
        }.
        object at: "skeletons" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseSkeletonNodes: (value get: DOM ListRef)
        }.
        object at: "scenes" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseScenes: (value get: DOM ListRef)
        }.
        object at: "animations" ifPresent: {:(DOM Value const ref)value :: Void |
            self parseAnimations: (value get: DOM ListRef)
        }.

        modelAsset
    }.

    method importFromFileReference: (fileReference: Std FileReference const ref) ::=> ModelAssetRef := {
        parentFolder := fileReference parent.

        let inputReadStream mutable := fileReference binaryReadStream.
        inputReadStream ifNil: {return: ModelAssetRef nil}.

        let isReadingTextModel := fileReference extension asArraySlice = "wtmdl".
        let domValue := isReadingTextModel
            ifTrue: { JSON ValueParser parseStream: inputReadStream getPointer }
            ifFalse: { MessagePack ValueDecoder decodeStream: inputReadStream getPointer }.

        let result := self parseTopLevel: (domValue get: DOM ObjectRef).
        isReadingTextModel ifFalse: {
            self readBinaryBuffersDataFrom: inputReadStream _
        }.

        result
    }.
}.

} ## End of namespace Assets
} ## End of namespace Woden
