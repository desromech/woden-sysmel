namespace Woden definition: {
namespace Assets definition: {

useNamespace: Stdn Serialization.
useNamespace: Stdn Graphics Core.
useNamespace: Stdn Math.

class WodenModelImporter definition: {
    field parentFolder type: Stdn FileReference.
    field modelAsset type: ModelAssetPtr.

    method parseBuffer: (object: JSON Object const ref) ::=> Void := {
        let buffer := modelAsset _ newBuffer.
        buffer _
            name: (object getString: "name" asMutableString default: "" asMutableString);
            dataSize: (object getUIntPointer: "byteLength" asMutableString).

        object at: "uri" asMutableString ifPresent: {:(JSON Value const ref)uriValue :: Void |
            let uri := uriValue get: Stdn String.
            let uriFileRef := parentFolder / uri asArraySlice.
            uriFileRef exists ifTrue: {
                let readStream := uriFileRef binaryUnbufferedReadStream.
                readStream ifNil: {return: void}.

                buffer _ data reset: (Stdn zmalloc(buffer _ dataSize) reinterpretCastTo: UInt8 pointer).
                readStream _ read: buffer _ data getPointer size: buffer _ dataSize
            }.
        } ifAbsent: {
            Stdn stdout << "TODO: Read buffer with embedded data".
        }.

    }.

    method parseBuffers: (list: JSON List ref) ::=> Void := {
        list do: {:each :: Void |
            self parseBuffer: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseBufferView: (object: JSON Object const ref) ::=> Void := {
        let bufferView := modelAsset _ newBufferView.
        bufferView _
            name: (object getString: "name" asMutableString default: "" asMutableString);
            buffer: (modelAsset _ buffers[object getUIntPointer: "buffer" asMutableString]);
            offset: (object getUIntPointer: "byteOffset" asMutableString default: 0);
            size: (object getUIntPointer: "byteLength" asMutableString);
            stride: (object getUIntPointer: "byteStride" asMutableString default: 0);
            usage: ((object getUInt32: "usage" asMutableString default: 0) castTo: BufferUsageMode).
    }.

    method parseBufferViews: (list: JSON List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseBufferView: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseAccessor: (object: JSON Object const ref) ::=> Void := {
        let bufferAccessor := modelAsset _ newBufferAccessor.
        bufferAccessor _
            name: (object getString: "name" asMutableString default: "" asMutableString);
            bufferView: (modelAsset _ bufferViews[object getUIntPointer: "bufferView" asMutableString]);
            offset: (object getUIntPointer: "byteOffset" asMutableString default: 0);
            count: (object getUIntPointer: "count" asMutableString);
            minValue: (object getFloat64x4: "min" asMutableString default: 0);
            maxValue: (object getFloat64x4: "max" asMutableString default: 0);
            format: ((object getUInt32: "format" asMutableString default: 0) castTo: PixelFormat);
            columnCount: (object getUInt32: "columnCount" asMutableString default: 0).
    }.

    method parseAccessors: (list: JSON List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseAccessor: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseImage: (object: JSON Object const ref) ::=> Void := {
        let image := modelAsset _ newImage.
        image _
            name: (object getString: "name" asMutableString default: "" asMutableString);
            uri: (object getString: "uri" asMutableString default: "" asMutableString);
            mimeType: (object getString: "mimeType" asMutableString default: "" asMutableString).
        object at: "bufferView" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            image _ bufferView: (modelAsset _ bufferViews[JSON valueToUIntPointer(value)])
        }.
    }.

    method parseImages: (list: JSON List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseImage: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseSampler: (object: JSON Object const ref) ::=> Void := {
        let sampler := modelAsset _ newSampler.
        sampler _
            name: (object getString: "name" asMutableString default: "" asMutableString).
        ##Stdn stdout << "TODO: parseSampler " << sampler _ name; nl.
    }.

    method parseSamplers: (list: JSON List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseSampler: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseTexture: (object: JSON Object const ref) ::=> Void := {
        let texture := modelAsset _ newTexture.
        texture _
            name: (object getString: "name" asMutableString default: "" asMutableString).

        object at: "sampler" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            texture _ sampler: (modelAsset _ samplers[JSON valueToUIntPointer(value)])
        }.
        object at: "source" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            texture _ image: (modelAsset _ images[JSON valueToUIntPointer(value)])
        }.
    }.

    method parseTextures: (list: JSON List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseTexture: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseMaterialTexture: (object: JSON Object const ref) ::=> ModelAssetTexturePtr := {
        let result mutable := ModelAssetTexturePtr nil.
        object at: "index" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            result := modelAsset _ textures[JSON valueToUIntPointer(value)]
        }.

        result
    }.

    method parsePbrMetallicRoughnessMaterial: (object: JSON Object const ref) ::=> ModelAssetMaterialPtr := {
        let material := modelAsset _ newMetallicRoughnessMaterial.

        material _
            albedoFactor: Stdn Math Color decodeSRGB(object getFloat32x4: "baseColorFactor" asMutableString default: 1.0f);
            metallicFactor: (object getFloat32: "metallicFactor" asMutableString default: 1.0f);
            roughnessFactor: (object getFloat32: "roughnessFactor" asMutableString default: 1.0f).
        object at: "baseColorTexture" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            material _ albedoTexture: (self parseMaterialTexture: (value get: JSON ObjectPtr) _)..
            material _ albedoTexture _ setColorUsage
        }.
        object at: "metallicRoughnessTexture" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            material _ metallicRoughnessTexture: (self parseMaterialTexture: (value get: JSON ObjectPtr) _).
            material _ metallicRoughnessTexture _ setLinearUsage
        }.

        material upCastFor: ModelAssetMaterial.
    }.

    method parseMaterial: (object: JSON Object const ref) ::=> Void := {
        let material mutable := ModelAssetMaterialPtr nil.
        object at: "pbrMetallicRoughness" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            material := self parsePbrMetallicRoughnessMaterial: (value get: JSON ObjectPtr) _.
        }.

        material ifNil: {
            material := modelAsset _ newMetallicRoughnessMaterial upCastFor: ModelAssetMaterial.
        }.

        material _
            name: (object getString: "name" asMutableString default: "" asMutableString);
            emissionFactor: Stdn Math Color decodeSRGB(Float32x4(object getFloat32x3: "emissiveFactor" asMutableString default: 0, 0)) rgb;
            doubleSided: (object getBoolean8: "doubleSided" asMutableString default: false);
            alphaCutoff: (object getFloat32: "alphaCutoff" asMutableString default: 0.5f);
            alphaMode: ((object getUInt32: "alphaMode" asMutableString default: 0) castTo: ModelAssetMaterialAlphaMode).

        object at: "occlusionTexture" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            material _ occlusionTexture: (self parseMaterialTexture: (value get: JSON ObjectPtr) _).
            material _ occlusionTexture _ setLinearUsage
        }.

        object at: "emissiveTexture" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            material _ emissionTexture: (self parseMaterialTexture: (value get: JSON ObjectPtr) _).
            material _ emissionTexture _ setColorUsage
        }.

        object at: "normalTexture" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            material _ normalTexture: (self parseMaterialTexture: (value get: JSON ObjectPtr) _).
            material _ normalTexture _ setNormalUsage
        }.
    }.

    method parseMaterials: (list: JSON List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseMaterial: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseMeshPrimitiveAttributes: (list: JSON List const ref) ::=> ModelAssetMeshPrimitiveAttributesPtr := {
        let attributeList mutable := ModelAssetMeshPrimitiveAttributeList().

        list do: {:(JSON Value const ref)attribute :: Void |
            let attributeObject ref := (attribute get: JSON ObjectPtr) _.
            let location := (attributeObject getUInt32: "location" asMutableString default: 0) castTo: VertexAttributeLocation.
            let accessor := modelAsset _ bufferAccessors[attributeObject getUInt32: "accessor" asMutableString default: 0].
            attributeList add: (ModelAssetMeshPrimitiveAttribute()
                accessor: accessor;
                location: location;
                yourself
            )
        }.

        let result := modelAsset _ newMeshPrimitiveAttributes.
        result _ attributes: attributeList.
        result
    }.

    method parseMesh: (mesh: ModelAssetMeshPtr const ref) primitive: (object: JSON Object const ref) ::=> Void := {

        let primitive := ModelAssetMeshPrimitive sharedNew.
        mesh _ primitives add: primitive.

        primitive _
            attributes: (self parseMeshPrimitiveAttributes: (object getList: "attributes" asMutableString) _ );
            primitiveTopology: ((object getUInt32: "primitiveTopology" asMutableString default: 0) castTo: PrimitiveTopology).

        object at: "indices" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            primitive _ indices: (modelAsset _ bufferAccessors[JSON valueToUIntPointer(value)])
        }.

        object at: "material" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            primitive _ material: (modelAsset _ materials[JSON valueToUIntPointer(value)])
        }.
    }.

    method parseMesh: (object: JSON Object const ref) ::=> Void := {
        let mesh := modelAsset _ newMesh.
        mesh _
            name: (object getString: "name" asMutableString default: "" asMutableString).

        object at: "primitives" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            (value get: JSON ListPtr) _ do: {:each :: Void |
                self parseMesh: mesh primitive: (each get: JSON ObjectPtr) _
            }.
        }.
    }.

    method parseMeshes: (list: JSON List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseMesh: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseSkin: (object: JSON Object const ref) ::=> Void := {
        let skeleton := modelAsset _ newSkeleton.
        skeleton _
            name: (object getString: "name" asMutableString default: "" asMutableString).

        object at: "inverseBindMatrices" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            skeleton _ inverseBindMatricesAccessor: modelAsset _ bufferAccessors[JSON valueToUIntPointer(value)]
        }.
    }.

    method parseSkins: (list: JSON List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseSkin: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseSkin: (skeleton: ModelAssetSkeletonPtr const ref) nodes:(object: JSON Object const ref) ::=> Void := {
        let joints := object getList: "joints" asMutableString.
        skeleton _ joints reserve: joints _ size.
        joints _ do: {:(JSON Value const ref)value :: Void |
            skeleton _ joints add: modelAsset _ nodes[JSON valueToUIntPointer(value)]
        }.

        object at: "skeleton" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            skeleton _ rootJoint := modelAsset _ nodes[JSON valueToUIntPointer(value)]
        }.
    }.

    method parseSkinNodes: (list: JSON List const ref) ::=> Void := {
        list doWithIndex: {:each :index :: Void |
            self parseSkin: modelAsset _ skeletons[index] nodes: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseNode: (object: JSON Object const ref) ::=> Void := {
        let node := modelAsset _ newNode.
        node _
            name: (object getString: "name" asMutableString default: "" asMutableString);
            isJoint: (object getBoolean8: "isJoint" asMutableString default: false);
            hasValidJointIndex: (object getBoolean8: "hasValidJointIndex" asMutableString default: false);
            jointIndex: (object getUIntPointer: "jointIndex" asMutableString default: 0);
            parentJointIndex: (object getIntPointer: "parentJointIndex" asMutableString default: -1).

        object at: "mesh" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            node _ mesh: (modelAsset _ meshes[JSON valueToUIntPointer(value)])
        }.

        object at: "skin" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            node _ skeleton: (modelAsset _ skeletons[JSON valueToUIntPointer(value)])
        }.

        object at: "scale" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            let scale := JSON valueToFloat32x3(value, 1).
            node _ scale: scale.
            node _ transform scaleBy: scale.
        }.
        object at: "rotation" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            let rotation := QuaternionF32 xyzw: JSON valueToFloat32x4(value, Float32x4(0, 0, 0, 1)).
            node _ rotationQuaternion: rotation.
            node _ transform applyOrthonormalMatrix: rotation asFloat32x3x3.
        }.
        object at: "translation" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            let translation := JSON valueToFloat32x3(value, 0).
            node _ translation: translation.
            node _ transform translateBy: translation.
        }.

        object at: "matrix" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            let matrix := JSON valueToFloat32x4x4(value, Float32x4x4 identity).
            Stdn stdout << "TODO: parse node matrix "; nl.
            Stdn stdout << matrix firstRow; nl.
            Stdn stdout << matrix secondRow; nl.
            Stdn stdout << matrix thirdRow; nl.
            Stdn stdout << matrix fourthRow; nl.
        }.

    }.

    method parseNode: (node: ModelAssetNodePtr const ref) children: (object: JSON Object const ref) ::=> Void := {
        object at: "children" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            let children ref := (value get: JSON ListPtr) _.
            node _ children reserve: children size.
            0 until: children size do: {:i :: Void |
                node _ children add: (modelAsset _ nodes[children getUIntPointer: i])
            }
        }
    }.

    method parseNodes: (list: JSON List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseNode: (each get: JSON ObjectPtr) _
        }.

        list doWithIndex: {:each :index :: Void |
            self parseNode: modelAsset _ nodes[index] children: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseScene: (object: JSON Object const ref) ::=> Void := {
        let scene := modelAsset _ newScene.
        scene _
            name: (object getString: "name" asMutableString default: "" asMutableString).

        object at: "nodes" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            let nodeList ref := (value get: JSON ListPtr) _.
            scene _ rootNodes reserve: nodeList size.
            0 until: nodeList size do: {:i :: Void |
                scene _ rootNodes add: (modelAsset _ nodes[nodeList getUIntPointer: i])
            }.
        }.
    }.

    method parseScenes: (list: JSON List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseScene: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseAnimation: (animation: ModelAssetAnimationPtr const ref) sampler: (object: JSON Object const ref) ::=> Void := {
        let sampler := ModelAssetAnimationSampler sharedNew.
        sampler _
            index: animation _ samplers size;
            inputAccessor: (modelAsset _ bufferAccessors[object getUIntPointer: "input" asMutableString]);
            outputAccessor: (modelAsset _ bufferAccessors[object getUIntPointer: "output" asMutableString]).

        let interpolationMethod := object getString: "interpolation" asMutableString default: "LINEAR" asMutableString.
        sampler _ interpolationMethod: (interpolationMethod asArraySlice selectCase: #{
            "LINEAR" : ModelAssetAnimationInterpolationMethod Linear.
            "STEP" : ModelAssetAnimationInterpolationMethod Step.
            "CUBICSPLINE" : ModelAssetAnimationInterpolationMethod CubicSpline.
            _ : ModelAssetAnimationInterpolationMethod Linear.
        }).
        animation _ samplers add: sampler.
    }.

    method parseAnimation: (animation: ModelAssetAnimationPtr const ref) channel: (object: JSON Object const ref) ::=> Void := {
        let channel := ModelAssetAnimationChannel sharedNew.
        channel _ sampler: (animation _ samplers[object getUIntPointer: "sampler" asMutableString]).

        let target := object getObject: "target" asMutableString.
        let path := target _ getString: "path" asMutableString.
        channel _ targetProperty: (path asArraySlice selectCase: #{
            "translation" : ModelAssetAnimationTargetProperty Translation.
            "rotation" : ModelAssetAnimationTargetProperty Rotation.
            "scale" : ModelAssetAnimationTargetProperty Scale.
            "weights" : ModelAssetAnimationTargetProperty Weights.
        }).

        target _ at: "node" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            channel _ targetNode: modelAsset _ nodes[JSON valueToUIntPointer(value)]
        }.

        animation _ channels add: channel.
    }.

    method parseAnimation: (object: JSON Object const ref) ::=> Void := {
        let animation := modelAsset _ newAnimation.
        animation _
            name: (object getString: "name" asMutableString default: "" asMutableString).

        let samplers := object getList: "samplers" asMutableString.
        animation _ samplers reserve: samplers _ size.
        samplers _ do: {:each :: Void |
            self parseAnimation: animation sampler: (each get: JSON ObjectPtr) _
        }.

        let channels := object getList: "channels" asMutableString.
        animation _ channels reserve: channels _ size.
        channels _ do: {:each :: Void |
            self parseAnimation: animation channel: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseAnimations: (list: JSON List const ref) ::=> Void := {
        list do: {:each :: Void |
            self parseAnimation: (each get: JSON ObjectPtr) _
        }.
    }.

    method parseTopLevel: (object: JSON Object const ref) ::=> ModelAssetPtr := {
        modelAsset := ModelAsset sharedNew.
        modelAsset _ parentFolder: parentFolder.
        object at: "buffers" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseBuffers: (value get: JSON ListPtr) _
        }.
        object at: "bufferViews" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseBufferViews: (value get: JSON ListPtr) _
        }.
        object at: "accessors" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseAccessors: (value get: JSON ListPtr) _
        }.
        object at: "images" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseImages: (value get: JSON ListPtr) _
        }.
        object at: "samplers" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseSamplers: (value get: JSON ListPtr) _
        }.
        object at: "textures" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseTextures: (value get: JSON ListPtr) _
        }.
        object at: "materials" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseMaterials: (value get: JSON ListPtr) _
        }.
        object at: "meshes" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseMeshes: (value get: JSON ListPtr) _
        }.
        object at: "skins" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseSkins: (value get: JSON ListPtr) _
        }.
        object at: "nodes" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseNodes: (value get: JSON ListPtr) _
        }.
        object at: "skins" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseSkinNodes: (value get: JSON ListPtr) _
        }.
        object at: "scenes" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseScenes: (value get: JSON ListPtr) _
        }.
        object at: "animations" asMutableString ifPresent: {:(JSON Value const ref)value :: Void |
            self parseAnimations: (value get: JSON ListPtr) _
        }.

        modelAsset
    }.

    method importFromFileReference: (fileReference: Stdn FileReference const ref) ::=> ModelAssetPtr := {
        parentFolder := fileReference parent.

        let jsonReadStream := fileReference binaryReadStream.
        jsonReadStream ifNil: {return: ModelAssetPtr nil}.

        let jsonValue := JSON ValueParser parseStream: jsonReadStream getPointer.
        self parseTopLevel: (jsonValue get: JSON ObjectPtr) _.
    }.
}.

} ## End of namespace Assets
} ## End of namespace Woden
