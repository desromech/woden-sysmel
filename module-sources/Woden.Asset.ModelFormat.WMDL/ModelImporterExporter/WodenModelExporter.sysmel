namespace Woden definition: {
namespace Assets definition: {

useNamespace: Std Serialization.
useNamespace: Std Graphics Core.
useNamespace: Std Math.

class WodenModelExporter definition: {
    field modelAsset type: ModelAssetRef.
    field isWritingTextModel type: Boolean8.

    method encodeBuffer: (buffer: ModelAssetBinaryBufferRef const ref) ::=> DOM Value := {
        let result := DOM Object new
            at: "name" put: buffer name;
            yourself.

        buffer data ifNotNil: {:content :: Void |
            isWritingTextModel ifTrue: {
                result at: "data" put: (Std ByteVector()
                    addAll: (content until: buffer dataSize);
                    yourself)
            } ifFalse: {
                result at: "dataSize" put: buffer dataSize
            }.
        }.

        result
    }.

    method encodeBinaryBufferData: (buffer: ModelAssetBinaryBufferRef const ref) into: (out: Std IO Stream ref) ::=> Void := {
        buffer data ifNotNil: {
            out write: buffer data getPointer size: (buffer dataSize castTo: UInt32)
        }.
    }.

    method encodeBinaryBuffersDataInto: (out: Std IO Stream ref) ::=> Void := {
        modelAsset buffers do: {:each :: Void |
            self encodeBinaryBufferData: each into: out
        }.
    }.

    method encodeBuffers => DOM Value := {
        let result := DOM List new.
        result reserve: modelAsset buffers size.
        modelAsset buffers do: {:each :: Void |
            result add: (self encodeBuffer:  each)
        }.
        result
    }.

    method encodeBufferView: (bufferView: ModelAssetBinaryBufferViewRef const ref) ::=> DOM Value := {
        DOM Object new
            at: "name" put: bufferView name;
            at: "buffer" put: bufferView buffer index;
            at: "offset" put: bufferView offset;
            at: "size" put: bufferView size;
            at: "stride" put: bufferView stride;
            at: "usage" put: bufferView usage value;
            yourself
    }.

    method encodeBufferViews => DOM Value := {
        let result := DOM List new.
        result reserve: modelAsset bufferViews size.
        modelAsset bufferViews do: {:each :: Void |
            result add: (self encodeBufferView:  each)
        }.
        result
    }.

    method encodeAccessor: (accessor: ModelAssetBinaryBufferAccessorRef const ref) ::=> DOM Value := {
        DOM Object new
            at: "name" put: accessor name;
            at: "bufferView" put: accessor bufferView index;
            at: "offset" put: accessor offset;
            at: "count" put: accessor count;
            at: "minValue" put: (DOM List new
                reserve: 4;
                add: accessor minValue x;
                add: accessor minValue y;
                add: accessor minValue z;
                add: accessor minValue w;
                yourself);
            at: "maxValue" put: (DOM List new
                reserve: 4;
                add: accessor maxValue x;
                add: accessor maxValue y;
                add: accessor maxValue z;
                add: accessor maxValue w;
                yourself);
            at: "format" put: accessor format;
            at: "columnCount" put: accessor columnCount;
            yourself
    }.

    method encodeAccessors => DOM Value := {
        let result := DOM List new.
        result reserve: modelAsset bufferAccessors size.
        modelAsset bufferAccessors do: {:each :: Void |
            result add: (self encodeAccessor:  each)
        }.
        result
    }.

    method encodeImage: (image: ModelAssetImageRef const ref) ::=> DOM Value := {
        let result := DOM Object new
            at: "name" put: image name;
            at: "uri" put: image uri;
            at: "mimeType" put: image mimeType;
            at: "usageMode" put: image usageMode value;
            yourself.
        image bufferView ifNotNil: {
            result at: "bufferView" put: image bufferView index.
        }.

        result
    }.

    method encodeImages => DOM Value := {
        let result := DOM List new.
        result reserve: modelAsset images size.
        modelAsset images do: {:each :: Void |
            result add: (self encodeImage:  each)
        }.
        result
    }.

    method encodeSampler: (sampler: ModelAssetSamplerRef const ref) ::=> DOM Value := {
        DOM Object new
            at: "name" put: sampler name;
            yourself
    }.

    method encodeSamplers => DOM Value := {
        let result := DOM List new.
        result reserve: modelAsset samplers size.
        modelAsset samplers do: {:each :: Void |
            result add: (self encodeSampler:  each)
        }.
        result
    }.

    method encodeTexture: (texture: ModelAssetTextureRef const ref) ::=> DOM Value := {
        let result := DOM Object new
            at: "name" put: texture name;
            yourself.

        texture sampler ifNotNil: {
            result at: "sampler" put: texture sampler index.
        }.

        texture image ifNotNil: {
            result at: "image" put: texture image index.
        }.

        result
    }.

    method encodeTextures => DOM Value := {
        let result := DOM List new.
        result reserve: modelAsset textures size.
        modelAsset textures do: {:each :: Void |
            result add: (self encodeTexture:  each)
        }.
        result
    }.

    method encodeMetallicRoughnessMaterial: (material: ModelAssetMetallicRoughnessMaterialRef const ref) ::=> DOM Value := {
        let result := DOM Object new
            at: "baseColorFactor" put: (DOM List new
                reserve: 4;
                add: material baseColorFactor x;
                add: material baseColorFactor y;
                add: material baseColorFactor z;
                add: material baseColorFactor w;
                yourself);
            at: "metallicFactor" put: material metallicFactor;
            at: "roughnessFactor" put: material roughnessFactor;
            yourself.

        material baseColorTexture ifNotNil: {
            result at: "baseColorTexture" put: material baseColorTexture index.
        }.

        material metallicRoughnessTexture ifNotNil: {
            result at: "metallicRoughnessTexture" put: material metallicRoughnessTexture index.
        }.

        result
    }.

    method encodeMaterial: (material: ModelAssetMaterialRef const ref) ::=> DOM Value := {
        let result := DOM Object new
            at: "name" put: material name;
            at: "emissionFactor" put: (DOM List new
                reserve: 3;
                add: material emissionFactor x;
                add: material emissionFactor y;
                add: material emissionFactor z;
                yourself);
            at: "doubleSided" put: material doubleSided;
            at: "alphaCutoff" put: material alphaCutoff;
            at: "alphaMode" put: material alphaMode value;
            yourself.

        material occlusionTexture ifNotNil: {
            result at: "occlusionTexture" put: material occlusionTexture index.
        }.

        material emissionTexture ifNotNil: {
            result at: "emissionTexture" put: material emissionTexture index.
        }.

        material normalTexture ifNotNil: {
            result at: "normalTexture" put: material normalTexture index.
        }.

        material isMetallicRoughnessMaterial ifTrue: {
            result at: "metallicRoughness" put: (self encodeMetallicRoughnessMaterial: (material downCastFor: ModelAssetMetallicRoughnessMaterial)).
        }.

        result
    }.

    method encodeMaterials => DOM Value := {
        let result := DOM List new.
        result reserve: modelAsset materials size.
        modelAsset materials do: {:each :: Void |
            result add: (self encodeMaterial:  each)
        }.
        result
    }.

    method encodeMeshPrimitiveAttributes: (attributes: ModelAssetMeshPrimitiveAttributesRef const ref) ::=> DOM Value := {
        let result := DOM List new.
        result reserve: attributes attributes size.
        attributes attributes do: {:each :: Void |
            result add: (DOM Object new
                at: "location" put: each location value;
                at: "accessor" put: each accessor index;
                yourself)
        }.

        result
    }.

    method encodeMeshPrimitive: (primitive: ModelAssetMeshPrimitiveRef const ref) ::=> DOM Value := {
        let result := DOM Object new
            at: "attributes" put: (self encodeMeshPrimitiveAttributes: primitive attributes);
            at: "primitiveTopology" put: primitive primitiveTopology value;
            yourself.

        primitive indices ifNotNil: {
            result at: "indices" put: primitive indices index
        }.

        primitive material ifNotNil: {
            result at: "material" put: primitive material index
        }.

        result
    }.

    method encodeMeshPrimitives: (mesh: ModelAssetMeshRef const ref) ::=> DOM Value := {
        let result := DOM List new.
        result reserve: mesh primitives size.
        mesh primitives do: {:each :: Void |
            result add: (self encodeMeshPrimitive: each)
        }.

        result
    }.

    method encodeMesh: (mesh: ModelAssetMeshRef const ref) ::=> DOM Value := {
        DOM Object new
            at: "name" put: mesh name;
            at: "primitives" put: (self encodeMeshPrimitives: mesh);
            yourself
    }.

    method encodeMeshes => DOM Value := {
        let result := DOM List new.
        result reserve: modelAsset meshes size.
        modelAsset meshes do: {:each :: Void |
            result add: (self encodeMesh: each)
        }.
        result
    }.

    method encodeSkeleton: (skeleton: ModelAssetSkeletonRef const ref) ::=> DOM Value := {
        let joints := DOM List new.
        joints reserve: skeleton joints size.
        skeleton joints do: {:each :: Void |
            joints add: each index
        }.

        DOM Object new
            at: "name" put: skeleton name;
            at: "inverseBindMatrices" put: skeleton inverseBindMatricesAccessor index;
            at: "joints" put: joints;
            at: "rootJoint" put: skeleton rootJoint index;
            yourself
    }.

    method encodeSkeletons => DOM Value := {
        let result := DOM List new.
        result reserve: modelAsset skeletons size.
        modelAsset skeletons do: {:each :: Void |
            result add: (self encodeSkeleton:  each)
        }.
        result
    }.

    method encodeNode: (node: ModelAssetNodeRef const ref) ::=> DOM Value := {
        let result := DOM Object new
            at: "name" put: node name;
            at: "isJoint" put: node isJoint;
            at: "hasValidJointIndex" put: node hasValidJointIndex;
            at: "jointIndex" put: node jointIndex;
            at: "parentJointIndex" put: node parentJointIndex;
            at: "scale" put: (DOM List new
                reserve: 3;
                add: node scale x;
                add: node scale y;
                add: node scale z;
                yourself);
            at: "rotation" put: (DOM List new
                reserve: 4;
                add: node rotationQuaternion x;
                add: node rotationQuaternion y;
                add: node rotationQuaternion z;
                add: node rotationQuaternion w;
                yourself);
            at: "translation" put: (DOM List new
                reserve: 3;
                add: node translation x;
                add: node translation y;
                add: node translation z;
                yourself);
            yourself.

        node mesh ifNotNil: {
            result at: "mesh" put: node mesh index
        }.
        node skeleton ifNotNil: {
            result at: "skeleton" put: node skeleton index
        }.

        node children ifNotEmpty: {
            let children := DOM List new.
            children reserve: node children size.
            node children do: {:each :: Void |
                children add: each index
            }.

            result at: "children" put: children
        }.

        result
    }.

    method encodeNodes => DOM Value := {
        let result := DOM List new.
        result reserve: modelAsset nodes size.
        modelAsset nodes do: {:each :: Void |
            result add: (self encodeNode: each)
        }.
        result
    }.

    method encodeScene: (scene: ModelAssetSceneRef const ref) ::=> DOM Value := {
        let result := DOM Object new
            at: "name" put: scene name;
            yourself.

        scene rootNodes ifNotEmpty: {
            let rootNodes := DOM List new.
            rootNodes reserve: scene rootNodes size.
            scene rootNodes do: {:each :: Void |
                rootNodes add: each index
            }.

            result at: "rootNodes" put: rootNodes
        }.

        result
    }.

    method encodeScenes => DOM Value := {
        let result := DOM List new.
        result reserve: modelAsset nodes size.
        modelAsset scenes do: {:each :: Void |
            result add: (self encodeScene: each)
        }.
        result
    }.

    method encodeAnimationSampler: (sampler: ModelAssetAnimationSamplerRef const ref) ::=> DOM Value := {
        DOM Object new
            at: "inputAccessor" put: sampler inputAccessor index;
            at: "outputAccessor" put: sampler outputAccessor index;
            at: "interpolationMethod" put: sampler interpolationMethod value;
            yourself
    }.

    method encodeAnimationSamplers: (animation: ModelAssetAnimationRef const ref) ::=> DOM Value := {
        let result := DOM List new.
        result reserve: animation samplers size.
        animation samplers do: {:each :: Void |
            result add: (self encodeAnimationSampler: each)
        }.

        result
    }.

    method encodeAnimationChannel: (channel: ModelAssetAnimationChannelRef const ref) ::=> DOM Value := {
        let result := DOM Object new
            at: "sampler" put: channel sampler index;
            at: "targetProperty" put: channel targetProperty value;
            yourself.
        channel targetNode ifNotNil: {:n :: Void |
            result at: "targetNode" put: n index
        }.

        result
    }.

    method encodeAnimationChannels: (animation: ModelAssetAnimationRef const ref) ::=> DOM Value := {
        let result := DOM List new.
        result reserve: animation channels size.
        animation channels do: {:each :: Void |
            result add: (self encodeAnimationChannel: each)
        }.

        result
    }.

    method encodeAnimation: (animation: ModelAssetAnimationRef const ref) ::=> DOM Value := {
        DOM Object new
            at: "name" put: animation name;
            at: "samplers" put: (self encodeAnimationSamplers: animation);
            at: "channels" put: (self encodeAnimationChannels: animation);
            yourself
    }.

    method encodeAnimations => DOM Value := {
        let result := DOM List new.
        result reserve: modelAsset animations size.
        modelAsset animations do: {:each :: Void |
            result add: (self encodeAnimation:  each)
        }.
        result
    }.

    method encodeModelAsset => DOM Value := {
        DOM Object new
            at: "buffers" put: self encodeBuffers;
            at: "bufferViews" put: self encodeBufferViews;
            at: "accessors" put: self encodeAccessors;
            at: "images" put: self encodeImages;
            at: "samplers" put: self encodeSamplers;
            at: "textures" put: self encodeTextures;
            at: "materials" put: self encodeMaterials;
            at: "meshes" put: self encodeMeshes;
            at: "skeletons" put: self encodeSkeletons;
            at: "nodes" put: self encodeNodes;
            at: "scenes" put: self encodeScenes;
            at: "animations" put: self encodeAnimations;
            yourself
    }.

    method export: (theModelAsset: ModelAssetRef const ref) into: (fileReference: Std FileReference const ref) ::=> Boolean8 := {
        modelAsset := theModelAsset.
        isWritingTextModel := fileReference extension asArraySlice = "wtmdl".

        let result := self encodeModelAsset.

        let out mutable := fileReference binaryWriteStream.
        out ifNil: {
            return: false
        }.

        isWritingTextModel ifTrue: {
            JSON Writer writeValue: result onStream: out _.
        } ifFalse: {
            MessagePack Encoder encodeValue: result onStream: out _.
            self encodeBinaryBuffersDataInto: out _.
        }.

        true
    }.
}.

} ## End of namespace Assets
} ## End of namespace Woden
