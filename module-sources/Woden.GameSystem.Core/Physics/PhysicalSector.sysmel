namespace Woden definition: {
namespace GameSystem definition: {

useNamespace: Std Math.
useNamespace: Std Math Geometry.
useNamespace: Woden MapDefinition. ## For CollisionShape

class PhysicalSector superclass: Std RCObject; definition: {
    field collisionObjects type: CollisionObjects.
    public field gravity type: Float32x3.

    method addCollisionObject: (collisionObject: CollisionObjectRef const ref) ::=> Void := {
        collisionObjects add: collisionObject.
        collisionObject addedToPhysicalSector: self.
    }.

    method removeCollisionObject: (collisionObject: CollisionObjectRef const ref) ::=> Void := {
        (collisionObjects includes: collisionObject) ifFalse: {
            return: void
        }.

        collisionObjects remove: collisionObject.
        collisionObject removedFromPhysicalSector: self.
    }.

    virtual method update: (delta: Float32) ::=> Void := {
        ## Integrate the forces into impulses.
        collisionObjects do: {:each :: Void |
            each simulateImpulsesInSector: self withDelta: delta
        }.

        ## Simulate the movement itself.
        collisionObjects do: {:each :: Void |
            each simulateMovementInSector: self withDelta: delta
        }
    }.

    method isBox: (testBox: BoxF32 const ref) belongingTo: (boxOwner: CollisionObject pointer) collidingWithGroup: (testColisionGroup: CollisionGroup) ::=> Boolean8 := {
        collisionObjects do: {:each :: Void |
            each rcObjectAddress ~~ boxOwner &&
            (testColisionGroup anyMask: each collisionGroup) ifTrue: {
                let objectBoundingBox := each boundingBox.
                (testBox hasIntersectionWithBox: objectBoundingBox) ifTrue: {
                    return: true
                }
            }
        }.

        false
    }.

    method rayCast: (ray: Ray3dF32) emittingResultInto: (result: CollisionSweepTestResult ref) ::=> Void := {
        collisionObjects do: {:each :: Void |
            (result exclusionSet includes: each rcObjectAddress) not &&
                (result collisionGroupFilter anyMask: each collisionGroup) &&
                (each collisionObjectExclusionSet includes: result collisionTestObject) not
                ifTrue: {

                let objectBoundingBox := each boundingBox.
                let intersectionResult mutable := objectBoundingBox intersectionWithRay: ray.
                intersectionResult isPresent ifTrue: {
                    let intersectionAlpha := intersectionResult _.
                    result hasCollision || intersectionAlpha < result collisionDistance ifTrue: {
                        result
                            hasCollision: true;
                            collisionDistance: intersectionAlpha;
                            collidingBox: objectBoundingBox;
                            collidingObject: each rcObjectAddress
                    }
                }
            }
        }.
    }.

    method sweepTest: (sweepTest: CollisionSweepTestResult ref) collisionShape: (collisionShape: CollisionShapeRef const ref) positionFrom: (startPosition: Float32x3) to: (endPosition: Float32x3) ::=> Void := {
        sweepTest sweepRay := Ray3dF32 from: startPosition to: endPosition.

        self sweepTest: sweepTest collisionBox: collisionShape boundingBox
    }. 

    method sweepTest: (sweepTest: CollisionSweepTestResult ref) collisionBox: (collisionBox: BoxF32) ::=> Void := {
        let halfExtent := collisionBox halfExtent.
        let center := collisionBox center.
        sweepTest reset.

        collisionObjects do: {:each :: Void |
            (sweepTest exclusionSet includes: each rcObjectAddress) not &&
                (sweepTest collisionGroup anyMask: each collisionGroupFilter) &&
                (sweepTest collisionGroupFilter anyMask: each collisionGroup) &&
                (each collisionObjectExclusionSet includes: sweepTest collisionTestObject) not
                ifTrue: {

                let objectBoundingBox := each boundingBox.
                let testBox := BoxF32 center: objectBoundingBox center - center halfExtent: objectBoundingBox halfExtent + halfExtent.
                let intersectionResult mutable := testBox intersectionWithRay: sweepTest sweepRay.
                intersectionResult isPresent ifTrue: {
                    let intersectionAlpha := intersectionResult _.
                    sweepTest hasCollision not || intersectionAlpha < sweepTest collisionDistance ifTrue: {
                        sweepTest
                            hasCollision: true;
                            collisionDistance: intersectionAlpha;
                            collidingBox: testBox;
                            collidingObject: each rcObjectAddress
                    }
                }
            }
        }.

        sweepTest hasCollision ifTrue: {
            sweepTest computeCollisionPointData
        }
    }.
}.

compileTime constant PhysicalSectorRef := PhysicalSector rcRef.
compileTime constant PhysicalSectorWeakRef := PhysicalSector weakRCRef.

}. ## namespace GameSystem
}. ## namespace Woden
