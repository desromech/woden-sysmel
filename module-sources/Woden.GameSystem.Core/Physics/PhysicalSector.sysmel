namespace Woden definition: {
namespace GameSystem definition: {

useNamespace: Stdn Math Geometry.

class PhysicalSector superclass: Stdn SharedObject; definition: {
    field collisionObjects type: CollisionObjects.
    public field gravity type: Float32x3.

    method addCollisionObject: (collisionObject: CollisionObjectPtr const ref) ::=> Void := {
        collisionObjects add: collisionObject.
        collisionObject _ addedToPhysicalSector: self.
    }.

    method removeCollisionObject: (collisionObject: CollisionObjectPtr const ref) ::=> Void := {
        (collisionObjects includes: collisionObject) ifFalse: {
            return: void
        }.

        collisionObjects remove: collisionObject.
        collisionObject _ removedFromPhysicalSector: self.
    }.

    virtual method update: (delta: Float32) ::=> Void := {
        ## Integrate the forces into impulses.
        collisionObjects do: {:each :: Void |
            each _ simulateImpulsesInSector: self withDelta: delta
        }.

        ## Simulate the movement itself.
        collisionObjects do: {:each :: Void |
            each _ simulateMovementInSector: self withDelta: delta
        }
    }.

    method isBox: (testBox: BoxF32 const ref) belongingTo: (boxOwner: CollisionObject pointer) collidingWithGroup: (testColisionGroup: CollisionGroup) ::=> Boolean8 := {
        collisionObjects do: {:each :: Void |
            each getPointer ~~ boxOwner &&
            (testColisionGroup anyMask: each _ collisionGroup) ifTrue: {
                let objectBoundingBox := each _ boundingBox.
                (testBox hasIntersectionWithBox: objectBoundingBox) ifTrue: {
                    return: true
                }
            }
        }.

        false
    }.

    method sweepCollisionBoxWithHalfExtent: (halfExtent: Float32x3) alongRay: (ray: Ray3dF32) emittingResultInto: (result: CollisionSweepTestResult ref) ::=> Void := {
        collisionObjects do: {:each :: Void |
            (result exclusionSet includes: each getPointer) not &&
                (result collisionGroup anyMask: each _ collisionGroupFilter) &&
                (result collisionGroupFilter anyMask: each _ collisionGroup) &&
                (each _ collisionObjectExclusionSet includes: result collisionTestObject) not
                ifTrue: {

                let objectBoundingBox := each _ boundingBox.
                let testBox := BoxF32 center: objectBoundingBox center halfExtent: objectBoundingBox halfExtent + halfExtent.
                let intersectionResult mutable := testBox intersectionWithRay: ray.
                intersectionResult isPresent ifTrue: {
                    let intersectionAlpha := intersectionResult _.
                    result hasCollision || intersectionAlpha < result collisionDistance ifTrue: {
                        result
                            hasCollision: true;
                            collisionDistance: intersectionAlpha;
                            collidingBox: testBox;
                            collidingObject: each getPointer
                    }
                }
            }
        }.
    }.

    virtual method simulateRigidBodyImpulses: (rigidBody: RigidBody ref) withDelta: (delta: Float32) ::=> Void := {
        let bodyGravity := rigidBody hasCustomGravity
            ifTrue: {rigidBody gravity}
            ifFalse: {gravity}.
        let acceleration := bodyGravity + rigidBody engineAcceleration - rigidBody linearVelocity * rigidBody linearDamping.

        rigidBody linearVelocity: rigidBody linearVelocity + acceleration * delta.
    }.

    virtual method simulateRigidBodyMovement: (rigidBody: RigidBody ref) withDelta: (delta: Float32) ::=> Void := {
        let linearVelocity mutable := rigidBody linearVelocity.
        let currentPosition mutable := rigidBody position.
        linearVelocity = 0 && rigidBody massReciprocal = 0 ifTrue: {return: void}.

        let halfExtent := rigidBody boundingBox halfExtent.

        let sweepTestResult mutable := CollisionSweepTestResult().
        sweepTestResult
            collisionTestObject: rigidBody address;
            collisionGroup: rigidBody collisionGroup;
            collisionGroupFilter: rigidBody collisionGroupFilter;
            addExcludedObject: rigidBody address.
        rigidBody collisionObjectExclusionSet do: {:each :: Void |
            sweepTestResult addExcludedObject: each
        }.

        let remainingIterations mutable type: UInt32 := 5.
        let remainingDeltaTime mutable := delta.
        let rigidBodyOwner := rigidBody ownerEntity.
        while: remainingDeltaTime > 0 && remainingIterations > 0 do: {

            let targetPosition := currentPosition + linearVelocity * remainingDeltaTime.
            let ray := Ray3dF32 from: currentPosition to: targetPosition.

            sweepTestResult reset.
            self sweepCollisionBoxWithHalfExtent: halfExtent alongRay: ray emittingResultInto: sweepTestResult.

            sweepTestResult hasCollision ifTrue: {
                let collisionPoint := ray pointAtDistance: sweepTestResult collisionDistance.
                let collisionTime := remainingDeltaTime * sweepTestResult collisionDistance / ray tmax.

                let (let otherCollisionNormal, let penetrationDistance) := sweepTestResult collidingBox computePenetrationNormalAndDistanceForPoint: collisionPoint.
                let collidingObject := sweepTestResult collidingObject.
                Stdn assert: collidingObject isNotNil.

                sweepTestResult addExcludedObject: collidingObject.
                collidingObject _ isRigidBody ifTrue: {
                    let otherRigidBody := collidingObject reinterpretCastTo: RigidBody pointer.
                    rigidBody massReciprocal > 0 || otherRigidBody _ massReciprocal > 0 ifTrue: {
                        ## Collision resolution technique from: https://gamedevelopment.tutsplus.com/tutorials/how-to-create-a-custom-2d-physics-engine-the-basics-and-impulse-resolution--gamedev-6331
                        let relativeVelocity := otherRigidBody _ linearVelocity - linearVelocity.
                        let relativeVelocityAmount := relativeVelocity dot: otherCollisionNormal.
                        let massReciprocalWeight := 1.0f / (rigidBody massReciprocal + otherRigidBody _ massReciprocal).
                        relativeVelocityAmount > 0 ifTrue: {
                            let coefficientOfRestitution := rigidBody coefficientOfRestitution min: otherRigidBody _ coefficientOfRestitution.
                            let j := ((1 + coefficientOfRestitution) * relativeVelocityAmount) * massReciprocalWeight.

                            let impulse := j *otherCollisionNormal.
                            linearVelocity := linearVelocity + rigidBody massReciprocal*impulse.
                            otherRigidBody _ applyImpulse: impulse negated.

                            let otherRigidBodyOwner := otherRigidBody _ ownerEntity.
                        }.

                        let penetrationThreshold := 0.01f.
                        let penetrationCorrection := (penetrationDistance - penetrationThreshold max: 0.0)*massReciprocalWeight*0.2f*otherCollisionNormal.
                        currentPosition := collisionPoint + penetrationCorrection*rigidBody massReciprocal.
                        otherRigidBody _ translateBy: penetrationCorrection negated * otherRigidBody _ massReciprocal.
                    }.
                }.

                collidingObject _ ownerEntity ifNotNil: {:otherOwner :: Void |
                    otherOwner _ onPhysicsCollisionHit: rigidBody at: collisionPoint
                }.
                rigidBodyOwner ifNotNil: {
                    rigidBodyOwner _ onPhysicsCollisionHit: collidingObject _ at: collisionPoint.
                    rigidBodyOwner _ isAlive ifFalse: {return: void}
                }.

                remainingDeltaTime := remainingDeltaTime - collisionTime
            } ifFalse: {
                currentPosition := targetPosition.
                remainingDeltaTime := 0.
            }
        } continueWith: {remainingIterations := remainingIterations - 1}.

        rigidBody
            linearVelocity: linearVelocity;
            position: currentPosition.
    }.
}.

compileTime constant PhysicalSectorPtr := PhysicalSector sharedPointer.
compileTime constant PhysicalSectorWeakPtr := PhysicalSector weakPointer.

}. ## namespace GameSystem
}. ## namespace Woden
