namespace Woden definition: {
namespace GameSystem definition: {

useNamespace: Woden MapDefinition.

useNamespace: Std Math.
useNamespace: Std Math Geometry.
useNamespace: Std Math LinearAlgebra.

class CollisionObject superclass: Std RCObject; definition: {
    meta definition: {
        method staticRigidBodyFor: (collisionShape: CollisionShapeRef const ref) ::=> CollisionObject rcRef := {
            RigidBody new
                collisionShape: collisionShape;
                makeStatic;
                upCastFor: CollisionObject
        }.

        method rigidBodyFor: (collisionShape: CollisionShapeRef const ref) mass: (mass: Float32) ::=> CollisionObject rcRef := {
            RigidBody new
                collisionShape: collisionShape;
                mass: mass;
                computeInertiaTensor;
                upCastFor: CollisionObject
        }.

        method nonRotationalRigidBodyFor: (collisionShape: CollisionShapeRef const ref) mass: (mass: Float32) ::=> CollisionObject rcRef := {
            RigidBody new
                collisionShape: collisionShape;
                mass: mass;
                upCastFor: CollisionObject
        }.
    }.

    field physicalSector type: PhysicalSector weakRCRef.
    field motionState type: MotionState.

    public field collisionShape type: CollisionShapeRef.

    field transform type: ReversibleAffineTransform3dF32.
    field transformChanged type: Boolean8.
    field boundingBoxChanged type: Boolean8.
    field boundingBox type: BoxF32.

    public field collisionGroup type: CollisionGroup.
    public field collisionGroupFilter type: CollisionGroup.
    public field collisionObjectExclusionSet type: FixedVector(CollisionObject pointer, 10).

    method addExcludedCollisionObject: (excluded: CollisionObjectRef const ref) ::=> Void := {
        excluded ifNotNil: {:p :: Void |
            collisionObjectExclusionSet add: p rcObjectAddress
        }
    }.

    const inline method motionState => MotionState const ref
        := motionState.

    inline method motionState: (newMotionState: MotionState) ::=> Void := {
        motionState := newMotionState.
        (motionState hasSameTransformOf: newMotionState) ifFalse: {
            self transformChanged
        }
    }.

    const inline method position => Float32x3
        := motionState position.

    inline method position: (newPosition: Float32x3) ::=> Void := {
        motionState position = newPosition ifFalse: {
            motionState position: newPosition.
            self transformChanged.
        }.
    }.

    const inline method linearVelocity => Float32x3
        := motionState linearVelocity.

    inline method linearVelocity: (newVelocity: Float32x3) ::=> Void := {
        motionState linearVelocity: newVelocity
    }.

    field ownerEntity type: Entity weakRCRef.

    inline method ownerEntity => Entity rcRef
        := ownerEntity asRCRef.

    inline method ownerEntity: (anEntity: Entity rcRef const ref) ::=> Void := {
        ownerEntity := anEntity asWeakRCRef
    }.

    inline method translateBy: (delta: Float32x3) ::=> Void := {
        self position: self position + delta
    }.

    const inline method orientation => QuaternionF32
        := motionState orientation.

    inline method orientation: (newOrientation: QuaternionF32) ::=> Void := {
        motionState orientation: newOrientation.
        self transformChanged.
    }.

    const inline method angularVelocity => Float32x3
        := motionState angularVelocity.

    inline method angularVelocity: (newAngularVelocity: Float32x3) ::=> Void := {
        motionState angularVelocity: newAngularVelocity
    }.

    method transformChanged => Void := {
        transformChanged := true.
        boundingBoxChanged := true.
    }.

    method transform => ReversibleAffineTransform3dF32 := {
        transformChanged ifTrue: {
            transform := motionState asReversibleAffineTransform.
            transformChanged := false
        }.

        transform
    }.

    method boundingBox => BoxF32 := {
        boundingBoxChanged ifTrue: {
            boundingBox := collisionShape boundingBox transformedWith: self transform.
            boundingBoxChanged := false.
        }.

        boundingBox
    }.

    override method initialize => Void := {
        transformChanged := true.
        boundingBoxChanged := true.
    }.

    method makeStatic => Void := {
        collisionGroup := CollisionGroup Static.
        collisionGroupFilter := CollisionGroup DynamicSolid.
    }.

    method makeKinematic => Void := {
        collisionGroup := CollisionGroup Kinematic.
        collisionGroupFilter := CollisionGroup DynamicSolid.
    }.

    method makeProjectile => Void := {
        collisionGroup := CollisionGroup Projectile.
        collisionGroupFilter := CollisionGroup AllSolid.
    }.

    method makeVehicle => Void := {
        collisionGroup := CollisionGroup Vehicle.
        collisionGroupFilter := CollisionGroup AllSolid.
    }.

    method makeCharacter => Void := {
        collisionGroup := CollisionGroup Character.
        collisionGroupFilter := CollisionGroup AllSolid.
    }.

    method makeSensor => Void := {
        collisionGroup := CollisionGroup Sensor.
        collisionGroupFilter := CollisionGroup None.
    }.

    method physicalSector => PhysicalSector rcRef
        := physicalSector asRCRef.

    method removeFromPhysicalSector => Void := {
        let sector := self physicalSector.
        sector ifNotNil:{
            sector removeCollisionObject: self asRCRef
        }
    }.

    virtual method addedToPhysicalSector: (sector: PhysicalSector ref) ::=> Void := {
        physicalSector := sector asWeakRCRef
    }.

    virtual method removedFromPhysicalSector: (sector: PhysicalSector ref) ::=> Void := {
        physicalSector := nil
    }.

    virtual method isRigidBody => Boolean8
        := false.

    virtual method simulateImpulsesInSector: (sector: PhysicalSector ref) withDelta: (delta: Float32) ::=> Void := {}.
    virtual method simulateMovementInSector: (sector: PhysicalSector ref) withDelta: (delta: Float32) ::=> Void := {}.
}.

compileTime constant CollisionObjectRef := CollisionObject rcRef.
compileTime constant CollisionObjects := Std Collections Vector(CollisionObjectRef).

}. ## namespace GameSystem
}. ## namespace Woden
