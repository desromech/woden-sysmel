namespace Woden definition: {
namespace GameSystem definition: {

useNamespace: Std Math Geometry.

class RigidBody superclass: CollisionObject; definition: {
    public field linearDamping type: Float32x3.
    public field angularDamping type: Float32x3.
    public field coefficientOfRestitution type: Float32.

    public field hasCustomGravity type: Boolean8.
    public field gravity type: Float32x3.
    public field engineAcceleration type: Float32x3.
    public field engineAngularAcceleration type: Float32x3.

    public field movementController type: PhysicalMovementControllerRef.

    field mass type: Float32.
    field massReciprocal type: Float32.

    field inertiaTensor type: Float32x3x3.
    field inertiaTensorReciprocal type: Float32x3x3.

    override method initialize => Void := {
        super initialize.
        coefficientOfRestitution := 0.8f.
        movementController := RigidBodyMovementController uniqueInstance.
    }.

    override method isRigidBody => Boolean8
        := true.

    const inline method mass => Float32
        := mass.

    const inline method massReciprocal => Float32
        := massReciprocal.

    const inline method mass: (newMass: Float32) ::=> Void := {
        Std assert: newMass >= 0.
        mass := newMass.
        massReciprocal := newMass = 0 ifTrue: { 0 } ifFalse: { 1.0f / mass }.
    }.

    const inline method inertiaTensor => Float32x3x3
        := inertiaTensor.

    const inline method inertiaTensorReciprocal => Float32x3x3
        := inertiaTensorReciprocal.

    const inline method inertiaTensor: (newInertiaTensor: Float32x3x3) ::=> Void := {
        inertiaTensor := newInertiaTensor.
        inertiaTensorReciprocal :=
            newInertiaTensor = Float32x3x3 zeros
            ifTrue: {Float32x3x3 zeros}
            ifFalse: {newInertiaTensor inverse}.
    }.

    const inline method gravityAccelerationForSector: (sector: PhysicalSector ref) ::=> Float32x3
        := hasCustomGravity
            ifTrue: {gravity}
            ifFalse: {sector gravity}.

    method computeInertiaTensor => Void := {
        ## TODO: Implement this method for when we extend to 3D.
    }.

    override method simulateImpulsesInSector: (sector: PhysicalSector ref) withDelta: (delta: Float32) ::=> Void := {
        movementController ifNotNil: {
            movementController simulateRigidBody: self impulsesInSector: sector withDelta: delta
        }.
    }.

    override method simulateMovementInSector: (sector: PhysicalSector ref) withDelta: (delta: Float32) ::=> Void := {
        movementController ifNotNil: {
            movementController simulateRigidBody: self movementInSector: sector withDelta: delta
        }.
    }.

    method computeDampingForTerminalVelocity: (terminalVelocity: Float32x3) withMaximumAcceleration: (maxAcceleration: Float32x3) ::=> Void := {
        linearDamping := maxAcceleration / terminalVelocity
    }.

    inline method applyImpulse: (impulse: Float32x3) ::=> Void := {
        self linearVelocity: self linearVelocity + impulse * massReciprocal.
    }.
}.

compileTime constant RigidBodyRef := RigidBody rcRef.

}. ## namespace GameSystem
}. ## namespace Woden
