namespace Woden definition: {
namespace GameSystem definition: {

useNamespace: Stdn Serialization.

class EntityRegistry definition: {
    meta definition: {
        let singleton mutable type: EntityRegistry uniquePointer.
        let singletonOnceCreation mutable type: Stdn OnceFlag.

        method uniqueInstance => EntityRegistry ref := {
            singletonOnceCreation do: {
                singleton reset: EntityRegistry nativeNew.
            }.

            singleton _
        }.
    }.

    field factories type: Stdn Collections Dictionary(Stdn String, AbstractEntityFactory pointer).

    method registerFactory: (factory: AbstractEntityFactory pointer) ::=> Void := {
        factories at: factory _ className asMutableString put: factory.
    }.

    method createEntityWithClassName: (className: Stdn String const ref) ::=> EntityPtr := {
        let factory := factories at: className ifAbsent: {
            return: EntityPtr nil
        }.

        factory _ newInstance
    }.

    method dumpEntityDefinitionsInto: (out: Stdn IO TextStreamWriter ref) ::=> Void := {
        let definitionObject := DOM Object sharedNew.
        let entities := DOM Object sharedNew.

        factories keysAndValuesDo: {:(Stdn String const ref)className :(AbstractEntityFactory pointer const ref)factory :: Void |
            let descriptionObject := DOM Object sharedNew.
            entities _
                at: className put: descriptionObject.

            let entity := factory _ newInstance.
            entity _
                postLoadInitialization;
                writeDescriptionOnto: descriptionObject _
        }.

        definitionObject _
            at: "entities" asMutableString put: entities.

        JSON Writer writeValue: definitionObject onTextStream: out.
    }.
}.

}. ## namespace GameSystem
}. ## namespace Woden
