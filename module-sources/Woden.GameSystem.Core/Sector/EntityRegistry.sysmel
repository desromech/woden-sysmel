namespace Woden definition: {
namespace GameSystem definition: {

useNamespace: Std Serialization.

class EntityRegistry definition: {
    meta definition: {
        let singleton mutable type: EntityRegistry uniquePointer.
        let singletonOnceCreation mutable type: Std OnceFlag.

        method uniqueInstance => EntityRegistry ref := {
            singletonOnceCreation do: {
                singleton reset: EntityRegistry nativeNew.
            }.

            singleton _
        }.
    }.

    field factories type: Std Collections Dictionary(Std String, AbstractEntityFactory pointer).

    method registerFactory: (factory: AbstractEntityFactory pointer) ::=> Void := {
        factories at: factory _ className asMutableString put: factory.
    }.

    method createEntityWithClassName: (className: Std String const ref) ::=> EntityRef := {
        let factory := factories at: className ifAbsent: {
            return: EntityRef nil
        }.

        factory _ newInstance
    }.

    method dumpEntityDefinitionsInto: (out: Std IO TextStreamWriter ref) ::=> Void := {
        let entities := DOM Object new.

        factories keysAndValuesDo: {:(Std String const ref)className :(AbstractEntityFactory pointer const ref)factory :: Void |
            let descriptionObject := DOM Object new.
            entities
                at: className put: descriptionObject.

            factory _ newInstance
                postLoadInitialization;
                writeDescriptionOnto: descriptionObject
        }.

        let definitionObject := DOM Object new
            at: "entities" put: entities;
            yourself.

        JSON Writer writeValue: definitionObject onTextStream: out.
    }.
}.

}. ## namespace GameSystem
}. ## namespace Woden
