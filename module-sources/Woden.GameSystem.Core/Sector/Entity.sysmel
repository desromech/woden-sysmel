namespace Woden definition: {
namespace GameSystem definition: {

useNamespace: Stdn Math.
useNamespace: Stdn Math Geometry.
useNamespace: Stdn Math LinearAlgebra.
useNamespace: Stdn Serialization.
useNamespace: Woden Runtime.
useNamespace: Woden MapDefinition.

class Entity superclass: Stdn SharedObject; definition: {
    public field parentSector type: Sector pointer.
    public field className type: Stdn String.
    public field name type: Stdn String.

    field previousTransform type: DecomposedTransform3dF32.
    field transform type: DecomposedTransform3dF32.
    field renderTransform type: ReversibleAffineTransform3dF32.

    public field localBoundingBox type: BoxF32.
    public field collisionObject type: CollisionObjectPtr.
    public field visualComponent type: VisualComponentPtr.
    public field sceneNode type: SceneNodePtr.

    meta definition: {
        macro method registerWithClassName: className
            := ``(global Factory mutable type: EntityFactory(SelfType, `,className))
    }.

    virtual method postLoadInitialization => Void := {
        ## This is a place to initialize parameters and ignore there values after loading from a definition.
    }.

    const inline method isInSector2D => Boolean8
        := parentSector isNotNil && parentSector _ isSector2D.

    method boundingBox => BoxF32
        := localBoundingBox transformedWith: transform asReversibleAffineTransform3d.

    method engine => EnginePtr
        := parentSector ifNil: {EnginePtr nil} ifNotNil: {parentSector _ engine}.

    method physicalSector => PhysicalSector pointer
        := parentSector
            ifNil: {nil}
            ifNotNil: {parentSector _ physicalSector getPointer}.

    virtual method loadFromDefinition: (definition: EntityDefinitionPtr const ref) fromLayer: (layerDefinition: SectorLayerDefinitionPtr const ref) ::=> Void := {
        className := definition _ className asArraySlice.
        name := definition _ name.
        self
            scale: definition _ scale;
            orientation: definition _ orientation;
            position: (definition _ positionForLayer: layerDefinition).
        localBoundingBox := definition _ localBoundingBox.
        localBoundingBox depth = 0 ifTrue: {
            localBoundingBox min z: layerDefinition _ layerMinZ.
            localBoundingBox max z: layerDefinition _ layerMaxZ.
        }.

        definition _ components do: {:each :: Void |
            each _ isCollisionShape ifTrue: {
                let shape := each downCastFor: CollisionShape.
                shape _ setupForLayer: layerDefinition.
                self buildCollisionObjectWithShape: shape

            }.

            each _ isVisualComponent ifTrue: {
                visualComponent := each downCastFor: VisualComponent.
                visualComponent _ setupForLayer: layerDefinition.
            }
        }.
    }.

    virtual method buildCollisionObjectWithShape: (collisionShape: CollisionShapePtr const ref) ::=> Void
        := {}.

    virtual method isMetadata => Boolean8
        := false.

    virtual method isAlive => Boolean8
        := true.

    virtual method needsTicking => Boolean8
        := false.

    virtual method spawn => Void := {

    }.

    virtual method prePhysicsTick: (delta: Float32) ::=> Void := {
        collisionObject _ position: self position.
    }.

    virtual method postPhysicsTick: (delta: Float32) ::=> Void := {
        self
            orientation: collisionObject _ orientation;
            position: collisionObject _ position.
    }.

    virtual method onPhysicsCollisionHit: (collidingObject: CollisionObject ref) at: (collisionPoint: Float32x3) ::=> Void := {

    }.

    virtual method tick: (delta: Float32) ::=> Void := {

    }.

    virtual method receiveDamage: (damage: Float32) by: (damagingEntity: Entity ref) at: (damagePoint: Float32x3) ::=> Void := {

    }.

    virtual method destroyed => Void := {
        self removeFromScene.
        self removeFromPhysicalSector.
    }.

    virtual method removeFromScene => Void := {
        sceneNode ifNil: {return: void}.
        sceneNode _ removeFromScene.
    }.

    virtual method addToScene: (scene: ScenePtr const ref) ::=> Void := {
        sceneNode ifNil: {self createSceneNode}.
        sceneNode ifNotNil: {
            scene _ add: sceneNode
        }
    }.

    virtual method addToPhysicalSector: (physicalSector: PhysicalSectorPtr const ref) ::=> Void := {
        collisionObject ifNotNil: {
            physicalSector _ addCollisionObject: collisionObject
        }
    }.

    virtual method removeFromPhysicalSector => Void := {
        collisionObject ifNotNil: {
            collisionObject _ removeFromPhysicalSector
        }
    }.

    virtual method createSceneNode ::=> Void := {
        visualComponent ifNil: {return: void}.
        sceneNode := visualComponent _ createSceneNodeFor: self engine parentTransform: transform asReversibleAffineTransform3d.
    }.

    const inline method transform => DecomposedTransform3dF32 const ref
        := transform.

    inline method transform: (aTransform: DecomposedTransform3dF32 const ref) ::=> Void := {
        transform := aTransform.
    }.

    const inline method scale => Float32x3
        := transform scale.

    inline method scale: (aPosition: Float32x3) ::=> Void := {
        transform scale: aPosition.
    }.

    const inline method position => Float32x3
        := transform translation.

    inline method position: (aPosition: Float32x3) ::=> Void := {
        transform translation: aPosition.
    }.

    const inline method orientation => QuaternionF32
        := transform rotation.

    inline method orientation: (newOrientation: QuaternionF32) ::=> Void := {
        transform rotation: newOrientation
    }.

    virtual method storeOldRenderingStateForInterpolation => Void := {
        previousTransform := transform.
    }.

    virtual method applyInterpolationForRendering: (alpha: Float32) ::=> Void := {
        let interpolatedTransform := previousTransform interpolateTo: transform at: alpha.
        renderTransform := interpolatedTransform asReversibleAffineTransform3d.
        sceneNode ifNotNil: {
            sceneNode _ transform: renderTransform.
        }.
    }.

    virtual method classDescription => Stdn ImmutableString
        := "Generic Entity".

    virtual method editorCategory => Stdn ImmutableString
        := "Generic".

    virtual method editorPreviewModel => Stdn ImmutableString
        := "".

    virtual method editorBoundingBox => BoxF32
        := localBoundingBox.

    virtual method editorEntityType => EditorEntityType
        := EditorEntityType Point.

    virtual method isAvailableInEditor => Boolean8
        := false.

    virtual method isMapIntrinsic => Boolean8
        := false.

    virtual method writeDescriptionOnto: (descriptionObject: DOM Object ref) ::=> Void := {
        let editorBoundingBox := self editorBoundingBox.
        let boundingBoxObject := DOM Object sharedNew.
        {
            let value := DOM List sharedNew.
            value _
                add: editorBoundingBox min x;
                add: editorBoundingBox min y;
                add: editorBoundingBox min z.
            boundingBoxObject _
                at: "min" asMutableString put: value.
        }.

        {
            let value := DOM List sharedNew.
            value _
                add: editorBoundingBox max x;
                add: editorBoundingBox max y;
                add: editorBoundingBox max z.
            boundingBoxObject _
                at: "max" asMutableString put: value.
        }.

        let descriptionProperties := DOM Object sharedNew.
        self writeDescriptionPropertiesOnto: descriptionProperties _.

        descriptionObject
            at: "classDescription" asMutableString put: self classDescription asMutableString;
            at: "editorCategory" asMutableString put: self editorCategory asMutableString;
            at: "type" asMutableString put: self editorEntityType asString asMutableString;
            at: "previewModel" asMutableString put: self editorPreviewModel asMutableString;
            at: "boundingBox" asMutableString put: boundingBoxObject;
            at: "isAvailableInEditor" asMutableString put: self isAvailableInEditor;
            at: "isMapIntrinsic" asMutableString put: self isMapIntrinsic;
            at: "isMetadata" asMutableString put: self isMetadata;
            at: "needsTicking" asMutableString put: self needsTicking;
            at: "properties" asMutableString put: descriptionProperties.
    }.

    virtual method writeDescriptionPropertiesOnto: (descriptionObject: DOM Object ref) ::=> Void := {

    }.
}.

compileTime constant EntityPtr := Entity sharedPointer.
compileTime constant EntityWeakPtr := Entity weakPointer.
compileTime constant Entities := Stdn Collections Vector(EntityPtr).

}. ## namespace GameSystem
}. ## namespace Woden
