namespace Woden definition: {
namespace GameSystem definition: {

useNamespace: Std Math Geometry.
useNamespace: Woden Runtime.
useNamespace: Woden MapDefinition.

class GlobalGameState superclass: Std RCObject; definition: {
    field engine type: EngineRef.
    field animationScheduler type: AnimationSchedulerRef.
    field activeSector type: SectorRef.
    field player type: PlayerRef.
    public field scene type: SceneRef.
    public field mainCamera type: CameraRef.

    method player => PlayerRef const ref
        := player.

    method initializeWithEngine: (anEngine: EngineRef) ::=> Void := {
        engine := anEngine.
        animationScheduler := AnimationScheduler new.
    }.

    method update: (delta: Float32) ::=> Void := {
        animationScheduler update: delta.
        activeSector ifNotNil: {
            activeSector update: delta
        }.
    }.

    virtual method applyInterpolationForRendering: (alpha: Float32) ::=> Void := {
        animationScheduler applyInterpolationForRendering: alpha.
        activeSector ifNotNil: {
            activeSector applyInterpolationForRendering: alpha
        }.
    }.

    method loadSectorFromDefinition: (sectorDefinition: SectorDefinitionRef const ref) ::=> Void := {
        let sector := (Sector for: engine)
            loadFromDefinition: sectorDefinition;
            yourself.
        self activateSector: sector
    }.

    method activateSector: (sector: SectorRef const ref) ::=> Void := {
        activeSector ifNotNil: {activeSector deactivateAndRemoveFromScene}.
        activeSector := sector.
        activeSector activateAndAddToScene: scene.
    }.

    virtual method startNewGame => Void := {
        player := self spawnPlayer.
    }.

    virtual method spawnPlayer => PlayerRef := {
        activeSector ifNil: {return: PlayerRef nil}.

        let startPosition := activeSector findPositionUsingMetadataEntityClassNamed: "PlayerStartPoint" default: Float32x3 zeros.
        let newPlayer := self newPlayerEntity
            position: startPosition;
            postLoadInitialization;
            yourself.
        activeSector spawnEntity: (newPlayer upCastFor: Entity).
        newPlayer
    }.

    virtual method newPlayerEntity => PlayerRef
        := Player new.
}.

compileTime constant GlobalGameStateRef := GlobalGameState rcRef.

}. ## namespace GameSystem
}. ## namespace Woden
