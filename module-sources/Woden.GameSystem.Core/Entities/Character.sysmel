namespace Woden definition: {
namespace GameSystem definition: {

useNamespace: Std Math.
useNamespace: Std Math Geometry.
useNamespace: Woden MapDefinition.

class Character superclass: Entity; definition: {
    compileTime constant HumanFallTerminalVelocity := 53.0.

    field hitPoints type: Float32.
    field rigidBody type: RigidBodyPtr.
    field moveDirection type: Float32x3.

    field characterMovementController type: CharacterMovementControllerPtr.

    field headOrientation type: QuaternionF32.
    field turningAngularVelocity type: Float32x3.
    field headAngularVelocity type: Float32x3.

    override method classDescription => Std ImmutableString
        := "Generic Character".

    override method editorCategory => Std ImmutableString
        := "NPC".

    override method initialize => Void := {
        characterMovementController := CharacterMovementController rcNew.
        headOrientation := QuaternionF32 identity.
        hitPoints := 100.
    }.

    override method postLoadInitialization => Void := {
        super postLoadInitialization.
        localBoundingBox := BoxF32 center: 0 halfExtent: Float32x3(0.5f, 0.85f, 0.5).
    }.

    virtual method eyePosition => Float32x3
        := Float32x3(0, localBoundingBox max y - 0.1f, 0).

    override method spawn => Void := {
        super spawn.
        self buildVisualComponent.
        self buildCollisionObject.
    }.

    override method prePhysicsTick: (delta: Float32) ::=> Void := {
        ## Constraint the valid orientations in a 2D sector.
        let engineOrientation mutable := self orientation.
        let angularVelocity mutable := turningAngularVelocity.

        self isInSector2D ifTrue: {
            let lookRight := QuaternionF32 yRotation: Float32 halfPi negated.
            let lookLeft := QuaternionF32 yRotation: Float32 halfPi.
            (self orientation closeTo: lookLeft) || (self orientation closeTo: lookRight) ifFalse: {
                self orientation: lookRight
            }.

            rigidBody _ angularVelocity: Float32x3 zeros.
            headAngularVelocity := Float32x3 zeros.
            engineOrientation := QuaternionF32 identity.
            angularVelocity := Float32x3 zeros.
        }.

        headOrientation := (headOrientation + (QuaternionF32 xyz: headAngularVelocity*0.5f*delta) * headOrientation) normalized.

        characterMovementController _ stepHeight: self stepHeight.
        rigidBody _
            angularDamping: 0;
            angularVelocity: angularVelocity.
        rigidBody _ engineAcceleration: ((moveDirection closeTo: 0)
            ifTrue: {Float32x3 zeros}
            ifFalse: {engineOrientation rotateVector: moveDirection normalized * self internalEngineAcceleration}).
        super prePhysicsTick: delta.
    }.

    virtual method buildVisualComponent => Void := {
        visualComponent := VisualComponent box: localBoundingBox color: Float32x4 white.
    }.

    override method isAlive => Boolean8
        := hitPoints > 0.

    const virtual method maximumJumpHeight => Float32
        := 7.0f.

    const virtual method maximumJumpHeightTime => Float32
        := 0.6f.

    const virtual method jumpVelocity => Float32x3 := {
        ## Computing the formula for this on paper.
        ## 1) tmax = v/g 2)/ hmax =v^2/(2g)
        ## Solved, gives the following:
        ## Note: The actual jump height is smaller because of the linear damping.
        Float32x3(0.0f, 2.0f* self maximumJumpHeight / self maximumJumpHeightTime, 0).
    }.

    const virtual method jumpGravity => Float32x3 := {
        let t := self maximumJumpHeightTime.
        Float32x3(0.0f, -2.0f* self maximumJumpHeight / (t*t), 0)
    }.

    const virtual method terminalVelocity => Float32x3
        := 10.0f.

    const virtual method terminalVelocityAchivementTime => Float32x3
        := 0.1f.

    const virtual method fallTerminalVelocity => Float32x3
        := Float32x3(0, HumanFallTerminalVelocity, 0).

    const virtual method internalEngineAcceleration => Float32x3
        := self terminalVelocity / self terminalVelocityAchivementTime.

    const virtual method mass => Float32
        := 70.0f.

    const virtual method stepHeight => Float32
        := 0.5f.

    virtual method buildCollisionObject => Void := {
        rigidBody := RigidBody rcNew.
        rigidBody _
            ownerEntity: (self asRCPointer upCastFor: Entity);
            collisionShape: (CollisionShape boxWithHalfExtent: localBoundingBox halfExtent);
            coefficientOfRestitution: 0.2f;
            mass: self mass;
            movementController: (characterMovementController upCastFor: PhysicalMovementController);
            makeCharacter.
        collisionObject := rigidBody upCastFor: CollisionObject.
        self applyMovementParametersToRigidBody
    }.

    virtual method applyMovementParametersToRigidBody => Void := {
        let jumpGravity := self jumpGravity.
        rigidBody _
            hasCustomGravity: true;
            gravity: jumpGravity;
            computeDampingForTerminalVelocity: (self terminalVelocity + self fallTerminalVelocity) withMaximumAcceleration: self internalEngineAcceleration + jumpGravity.
    }.

    override method receiveDamage: (damage: Float32) by: (damagingEntity: Entity ref) at: (damagePoint: Float32x3) ::=> Void := {
        hitPoints := hitPoints - damage.
    }.

    virtual method isOnFloor => Boolean8 := {
        let physicalSector := self physicalSector.
        physicalSector ifNil: {return: false}.

        collisionObject ifNil: {return: false}.
        let boundingBox := collisionObject _ boundingBox.

        let floorSensorHeight := 0.1f.
        let sensorPosition := boundingBox nearBottomLeft - Float32x3(0, floorSensorHeight, 0).
        let sensorExtent := Float32x3(boundingBox width, floorSensorHeight, boundingBox depth).
        physicalSector _
            isBox: (BoxF32 min: sensorPosition extent: sensorExtent)
            belongingTo: collisionObject getPointer
            collidingWithGroup: CollisionGroup AllSolid
    }.

    virtual method canJump => Boolean8
        := self isOnFloor.

    virtual method jump => Void := {
        self isOnFloor ifFalse: {return: void}.
        self doJump.
    }.

    virtual method doJump => Void := {
        collisionObject _ linearVelocity: collisionObject _ linearVelocity + self jumpVelocity.
    }.
}.

}. ## namespace GameSystem
}. ## namespace Woden
