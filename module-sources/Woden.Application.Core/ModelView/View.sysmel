namespace Woden definition: {
namespace Application definition: {

useNamespace: Woden Runtime.

useNamespace: Std Graphics Core.
useNamespace: Std Graphics GUI.

#**
 * I am the model that lies underlying a Woden application.
 *#
class View superclass: EventHandler; definition: {
    public field timeSinceLastFrame type: Float32.
    
    protected field model type: ModelRef.
    protected field viewWindow type: ViewWindowRef.
    protected field isSecondaryView type: Boolean8.

    const inline method model => ModelRef const ref
        := model.

    const inline method engine => EngineRef const ref
        := model engine.

    virtual method defaultClearDepth => Float32
        := 1.0f.

    virtual method defaultClearStencil => UInt8
        := 0.

    virtual method colorBufferFormat => PixelFormat
        := PixelFormat B8G8R8A8_UNormSRGB.

    virtual method depthStencilFormat => PixelFormat
        := PixelFormat Unknown.

    virtual method initialExtent => UInt32x2
        := UInt32x2(640, 480).

    virtual method isStereoRequested => Boolean8
        := false.

    virtual method initializeWithModel: (theModel: ModelRef const ref) ::=> Boolean8 := {
        model := theModel.

        true
    }.

    virtual method newViewWindowInstance => ViewWindowRef
        := GenericViewWindow new upCastFor: ViewWindow.

    virtual method open ::=> Boolean8 := {
        let newViewWindow := self newViewWindowInstance.
        (newViewWindow openForView: self asRCRef) ifFalse: {
            return: false.
        }.

        viewWindow := newViewWindow upCastFor: ViewWindow.
        true
    }.

    method toggleFullscreen => Void
        := viewWindow toggleFullscreen.

    method viewWindowDestroyed => Void := {
        viewWindow := nil.
        model viewDestroyed: self asRCRef
    }.

    virtual method close => Void := {
        viewWindow ifNotNil: {
            viewWindow close
        }
    }.

    override method onWindowCloseRequestEvent: (event: WindowCloseRequestEvent ref) ::=> Void := {
        self close
    }.

    virtual method onStartFrameTick: (event: TickEvent ref) ::=> Void := {
    }.

    virtual method prepareRendering => Void := {
    }.

    virtual method constructRenderingCommandList => Void := {
    }.

    virtual method sendRenderingCommandList => Void := {

    }.

    virtual method commitSurfaces => Void := {

    }.

    const inline method isSecondaryView => Boolean8
        := isSecondaryView.

    method makeSecondary => Void := {
        isSecondaryView := true.
    }.
}.

compileTime constant ViewRef := View rcRef

}. ## End of namespace Application
}. ## End of namespace Woden
