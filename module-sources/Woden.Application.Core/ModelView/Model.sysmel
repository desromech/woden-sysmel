namespace Woden definition: {
namespace Application definition: {

useNamespace: Woden Runtime.
useNamespace: Std Graphics GUI.

#**
 * I am the model that lies underlying a Woden application.
 *#
class Model superclass: RenderingProcess; definition: {
    protected field engine type: EngineRef.
    protected field views type: Std Collections Vector(View rcRef).

    const inline method engine => EngineRef const ref
        := engine.

    virtual method initializeEngineWithCommandLine: (arguments: Std ImmutableString const arraySlice) ::=> Boolean8 := {
        engine ifNotNil: {return: true}.

        let newEngine := Engine new.
        (newEngine initializeEngineWithCommandLine: arguments) ifFalse: {
            return: false.
        }.

        engine := newEngine.
        true
    }.

    virtual method initializeModel => Boolean8 := {
        true.
    }.

    virtual method parseCommandLine: (arguments: Std ImmutableString const arraySlice) ::=> Boolean8 := {
        true
    }.

    virtual method initializeWithCommandLine: (arguments: Std ImmutableString const arraySlice) ::=> Boolean8 := {
        (self parseCommandLine: arguments) &&
        (self initializeEngineWithCommandLine: arguments) &&
        self initializeModel
    }.

    virtual method createNewView => ViewRef
        := View new.

    virtual method createNewSecondaryView => ViewRef
        := View new.

    virtual method openApplication => Boolean8 := {
        self openView: self createNewView
    }.

    virtual method openView: (newView: ViewRef const ref) ::=> Boolean8 := {
        newView isNotNil && (newView initializeWithModel: self asRCRef) ifFalse: {
            return: false.
        }.

        newView open ifFalse: {return: false}.
        views add: newView.
        views size = 1 ifTrue: {
            engine registerRenderingProcess: (self asWeakRCRef upCastFor: RenderingProcess)
        }.
        true
    }.

    method viewDestroyed: (view: ViewRef) ::=> Void := {
        views remove: view.
        views ifEmpty: {
            engine unregisterRenderingProcess: (self asWeakRCRef upCastFor: RenderingProcess)
        }.
    }.

    virtual method runMainLoop ::=> Int32 := {
        engine ifNil: {
            return: 1
        }.

        engine runMainLoop
    }.

    virtual method shutdown ::=> Void := {
        engine ifNotNil: {
            engine shutdown.
            engine := nil
        }.
    }.

    virtual method runMainLoopAndShutdown => Int32 := {
        let exitCode := self runMainLoop.
        self shutdown.
        exitCode
    }.

    override method onStartFrameTick: (event: TickEvent ref) ::=> Void := {
        views do: {:each :: Void |
            each
                timeSinceLastFrame: (event deltaSeconds castTo: Float32);
                onStartFrameTick: event.
        }
    }.

    override method prepareRendering => Void := {
        views do: {:each :: Void |
            each prepareRendering.
        }
    }.

    override method constructRenderingCommandList => Void := {
        views do: {:each :: Void |
            each constructRenderingCommandList.
        }
    }.

    override method commitSurfaces => Void := {
        views do: {:each :: Void |
            each commitSurfaces.
        }
    }.
}.

compileTime constant ModelRef := Model rcRef

}. ## End of namespace Application
}. ## End of namespace Woden
