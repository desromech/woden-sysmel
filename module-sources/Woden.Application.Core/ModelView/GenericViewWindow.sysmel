namespace Woden definition: {
namespace Application definition: {

useNamespace: Woden Runtime.

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Graphics GUI.

#**
 * I am the model that lies underlying a Woden application.
 *#
class GenericViewWindow superclass: ViewWindow; definition: {
    protected field window type: Window sharedPointer.
    protected field swapChain type: SwapChainPtr.
    protected field currentSwapChainExtent type: UInt32x2.
    protected field displayRenderPass type: RenderPassPtr.

    override method extent => UInt32x2
        := currentSwapChainExtent.

    override method validatedExtent => UInt32x2 := {
        window ifNotNil: {
            let newExtent := window _ extent.
            currentSwapChainExtent = newExtent ifFalse: {
                self createSwapChainWithExtent: newExtent
            }.
        }.

        currentSwapChainExtent
    }.

    ## For displaying we only need a swap chain with the color buffer, by default.
    method createSwapChainWithExtent: (newExtent: UInt32x2) ::=> Void := {
        let device := self engine _ renderingDevice.

        let swapChainCreationInfo mutable := SwapChainCreationInfo()
            colorBufferFormat: PixelFormat B8G8R8A8_UNormSRGB;
            extent: newExtent;
            bufferCount: FrameBufferingCount;
            yourself.

        let defaultCommandQueue := device _ getDefaultCommandQueue.
        swapChain := window _ createSwapChain: swapChainCreationInfo for: defaultCommandQueue.
        currentSwapChainExtent := newExtent.
    }.

    override method openForView: (theView: ViewPtr const ref) ::=> Boolean8 := {
        (super openForView: theView) ifFalse: {
            return: false.
        }.

        let initialExtent := Int32x2(640, 480).

        window := self engine _ windowSystem _ createWindow: (WindowCreationInfo()
			resizable: true;
			extent: initialExtent;
			title: "Test Window" asMutableString;
			yourself).
	    window ifNil: {
	        return: false.
	    }.

        window _ renderingDevice: self engine _ renderingDevice.

        ## Create the window swap chain.
        self createSwapChainWithExtent: (initialExtent castTo: UInt32x2).
        swapChain ifNil: {
            return: false
        }.

        ## Create the event handler.
	    {
	        let eventHandler := GenericViewEventHandler sharedNew.
			eventHandler _ viewWindow: self address.
	        window _ eventHandler: (eventHandler upCastFor: EventHandler)
	    }.

        true
    }.

    override method getCurrentBackBuffer => FramebufferPtr := {
        swapChain ifNil: {
            return: FramebufferPtr nil
        }.

        swapChain _ getCurrentBackBuffer
    }.

    override method getDisplayRenderPass => RenderPassPtr := {
        displayRenderPass ifNil: {
            let colorAttachments mutable := RenderPassColorAttachmentDescription array (
                RenderPassColorAttachmentDescription()
                    format: PixelFormat B8G8R8A8_UNormSRGB;
                    beginAction: RenderPassAttachmentAction Clear;
                    endAction: RenderPassAttachmentAction Keep;
                    yourself
            ).
            displayRenderPass := self engine _ renderingDevice _ createRenderPass: colorAttachments depthStencilAttachment: nil.
        }.

        displayRenderPass
    }.

    override method swapBuffers => Void := {
        swapChain ifNotNil: {
            swapChain _ swapBuffers
        }
    }.

    override method close => Void := {
        window ifNil: {return: void}.
        (window _ eventHandler getPointer castTo: GenericViewEventHandler pointer) ifNotNil: {:eventHandler :: Void |
            eventHandler _ viewWindow := nil
        }.

        window _ close.
        window reset.
        view _ viewWindowDestroyed.
    }.
}.

class GenericViewEventHandler superclass: EventHandler; definition: {
	public field viewWindow type: GenericViewWindow pointer.

    override method processEvent: (event: Event ref) ::=> Void := {
        super processEvent: event.

        viewWindow ifNotNil: {
            let view := viewWindow _ view.
            view ifNotNil: {
                view _ processEvent: event.
            }
        }.
    }.
}.

compileTime constant GenericViewWindowPtr := GenericViewWindow sharedPointer

}. ## End of namespace Application
}. ## End of namespace Woden
