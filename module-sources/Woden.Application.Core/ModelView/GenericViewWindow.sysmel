namespace Woden definition: {
namespace Application definition: {

useNamespace: Woden Runtime.

useNamespace: Stdn Graphics Core.
useNamespace: Stdn Graphics GUI.

#**
 * I am the model that lies underlying a Woden application.
 *#
class GenericViewWindow superclass: ViewWindow; definition: {
    protected field window type: Window sharedPointer.
    protected field swapChain type: SwapChainPtr.
    protected field currentSwapChainExtent type: UInt32x2.
    protected field displayRenderPass type: RenderPassPtr.
    protected field isOutOfDate type: Boolean8.

    override method extent => UInt32x2
        := currentSwapChainExtent.

    override method validatePresentationSurfaces => Boolean8 := {
        window ifNotNil: {
            let newExtent := window _ extent.
            swapChain isNil || currentSwapChainExtent ~= newExtent || isOutOfDate ifTrue: {
                self createSwapChainWithExtent: newExtent
            }.
        }.

        swapChain isNotNil
    }.

    ## For displaying we only need a swap chain with the color buffer, by default.
    method createSwapChainWithExtent: (newExtent: UInt32x2) ::=> Void := {
        let device := self engine _ renderingDevice.

        let swapChainCreationInfo mutable := SwapChainCreationInfo()
            colorBufferFormat: self colorBufferFormat;
            depthStencilFormat: self depthStencilFormat;
            extent: newExtent;
            layerCount: (self isStereoRequested ifTrue: 2u ifFalse: 1u);
            bufferCount: FrameBufferingCount;
            yourself.

        let defaultCommandQueue := device _ getDefaultCommandQueue.
        swapChain := window _ createSwapChain: swapChainCreationInfo for: defaultCommandQueue.
        currentSwapChainExtent := newExtent.
        isOutOfDate := false.
    }.

    override method openForView: (theView: ViewPtr const ref) ::=> Boolean8 := {
        (super openForView: theView) ifFalse: {
            return: false.
        }.

        let initialExtent := Int32x2(864, 486).

        window := self engine _ windowSystem _ createWindow: (WindowCreationInfo()
			resizable: true;
			extent: initialExtent;
			title: "Test Window" asMutableString;
			yourself).
	    window ifNil: {
	        return: false.
	    }.

        window _ renderingDevice: self engine _ renderingDevice.

        ## Create the event handler.
	    {
	        let eventHandler := GenericViewEventHandler sharedNew.
			eventHandler _ viewWindow: self address.
	        window _ eventHandler: (eventHandler upCastFor: EventHandler)
	    }.

        true
    }.

    override method getCurrentBackBufferLeftEye => FramebufferPtr := {
        swapChain isNil || isOutOfDate ifTrue: {return: FramebufferPtr nil}.

        swapChain _ getCurrentBackBufferForLayer: 0u
    }.

    override method getCurrentBackBufferRightEye => FramebufferPtr := {
        swapChain isNil || isOutOfDate ifTrue: {return: FramebufferPtr nil}.

        swapChain _ getCurrentBackBufferForLayer: 1u
    }.

    override method getDisplayRenderPass => RenderPassPtr := {
        displayRenderPass ifNil: {
            let colorAttachments mutable := RenderPassColorAttachmentDescription array (
                RenderPassColorAttachmentDescription()
                    format: self colorBufferFormat;
                    beginAction: RenderPassAttachmentAction Clear;
                    endAction: RenderPassAttachmentAction Keep;
                    yourself
            ).
            let depthStencilAttachment mutable := RenderPassDepthStencilAttachmentDescription()
                format: self depthStencilFormat;
                beginAction: RenderPassAttachmentAction Clear;
                endAction: RenderPassAttachmentAction Keep;
                stencilBeginAction: RenderPassAttachmentAction Clear;
                stencilEndAction: RenderPassAttachmentAction Keep;
                clearValue: (DepthStencilValue()
                    depth: self defaultClearDepth;
                    stencil: self defaultClearStencil;
                    yourself)
                yourself.
            displayRenderPass := self engine _ renderingDevice _ createRenderPass: colorAttachments depthStencilAttachment:
                (depthStencilAttachment format = PixelFormat Unknown ifTrue: nil ifFalse: depthStencilAttachment address).
        }.
        displayRenderPass
    }.

    override method toggleFullscreen => Void
        := window _ toggleFullscreen.

    override method commitSurfaces => Void := {
        swapChain _ swapBuffers selectCase: #{
        SwapChainPresentationError OutOfDate : {
            isOutOfDate := true
        }.
        SwapChainPresentationError Suboptimal : {
            isOutOfDate := true
        }.
        SwapChainPresentationError Ok : {}.
        }
    }.

    override method close => Void := {
        window ifNil: {return: void}.
        (window _ eventHandler getPointer castTo: GenericViewEventHandler pointer) ifNotNil: {:eventHandler :: Void |
            eventHandler _ viewWindow := nil
        }.

        window _ close.
        window reset.
        view _ viewWindowDestroyed.
    }.
}.

class GenericViewEventHandler superclass: EventHandler; definition: {
	public field viewWindow type: GenericViewWindow pointer.

    override method processEvent: (event: Event ref) ::=> Void := {
        super processEvent: event.

        viewWindow ifNotNil: {
            let view := viewWindow _ view.
            view ifNotNil: {
                view _ processEvent: event.
            }
        }.
    }.
}.

compileTime constant GenericViewWindowPtr := GenericViewWindow sharedPointer

}. ## End of namespace Application
}. ## End of namespace Woden
