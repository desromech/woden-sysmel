namespace Woden definition: {
namespace Application definition: {

useNamespace: Woden Runtime.
useNamespace: Std Graphics GUI.

#**
 * I am the model that lies underlying a Woden application.
 *#
class SceneModel superclass: Model; definition: {
    protected field scene type: SceneRef.
    protected field mainCamera type: CameraRef.
    protected field sceneRenderingPipeline type: SceneRenderingPipelineRef.
    protected field presentationMode type: SceneModelPresentationModeRef.
    protected field stereoPresentationMode type: StereoPresentationMode.

    const inline method scene => SceneRef const ref
        := scene.

    const inline method mainCamera => CameraRef const ref
        := mainCamera.

    virtual method secondaryScene => SceneRef
        := SceneRef nil.

    virtual method secondarySceneMainCamera => CameraRef
        := CameraRef nil.

    method stereoPresentationMode => StereoPresentationMode
        := stereoPresentationMode.

    override method parseCommandLine: (arguments: Std ImmutableString const arraySlice) ::=> Boolean8 := {

        arguments do: {:arg :: Void |
            arg selectCase: #{
            "-stereo" : {self useStereoDisplay}.
            "-stereo-anaglyph-red-cyan" : {self useStereoAnaglyphRedCyanDisplay}.
            "-stereo-anaglyph-cyan-red" : {self useStereoAnaglyphCyanRedDisplay}.
            "-stereo-left-right" : {self useStereoLeftRightDisplay}.
            "-stereo-top-bottom" : {self useStereoTopBottomDisplay}.
            "-stereo-interleaved-even-odd" : {self useStereoInterleavedEvenOddDisplay}.
            "-stereo-interleaved-odd-even" : {self useStereoInterleavedOddEvenDisplay}.
            "-single-view" : {self useSingleViewPresentationMode}.
            "-double-view" : {self useDoubleViewPresentationMode}.
            "-vr" : {self useVRPresentationMode}.
            _ : {}
            }.
        }.

        super parseCommandLine: arguments
    }.

    override method initializeModel => Boolean8 := {
        ## Ask the scene rendering pipeline about the default stereo presentation mode.
        stereoPresentationMode isMonoscopic ifTrue: {
            stereoPresentationMode := self sceneRenderingPipeline defaultStereoPresentationMode
        }.

        super initializeModel ifFalse: {return: false}.

        scene := Scene new.
        true.
    }.

    override method createNewView => ViewRef
        := SceneView new upCastFor: View.

    override method createNewSecondaryView => ViewRef
        := self createNewView.

    virtual method newScene => SceneRef := {
        let newScene := Scene new
            engine: self engine;
            yourself.
        let newCamera := Camera new.

        mainCamera := newCamera.
        newScene add: (mainCamera upCastFor: SceneNode).

        scene := newScene.
        newScene
    }.

    virtual method createSceneRenderingPipeline => SceneRenderingPipelineRef
        := SceneRenderingPipelineRegistry uniqueInstance createDefaultFor: self engine.

    override method openApplication => Boolean8
        := self presentationMode openApplicationForModel: self.

    method presentationMode => SceneModelPresentationModeRef := {
        presentationMode ifNil: {self useDefaultViewPresentationMode}.
        presentationMode
    }.

    method useStereoDisplay => Void := {
        stereoPresentationMode := StereoPresentationMode MultiLayerSwapChain
    }.

    method useStereoAnaglyphRedCyanDisplay => Void := {
        stereoPresentationMode := StereoPresentationMode AnaglyphRedCyan
    }.

    method useStereoAnaglyphCyanRedDisplay => Void := {
        stereoPresentationMode := StereoPresentationMode AnaglyphCyanRed
    }.

    method useStereoLeftRightDisplay => Void := {
        stereoPresentationMode := StereoPresentationMode LeftRightSideBySide
    }.

    method useStereoRightLeftDisplay => Void := {
        stereoPresentationMode := StereoPresentationMode RightLeftSideBySide
    }.

    method useStereoTopBottomDisplay => Void := {
        stereoPresentationMode := StereoPresentationMode TopBottomSideBySide
    }.

    method useStereoBottomTopDisplay => Void := {
        stereoPresentationMode := StereoPresentationMode BottomTopSideBySide
    }.

    method useStereoInterleavedEvenOddDisplay => Void := {
        stereoPresentationMode := StereoPresentationMode InterleavedEvenOdd
    }.

    method useStereoInterleavedOddEvenDisplay => Void := {
        stereoPresentationMode := StereoPresentationMode InterleavedOddEven
    }.

    method useDefaultViewPresentationMode => Void := {
        presentationMode := SceneModelPresentationMode default
    }.

    method useSingleViewPresentationMode => Void := {
        presentationMode := SingleViewSceneModelPresentationMode new upCastFor: SceneModelPresentationMode
    }.

    method useDoubleViewPresentationMode => Void := {
        presentationMode := DoubleViewSceneModelPresentationMode new upCastFor: SceneModelPresentationMode
    }.

    method useVRPresentationMode => Void := {
        stereoPresentationMode := StereoPresentationMode VR.
        presentationMode := VRSceneModelPresentationMode new upCastFor: SceneModelPresentationMode
    }.

    method sceneRenderingPipeline => SceneRenderingPipelineRef const ref := {
        sceneRenderingPipeline ifNil: { sceneRenderingPipeline := self createSceneRenderingPipeline }.
        sceneRenderingPipeline
    }.

    override method needsToRender => Boolean8
        := true.

    override method prepareRendering => Void := {
        super prepareRendering.
    }.

    override method onStartFrameTick: (event: TickEvent ref) ::=> Void := {
        scene ifNotNil: {
            scene currentTime: (event seconds castTo: Float32)
        }.

        super onStartFrameTick: event.
    }.
}.

compileTime constant SceneModelRef := SceneModel rcRef

}. ## End of namespace Application
}. ## End of namespace Woden
