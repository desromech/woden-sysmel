namespace Woden definition: {
namespace Application definition: {

useNamespace: Woden Runtime.
useNamespace: Stdn Graphics GUI.

#**
 * I am the model that lies underlying a Woden application.
 *#
class SceneModel superclass: Model; definition: {
    protected field scene type: ScenePtr.
    protected field mainCamera type: CameraPtr.
    protected field sceneRenderingPipeline type: SceneRenderingPipelinePtr.
    protected field presentationMode type: SceneModelPresentationModePtr.

    const inline method scene => ScenePtr const ref
        := scene.

    const inline method mainCamera => CameraPtr const ref
        := mainCamera.

    virtual method secondaryScene => ScenePtr
        := ScenePtr nil.

    virtual method secondarySceneMainCamera => CameraPtr
        := CameraPtr nil.

    override method parseCommandLine: (arguments: Char8 const pointer arraySlice) ::=> Boolean8 := {

        arguments do: {:arg :: Void |
            (arg until: Stdn cstrlen(arg)) selectCase: #{
            "-single-view" : {self useSingleViewPresentationMode}.
            "-double-view" : {self useDoubleViewPresentationMode}.
            "-vr" : {self useVRPresentationMode}.
            _ : {}
            }.
        }.

        super parseCommandLine: arguments
    }.

    override method initializeModel => Boolean8 := {
        super initializeModel ifFalse: {return: false}.

        scene := Scene sharedNew.
        true.
    }.

    override method createNewView => ViewPtr
        := SceneView sharedNew upCastFor: View.

    override method createNewSecondaryView => ViewPtr
        := self createNewView.

    virtual method newScene => ScenePtr := {
        let newScene := Scene sharedNew.
        newScene _ engine: self engine.
        let newCamera := Camera sharedNew.

        mainCamera := newCamera.
        newScene _ add: (mainCamera upCastFor: SceneNode).

        scene := newScene.
        newScene
    }.

    virtual method createSceneRenderingPipeline => SceneRenderingPipelinePtr
        := SceneRenderingPipelineRegistry uniqueInstance createDefaultFor: self engine.

    override method openApplication => Boolean8
        := self presentationMode _ openApplicationForModel: self.

    method presentationMode => SceneModelPresentationModePtr := {
        presentationMode ifNil: {self useDefaultViewPresentationMode}.
        presentationMode
    }.

    method useDefaultViewPresentationMode => Void := {
        presentationMode := SceneModelPresentationMode default
    }.

    method useSingleViewPresentationMode => Void := {
        presentationMode := SingleViewSceneModelPresentationMode sharedNew upCastFor: SceneModelPresentationMode
    }.

    method useDoubleViewPresentationMode => Void := {
        presentationMode := DoubleViewSceneModelPresentationMode sharedNew upCastFor: SceneModelPresentationMode
    }.

    method useVRPresentationMode => Void := {
        presentationMode := VRSceneModelPresentationMode sharedNew upCastFor: SceneModelPresentationMode
    }.

    method sceneRenderingPipeline => SceneRenderingPipelinePtr const ref := {
        sceneRenderingPipeline ifNil: { sceneRenderingPipeline := self createSceneRenderingPipeline }.
        sceneRenderingPipeline
    }.

    override method needsToRender => Boolean8
        := true.

    override method prepareRendering => Void := {
        super prepareRendering.
    }.

    override method onStartFrameTick: (event: TickEvent ref) ::=> Void := {
        scene ifNotNil: {
            scene _ currentTime: (event seconds castTo: Float32)
        }.

        super onStartFrameTick: event.
    }.
}.

compileTime constant SceneModelPtr := SceneModel sharedPointer

}. ## End of namespace Application
}. ## End of namespace Woden
