namespace Woden definition: {
namespace Application definition: {

useNamespace: Woden Runtime.
useNamespace: Std Graphics Core.
useNamespace: Std Graphics GUI.
useNamespace: Std Math Geometry.
useNamespace: Std Math LinearAlgebra.

#**
 * I am the model that lies underlying a Woden application.
 *#
class SceneView superclass: View; definition: {
    protected field currentExtent type: UInt32x2.
    protected field currentBackBufferLeftEye type: FramebufferRef.
    protected field currentBackBufferRightEye type: FramebufferRef.
    protected field stereoPresentationMode type: StereoPresentationMode.

    method sceneModel => SceneModel pointer
        := model getPointer castTo: SceneModel pointer.

    method scene => ScenePtr
        := isSecondaryView
            ifTrue: {self sceneModel _ secondaryScene}
            ifFalse: {self sceneModel _ scene}.

    method camera => CameraPtr
        := isSecondaryView
            ifTrue: {self sceneModel _ secondarySceneMainCamera}
            ifFalse: {self sceneModel _ mainCamera}.

    protected field sceneRenderingPipelineViewport type: SceneRenderingPipelineViewportPtr.

    method ensureRenderingViewportWithExtent: (requiredExtent: UInt32x2) ::=> Void := {
        sceneRenderingPipelineViewport ifNil: {
            sceneRenderingPipelineViewport := self sceneModel _ sceneRenderingPipeline _ createSceneRenderingPipelineViewport.
        }.

        ## Apply and sanitize the stereo presentation mode.
        stereoPresentationMode := self sceneModel _ stereoPresentationMode.
        stereoPresentationMode isMultiLayerSwapChain && viewWindow _ getCurrentBackBufferRightEye isNil ifTrue: {
            stereoPresentationMode := StereoPresentationMode Monoscopic.
        }.

        sceneRenderingPipelineViewport _
            stereoPresentationMode: stereoPresentationMode;
            extent: requiredExtent.
        currentExtent := requiredExtent.
    }.

    virtual method prepareViewCamera => Void := {

    }.

    override method newViewWindowInstance => ViewWindowPtr := {
        let result := self sceneModel _ sceneRenderingPipeline _ newViewWindowInstance.
        result ifNotNil: {
            return: (result downCastFor: ViewWindow)
        }.
        super newViewWindowInstance
    }.

    override method defaultClearDepth => Float32
        := self sceneModel _ sceneRenderingPipeline _ defaultClearDepth.

    override method defaultClearStencil => UInt8
        := self sceneModel _ sceneRenderingPipeline _ defaultClearStencil.

    override method colorBufferFormat => PixelFormat
        := self sceneModel _ sceneRenderingPipeline _ swapChainColorBufferFormat.

    override method depthStencilFormat => PixelFormat
        := self sceneModel _ sceneRenderingPipeline _ swapChainDepthStencilBufferFormat.

    override method isStereoRequested => Boolean8
        := self sceneModel _ stereoPresentationMode isMultiLayerSwapChain.

    method stereoPresentationMode => StereoPresentationMode
        := stereoPresentationMode.

    protected field framePreparationTime type: Float32.
    protected field commandListConstructionTime type: Float32.
    protected field lastFrameVisibleObjectCount type: UIntPointer.
    protected field hasValidPresentationSurfaces type: Boolean8.

    override method prepareRendering => Void := {
        hasValidPresentationSurfaces := viewWindow isNotNil && viewWindow _ validatePresentationSurfaces.
        hasValidPresentationSurfaces ifFalse: {return: void}.

        framePreparationTime := (Std Chrono profileTimeToRun: {
            self ensureRenderingViewportWithExtent: viewWindow _ drawingSurfaceExtent.
            lastFrameVisibleObjectCount := sceneRenderingPipelineViewport _ getLastFrameVisibleObjectCount.
            currentBackBufferLeftEye := viewWindow _ getCurrentBackBufferLeftEye.
            currentBackBufferRightEye := viewWindow _ getCurrentBackBufferRightEye.
            self prepareViewCamera.
            sceneRenderingPipelineViewport _
                timeSinceLastFrame: timeSinceLastFrame;
                scene: self scene;
                camera: self camera;
                setScene2D: (self buildOverlayScene2DWith: sceneRenderingPipelineViewport _ scene2DBuilder);
                prepareRendering.
        }) castTo: Float32.
    }.

    override method constructRenderingCommandList => Void := {
        hasValidPresentationSurfaces ifFalse: {return: void}.

        commandListConstructionTime := (Std Chrono profileTimeToRun: {
            sceneRenderingPipelineViewport _
                setCurrentBackBufferLeftEye: currentBackBufferLeftEye rightEye: currentBackBufferRightEye renderPass: viewWindow _ getDisplayRenderPass;
                constructAndEnqueueCommandList.
        }) castTo: Float32.
    }.

    override method commitSurfaces => Void := {
        hasValidPresentationSurfaces ifFalse: {return: void}.

        viewWindow _ commitSurfaces.
    }.

    private field defaultFontFaceWithSize type: FontFaceWithSizeRef.

    method defaultFontFaceWithSize => FontFaceWithSizeRef const ref := {
        defaultFontFaceWithSize ifNil: {
            let fontFace mutable := FontRegistry default defaultSans normalFace.
            defaultFontFaceWithSize := fontFace getOrCreateFaceWithSize: 12.
        }.

        defaultFontFaceWithSize
    }.

    virtual method buildOverlayFPSDisplayWith: (builder: Std Graphics Scene2D BuilderRef const ref) ::=> Std Graphics Scene2D NodeRef := {
        let frameTime := self engine _ lastFrameTime.
        let frameTimeString := Std String textStreamContents: {:out :: Void |
            out << "Frame time " << (frameTime * 1000.0f) << " ms "; nl.
            out << "FPS " << (1.0 / frameTime); nl.
            out << "Preparation time " << (framePreparationTime * 1000.0f) << " ms "; nl.
            out << "3D CMDLIST time " << (commandListConstructionTime* 1000.0f) << " ms "; nl.
            out << "Rendered objects: " << lastFrameVisibleObjectCount; nl.
        }.

        let result mutable := (builder text: frameTimeString asArraySlice at: Float32x2(10.0f, 10.0f) font: self defaultFontFaceWithSize color: Float32x4 green) asNode.
        result := (builder transform: (AffinePostTransform2dF32()
			setIdentity;
			scaleBy: currentExtent y / 480.0f;
			yourself) node: result) asNode.
        result
    }.

    virtual method buildOverlayScene2DWith: (builder: Std Graphics Scene2D BuilderRef const ref) ::=> Std Graphics Scene2D NodeRef := {
        self buildOverlayFPSDisplayWith: builder
    }.
}.

compileTime constant SceneViewPtr := SceneView rcPointer

}. ## End of namespace Application
}. ## End of namespace Woden
