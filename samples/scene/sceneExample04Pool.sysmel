Compiler importModulesNamed: #(
    #"Woden.Application.SampleScene"
    #"Woden.Application.Headfull"
).

useNamespace: Woden Runtime.

function constructPoolScene(scene: ScenePtr const ref) => Void := {
    let engine := scene _ engine.

    ## Build the floor.
    {
        let tileMaterial := engine _ resourceCache _ loadMaterialFrom: "materials/artificial/floor/tile" asNativeFileReference.
        let concreteMaterial := engine _ resourceCache _ loadMaterialFrom: "materials/artificial/concrete/concrete" asNativeFileReference.

        let borderThickness := 0.5f.
        let meshBuilder := engine _ newGenericMeshBuilder.
        meshBuilder _
            currentMaterial: (tileMaterial upCastFor: Material);

            translateToX: borderThickness*0.5f negated - 4.5f y: -1.0f z: 0.0f;
    		addCubeWithWidth: 4.0f - borderThickness height: 2.0f depth: 5.0f + borderThickness*2.0f;
    		addCollisionBox;

    		translateToX: borderThickness*0.5f+ 4.5f y: -1.0f z: 0.0f;
    		addCubeWithWidth: 4.0f - borderThickness height: 2.0f depth: 5.0f + borderThickness*2.0f;
    		addCollisionBox;

    		translateToX: 0.0f y: -1.0f z: borderThickness + 4.5f;
    		addCubeWithWidth: 13.0f height: 2.0f depth: 4.0f;
    		addCollisionBox;

    		translateToX: 0.0f y: -1.0f z: borderThickness negated - 4.5f;
    		addCubeWithWidth: 13.0f height: 2.0f depth: 4.0f;
    		addCollisionBox;

    		## Bottom
    		currentMaterial: (concreteMaterial upCastFor: Material);
    		translateToX: 0.0f y: -2.05f z: 0.0f;
    		addCubeWithWidth: 5.0f height: 0.1f depth: 5.0f;
    		addCollisionBox;

    		## Border
    		translateToX: -2.5f - (borderThickness*0.5f) y: -1.0f z: 0.0f;
    		addCubeWithWidth: borderThickness height: 2.2f depth: 5.0f + borderThickness*2.0f;
    		addCollisionBox;

    		translateToX: 2.5f + (borderThickness*0.5f) y: -1.0 z: 0.0f;
    		addCubeWithWidth: borderThickness height: 2.2f depth: 5.0f + borderThickness*2.0f;
    		addCollisionBox;

    		translateToX: 0.0f y: -1.0f z: 2.5f + borderThickness*0.5f;
    		addCubeWithWidth: 5.0f height: 2.2f depth: borderThickness;
    		addCollisionBox;

    		translateToX: 0.0f y: -1.0f z: -2.5f - borderThickness*0.5f;
    		addCubeWithWidth: 5.0f height: 2.2f depth: borderThickness;
    		addCollisionBox;

    		## Use a planar texture coordinates
    		planeTextureScale: 2.0f offset: 0.0f;
    		computeTangentsBitangents.

        let renderable := meshBuilder _ renderable.

        let floor := SpatialObjectNode rcNew.
        floor _ renderable: renderable.
        scene _ add: (floor upCastFor: SceneNode).
    }.

    ## Build and add the cube to the scene.
    {
        let meshBuilder := engine _ newGenericMeshBuilder.
        meshBuilder _ addCubeWithWidth: 1.0 height: 1.0 depth: 1.0.
        let renderable := meshBuilder _ renderable.

        let cube := SpatialObjectNode rcNew.
        cube _
            renderable: renderable;
            translateByX: 4.5f y: 0.5f z: 0.0f.
        scene _ add: (cube upCastFor: SceneNode).
    }.

    ## Build the water.
    {
        let meshBuilder := engine _ newGenericMeshBuilder.
        meshBuilder _
            currentMaterial: (engine _ resourceCache _ loadMaterialFrom: "materials/water/pool/pool" asNativeFileReference);
            addGridWithSize: 5.0f subdivisions: 64.

        let renderable := WaterRenderableMesh rcNew.
        renderable _
            mesh: meshBuilder _ renderable.
        renderable _ mesh _ withoutDepthWrite.

        renderable _ waterDeformationState
            harmonicAt: 0 amplitude: 0.05f frequency: -1.1f center: Float32x2(0, 0);
            harmonicAt: 1 amplitude: 0.02f frequency: 2.23f direction: Float32x2(0, -1);
            harmonicAt: 2 amplitude: 0.015f frequency: 1.80f direction: Float32x2(1, 0).

        let water := SpatialObjectNode rcNew.

        water _
            renderable: (renderable upCastFor: Renderable);
            translateToX: 0.0f y: -0.3 z: 0.0f.
        scene _ add: (water upCastFor: SceneNode).
    }.

    ## Add the light source.
    {
        let sunLight := LightSourceNode rcNew.
        sunLight _
            makeDirectional;
            castShadows: true;
            intensity: Float32x3(1f, 1f, 0.8f) normalized * 0.7f;
            rotateDegreesOnX: -35;
            rotateDegreesOnY: -5;
            translateToX: 0.0f y: 1.5f z: 2.5f.
        scene _ add: (sunLight upCastFor: SceneNode).
    }.

    ## Add the sky box.
    {
        let meshBuilder := engine _ newGenericMeshBuilder.
        meshBuilder _
            currentMaterial: ((engine _ resourceCache _ loadMaterialFrom: "materials/sky/sample/daylight" asNativeFileReference));
            addInteriorCubeWithWidth: 1.0 height: 1.0 depth: 1.0.
        let renderable := meshBuilder _ renderable.
        renderable _ withoutDepth.

        let cube := SpatialObjectNode rcNew.
        cube _
            renderable: renderable.
        scene _ backgroundLayer _ addChild: (cube upCastFor: SceneNode).
    }.

}.

Woden Application sampleSceneMainWith: {:model :: Void |
    let scene := model newScene.
    let engine := model engine.

    constructPoolScene(scene).

    ## Setup the camera
    {
        let camera := model mainCamera.
        camera _
            toneMappingOperator: ToneMappingOperator Filmic;
            withAutoExposure;
            translateByX: 0.0f y: 1.0f z: -4.0f.
    }.
}.
