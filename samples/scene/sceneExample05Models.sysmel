Compiler importModulesNamed: #(
    #"Woden.Application.SampleScene"
    #"Woden.Application.Headfull"
).

useNamespace: Woden Runtime.

Woden Application sampleSceneMainWith: {:model :: Void |
    let scene := model newScene.
    scene _
        backgroundColor: Float32x4(0.01f, 0.01f, 0.01f, 1.0f);
        backgroundLighting: Float32x3(0.03f, 0.03f, 0.03f).

    ## Setup the camera
    {
        let camera := model mainCamera.
        camera _ translateByZ: 3.0; translateByY: 1.6.
    }.

    ## Build the floor.
    {
        let meshBuilder := model engine _ newGenericMeshBuilder.
        meshBuilder _
            addCubeWithWidth: 10.0 height: 0.5 depth: 10.0.
        let renderable := meshBuilder _ renderable.

        let floor := SpatialObjectNode sharedNew.
        floor _
            renderable: renderable;
            translateByY: -0.25f.
        scene _ add: (floor upCastFor: SceneNode).
    }.

    ## Table
    {
        let modelAsset := model engine _ resourceCache _ loadModelAssetFrom: "models/samples/table" asNativeFileReference.
        let meshRenderable := modelAsset _ meshes first _ asRenderableFor: model engine.

        let model := SpatialObjectNode sharedNew.
        model _ renderable: meshRenderable.
        scene _ add: (model upCastFor: SceneNode).
    }.

    ## Cube
    {
        let modelAsset := model engine _ resourceCache _ loadModelAssetFrom: "models/samples/cube" asNativeFileReference.
        let meshRenderable := modelAsset _ meshes first _ asRenderableFor: model engine.

        let model := SpatialObjectNode sharedNew.
        model _ translateByY: 1.0; translateByZ: -2.5.
        model _ renderable: meshRenderable.
        scene _ add: (model upCastFor: SceneNode).
    }.

    ## Chair separate
    {
        let modelAsset := model engine _ resourceCache _ loadModelAssetFrom: "models/samples/chair_separated" asNativeFileReference.
        modelAsset ifNotNil: {
            let chairNode := modelAsset _ nodes first _ asSceneNodeFor: model engine.
            chairNode _
                rotateDegreesOnY: 90;
                translateByX: 1.5f.
            scene _ add: chairNode.
        }.
    }.

    ## Chair
    {
        let modelAsset := model engine _ resourceCache _ loadModelAssetFrom: "models/samples/chair" asNativeFileReference.
        modelAsset ifNotNil: {
            let chairNode := modelAsset _ nodes first _ asSceneNodeFor: model engine.
            chairNode _
                rotateDegreesOnY: -90;
                translateByX: -1.5f.
            scene _ add: chairNode.
        }.
    }.

    ## FIXME: Use the teapot here.
    ## Damaged helmet
    {
        let modelAsset := model engine _ resourceCache _ loadModelAssetFrom: "models/glTF-Samples/DamagedHelmet/DamagedHelmet" asNativeFileReference.
        modelAsset ifNotNil: {
            let chairNode := modelAsset _ nodes first _ asSceneNodeFor: model engine.
            chairNode _
                scaleBy: 0.2f; translateByY: 1.18f.
            scene _ add: chairNode.
        }.
    }.

    ## Add the light source.
    {
        let light := LightSourceNode sharedNew.
        light _
            makePoint;
            radius: 10.0;
            intensity: Float32x3(1.0f, 1.0f, 0.9f);
            translateByX: 0.0f y: 2.0f z: 0.0f.
        scene _ add: (light upCastFor: SceneNode).
    }.
}.
