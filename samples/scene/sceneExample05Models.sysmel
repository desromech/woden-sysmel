Compiler importModulesNamed: #(
    #"Woden.Application.SampleScene"
    #"Woden.Application.Headfull"
).

useNamespace: Woden Runtime.

Woden Application sampleSceneMainWith: {:model :: Void |
    let scene := model newScene.
    scene
        backgroundColor: Float32x4(0.01f, 0.01f, 0.01f, 1.0f);
        backgroundLighting: Float32x3(0.03f, 0.03f, 0.03f).

    ## Setup the camera
    model mainCamera translateByZ: 3.0; translateByY: 1.6.

    ## Build the floor.
    scene add: (SpatialObjectNode new
        renderable: (model engine newGenericMeshBuilder
            addCubeWithWidth: 10.0 height: 0.5 depth: 10.0;
            renderable);
        translateByY: -0.25f;
        upCastFor: SceneNode).

    ## Table
    {
        let modelAsset := model engine resourceCache loadModelAssetFrom: "models/samples/table" asNativeFileReference.
        let meshRenderable := modelAsset _ meshes first _ asRenderableFor: model engine.

        scene add: (SpatialObjectNode new
            renderable: meshRenderable;
            upCastFor: SceneNode).
    }.

    ## Cube
    {
        let modelAsset := model engine resourceCache loadModelAssetFrom: "models/samples/cube" asNativeFileReference.
        let meshRenderable := modelAsset _ meshes first _ asRenderableFor: model engine.

        scene add: (SpatialObjectNode new
            renderable: meshRenderable;
            translateByY: 1.0;
            translateByZ: -2.5;
            upCastFor: SceneNode).
    }.

    ## Chair separate
    {
        let modelAsset := model engine resourceCache loadModelAssetFrom: "models/samples/chair_separated" asNativeFileReference.
        modelAsset ifNotNil: {
            let chairNode := modelAsset _ nodes first _ asSceneNodeFor: model engine.
            chairNode
                rotateDegreesOnY: 90;
                translateByX: 1.5f.
            scene add: chairNode.
        }.
    }.

    ## Chair
    {
        let modelAsset := model engine resourceCache loadModelAssetFrom: "models/samples/chair" asNativeFileReference.
        modelAsset ifNotNil: {
            let chairNode := modelAsset _ nodes first _ asSceneNodeFor: model engine.
            chairNode
                rotateDegreesOnY: -90;
                translateByX: -1.5f.
            scene add: chairNode.
        }.
    }.

    ## FIXME: Use the teapot here.
    ## Damaged helmet
    {
        let modelAsset := model engine resourceCache loadModelAssetFrom: "models/DamagedHelmet/DamagedHelmet" asNativeFileReference.
        modelAsset ifNotNil: {
            let chairNode := modelAsset _ nodes first _ asSceneNodeFor: model engine.
            chairNode
                scaleBy: 0.2f; translateByY: 1.18f; translateByX: 0.3f.
            scene add: chairNode.
        }.
    }.

    ## Wodanic
    {
        let modelAsset := model engine resourceCache loadModelAssetFrom: "models/samples/wodanic" asNativeFileReference.
        modelAsset ifNotNil: {
            let node := modelAsset _ createSceneNodeNamed: "Wodanic" asMutableString for: model engine.
            node ifNotNil: {
                node
                    scaleBy: 0.01f;
                    rotateDegreesOnY: -90.0f;
                    translateByY: 1.04f;
                    translateByX: -0.3f.
                scene add: node.
            }.
        }.
    }.

    ## Add the light source.
    scene add: (LightSourceNode new
        makeSpot;
        radius: 10.0;
        intensity: Float32x3(1.0f, 1.0f, 0.9f)*1.5f;
        spotOuterCutoff: 65.0f;
        spotInnerCutoff: 60.0f;
        castShadows: true;
        translateByX: 0.0f y: 2.3f z: 0.0f;
        lookAtBottom;
        upCastFor: SceneNode).
}.
