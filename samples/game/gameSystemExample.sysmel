Compiler importModulesNamed: #(
    #"Woden.Application.SampleGameSystem"
).

useNamespace: Woden Runtime.
useNamespace: Woden GameSystem.
useNamespace: Woden MapDefinition.

function attemptToLoadLevel(engine: EngineRef const ref, name: Std ImmutableString) => LevelDefinitionRef := {
    let extensions mutable := Char8 const arraySlice array(
        "wlevel",
        "wtlevel"
    ).

    let loadedLevel := LevelDefinition loadFromFile: (engine resourceCache solveResourceFileReference: name asMutableString asNativeFileReference withExtensions: extensions).
    loadedLevel isNil || loadedLevel sectors isEmpty ifTrue: {
        return: LevelDefinitionRef nil
    }.

    loadedLevel
}.

Std MainEntryPoint: {:args :: Int32 |
    args do: {:arg :: Void |
        arg selectCase: #{
        "-dump-entity-definitions" : {
            EntityRegistry uniqueInstance dumpEntityDefinitionsInto: Std stdout.
            return: 0
        }.
        _ : {}
        }.
    }.

    ## Create the scene model and initialize with the C arguments.
    let gameModel mutable := SampleGameApplicationModel new.
    (gameModel initializeWithCommandLine: args) ifFalse: {
        return: 1
    }.

    let levelDefinition mutable := LevelDefinitionRef nil.
    args size >= 2 ifTrue: {
        levelDefinition := attemptToLoadLevel(gameModel engine, args second)
    }.

    levelDefinition ifNil: {
        levelDefinition := attemptToLoadLevel(gameModel engine, "maps/test-level")
    }.

    levelDefinition ifNil: {
        levelDefinition := LevelDefinition simpleSampleLevel.
    }.

    ## Test sector definition
    {

        gameModel globalGameState
            loadSectorFromDefinition: levelDefinition sectors first;
            startNewGame
    }.

    ## Open the main view.
    (gameModel openApplication) ifFalse: {
        return: 1
    }.

    ## Enter the main loop.
    gameModel runMainLoopAndShutdown.
}.
